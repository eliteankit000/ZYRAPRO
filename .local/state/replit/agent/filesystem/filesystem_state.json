{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nZyra is an AI-powered Shopify SaaS application designed to help e-commerce merchants boost sales, optimize product listings, recover abandoned carts, and automate growth through intelligent automation. The application provides AI-generated product descriptions, SEO optimization tools, email marketing automation, and analytics dashboard to enhance store performance.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe client-side is built with React 18 and TypeScript, using Vite as the build tool. The UI leverages shadcn/ui components with Radix UI primitives for accessibility and consistent design patterns. The application uses Wouter for lightweight routing and TanStack Query for server state management. Styling is implemented with Tailwind CSS using a dark theme with gradient accents (midnight blue to light azure color palette).\n\nThe frontend follows a component-based architecture with:\n- **Pages**: Landing, authentication, dashboard, and 404 pages\n- **Dashboard Components**: Modular sections for AI generation, SEO tools, analytics, and sidebar navigation\n- **UI Components**: Reusable shadcn/ui components for forms, cards, buttons, and layout elements\n\n## Backend Architecture\nThe server runs on Express.js with TypeScript, providing RESTful API endpoints. Authentication is handled through express-session with Passport.js using local strategy and bcrypt for password hashing. The application supports both development (Vite middleware) and production (static file serving) environments.\n\nKey backend features include:\n- **Session-based Authentication**: Secure user sessions with Redis-compatible storage\n- **API Route Structure**: Organized routes for user management, product operations, and AI services\n- **Middleware Pipeline**: Request logging, JSON parsing, and error handling\n\n## Database Design\nThe application uses PostgreSQL with Drizzle ORM for type-safe database operations. The schema includes:\n- **Users Table**: Authentication, subscription plans (trial/starter/pro/growth), and Stripe integration\n- **Products Table**: Product information, optimization status, and Shopify integration\n- **SEO Meta Table**: SEO titles, descriptions, keywords, and optimization scores\n- **Campaigns Table**: Email/SMS marketing campaigns and analytics\n- **Analytics Table**: Performance tracking and metrics storage\n\nDatabase migrations are managed through Drizzle Kit with environment-specific configurations.\n\n## AI Integration\nOpenAI GPT-4 integration provides core AI functionality for:\n- **Product Description Generation**: Multiple brand voice styles (sales, SEO, casual)\n- **SEO Optimization**: Automated title and meta description generation with keyword analysis\n- **Content Analysis**: Image alt-text generation and accessibility improvements\n\n## Authentication & Authorization\nUser authentication implements session-based security with:\n- **Local Strategy**: Email/password authentication with bcrypt hashing\n- **Session Management**: Express-session with secure cookie configuration\n- **User Roles**: Basic role-based access control with plan-based feature restrictions\n- **Trial System**: 7-day trial with automatic expiration handling\n\n## State Management\nClient-side state management uses:\n- **TanStack Query**: Server state caching, background updates, and optimistic updates\n- **React Hook Form**: Form state management with Zod validation\n- **React Context**: Authentication state and global UI state\n\n# External Dependencies\n\n## Database & Hosting\n- **Neon Database**: Serverless PostgreSQL with connection pooling\n- **Drizzle ORM**: Type-safe database queries and migrations\n- **Vercel/Replit Deployment**: Frontend hosting with serverless functions\n\n## AI & Machine Learning\n- **OpenAI API**: GPT-4 for text generation and content optimization\n- **AI Content Services**: Product descriptions, SEO optimization, and image analysis\n\n## Payment Processing\n- **Stripe Integration**: Subscription management, customer billing, and payment processing\n- **Plan Management**: Trial, Starter ($15/month), Pro ($25/month), and Growth ($49/month) tiers\n\n## Email & SMS Services\n- **SendGrid**: Transactional emails, marketing campaigns, and deliverability\n- **Twilio**: SMS notifications and cart recovery campaigns (configured but not fully implemented)\n\n## Development Tools\n- **TypeScript**: Full-stack type safety with strict configuration\n- **Vite**: Fast development server with HMR and build optimization\n- **Tailwind CSS**: Utility-first styling with custom design system\n- **ESBuild**: Production bundling for serverless deployment\n\n## Third-party Integrations\n- **Shopify API**: Product sync, inventory management, and order processing (planned)\n- **Analytics Services**: Custom analytics tracking with potential Google Analytics integration\n- **Font Services**: Google Fonts integration for typography","size_bytes":4933},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        // Zyra brand colors\n        midnight: \"#021024\",\n        deepIndigo: \"#052659\",\n        slateBlue: \"#5483B3\",\n        softSkyBlue: \"#7DA0CA\",\n        lightAzure: \"#C1E8FF\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2937},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { drizzle } from \"drizzle-orm/node-postgres\";\nimport { Pool } from \"pg\";\nimport { eq, desc, and, gte, lt } from \"drizzle-orm\";\nimport bcrypt from \"bcrypt\";\nimport { randomUUID } from \"crypto\";\nimport {\n  users,\n  profiles,\n  sessions,\n  subscriptionPlans,\n  subscriptions,\n  usageStats,\n  activityLogs,\n  toolsAccess,\n  realtimeMetrics,\n  type User,\n  type InsertUser,\n  type Profile,\n  type InsertProfile,\n  type Session,\n  type InsertSession,\n  type SubscriptionPlan,\n  type InsertSubscriptionPlan,\n  type Subscription,\n  type UsageStats,\n  type InsertUsageStats,\n  type ActivityLog,\n  type InsertActivityLog,\n  type ToolsAccess,\n  type InsertToolsAccess,\n  type RealtimeMetrics,\n  type InsertRealtimeMetrics\n} from \"@shared/schema\";\n\n// Database connection\nlet db: any;\nlet pool: Pool;\n\nif (process.env.DATABASE_URL) {\n  pool = new Pool({\n    connectionString: process.env.DATABASE_URL,\n  });\n  db = drizzle(pool);\n} else {\n  console.warn(\"DATABASE_URL not found. Database operations will fail.\");\n}\n\n// Error handling wrapper\nasync function withErrorHandling<T>(\n  operation: () => Promise<T>,\n  operationName: string\n): Promise<T> {\n  try {\n    if (!db) {\n      throw new Error(\"Database connection not configured. Please check DATABASE_URL.\");\n    }\n    console.log(`[DB] Starting operation: ${operationName}`);\n    const result = await operation();\n    console.log(`[DB] Operation completed successfully: ${operationName}`);\n    return result;\n  } catch (error) {\n    console.error(`[DB] Error in ${operationName}:`, error);\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n    throw new Error(`Database operation failed: ${operationName} - ${errorMessage}`);\n  }\n}\n\n// User operations\nexport async function createUser(userData: InsertUser): Promise<User> {\n  return withErrorHandling(async () => {\n    const hashedPassword = await bcrypt.hash(userData.password, 10);\n    const [user] = await db.insert(users).values({\n      ...userData,\n      password: hashedPassword,\n    }).returning();\n    \n    // Auto-create profile for user\n    await db.insert(profiles).values({\n      userId: user.id,\n      name: userData.fullName,\n    });\n    \n    console.log(`[DB] User created with ID: ${user.id}`);\n    return user;\n  }, \"createUser\");\n}\n\nexport async function getUserByEmail(email: string): Promise<User | undefined> {\n  return withErrorHandling(async () => {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }, \"getUserByEmail\");\n}\n\nexport async function getUserById(userId: string): Promise<User | undefined> {\n  return withErrorHandling(async () => {\n    const [user] = await db.select().from(users).where(eq(users.id, userId));\n    return user || undefined;\n  }, \"getUserById\");\n}\n\nexport async function updateUserSubscription(userId: string, planId: string): Promise<User> {\n  return withErrorHandling(async () => {\n    // Get the subscription plan details\n    const [plan] = await db.select().from(subscriptionPlans).where(eq(subscriptionPlans.id, planId));\n    if (!plan) {\n      throw new Error(`Subscription plan with ID ${planId} not found`);\n    }\n\n    // Update user's plan\n    const [updatedUser] = await db.update(users)\n      .set({ plan: plan.planName })\n      .where(eq(users.id, userId))\n      .returning();\n\n    // Create subscription record\n    await db.insert(subscriptions).values({\n      userId,\n      plan: plan.planName,\n      status: \"active\",\n    });\n\n    console.log(`[DB] User ${userId} subscription updated to ${plan.planName}`);\n    return updatedUser;\n  }, \"updateUserSubscription\");\n}\n\n// Profile operations\nexport async function getUserProfile(userId: string): Promise<Profile | undefined> {\n  return withErrorHandling(async () => {\n    const [profile] = await db.select().from(profiles).where(eq(profiles.userId, userId));\n    return profile || undefined;\n  }, \"getUserProfile\");\n}\n\nexport async function updateUserProfile(userId: string, profileData: Partial<InsertProfile>): Promise<Profile> {\n  return withErrorHandling(async () => {\n    const [updatedProfile] = await db.update(profiles)\n      .set({ ...profileData, updatedAt: new Date() })\n      .where(eq(profiles.userId, userId))\n      .returning();\n\n    if (!updatedProfile) {\n      throw new Error(`Profile for user ${userId} not found`);\n    }\n\n    console.log(`[DB] Profile updated for user: ${userId}`);\n    return updatedProfile;\n  }, \"updateUserProfile\");\n}\n\n// Session operations\nexport async function saveSession(sessionData: InsertSession): Promise<Session> {\n  return withErrorHandling(async () => {\n    // Clean up expired sessions first\n    await db.delete(sessions).where(lt(sessions.expiresAt, new Date()));\n\n    const [session] = await db.insert(sessions).values(sessionData).returning();\n    console.log(`[DB] Session saved: ${session.sessionId}`);\n    return session;\n  }, \"saveSession\");\n}\n\nexport async function getSession(sessionId: string): Promise<Session | undefined> {\n  return withErrorHandling(async () => {\n    const [session] = await db.select()\n      .from(sessions)\n      .where(and(\n        eq(sessions.sessionId, sessionId),\n        gte(sessions.expiresAt, new Date())\n      ));\n    \n    return session || undefined;\n  }, \"getSession\");\n}\n\nexport async function deleteSession(sessionId: string): Promise<void> {\n  return withErrorHandling(async () => {\n    await db.delete(sessions).where(eq(sessions.sessionId, sessionId));\n    console.log(`[DB] Session deleted: ${sessionId}`);\n  }, \"deleteSession\");\n}\n\n// Subscription plan operations\nexport async function getSubscriptionPlans(): Promise<SubscriptionPlan[]> {\n  return withErrorHandling(async () => {\n    return await db.select({\n      id: subscriptionPlans.id,\n      planName: subscriptionPlans.planName,\n      price: subscriptionPlans.price,\n      features: subscriptionPlans.features,\n      isActive: subscriptionPlans.isActive,\n      createdAt: subscriptionPlans.createdAt\n    })\n      .from(subscriptionPlans)\n      .where(eq(subscriptionPlans.isActive, true))\n      .orderBy(subscriptionPlans.price);\n  }, \"getSubscriptionPlans\");\n}\n\nexport async function createSubscriptionPlan(planData: InsertSubscriptionPlan): Promise<SubscriptionPlan> {\n  return withErrorHandling(async () => {\n    const [plan] = await db.insert(subscriptionPlans).values(planData).returning();\n    console.log(`[DB] Subscription plan created: ${plan.planName}`);\n    return plan;\n  }, \"createSubscriptionPlan\");\n}\n\n// Utility functions\nexport async function cleanupExpiredSessions(): Promise<number> {\n  return withErrorHandling(async () => {\n    const result = await db.delete(sessions).where(lt(sessions.expiresAt, new Date()));\n    console.log(`[DB] Cleaned up expired sessions`);\n    return result.rowCount || 0;\n  }, \"cleanupExpiredSessions\");\n}\n\nexport async function getUserSubscription(userId: string): Promise<Subscription | undefined> {\n  return withErrorHandling(async () => {\n    const [subscription] = await db.select()\n      .from(subscriptions)\n      .where(eq(subscriptions.userId, userId))\n      .orderBy(desc(subscriptions.createdAt));\n    \n    return subscription || undefined;\n  }, \"getUserSubscription\");\n}\n\n// Seed default subscription plans\nexport async function seedSubscriptionPlans(): Promise<void> {\n  return withErrorHandling(async () => {\n    console.log(\"[DB] Seeding default subscription plans...\");\n\n    const defaultPlans: InsertSubscriptionPlan[] = [\n      {\n        planName: \"Forever Free\",\n        price: \"0\",\n        features: [\n          \"Up to 5 products\",\n          \"1 email per month\",\n          \"1 SMS per month\", \n          \"Basic analytics\",\n          \"Community support\"\n        ],\n        limits: {\n          products: 5,\n          emails: 1,\n          sms: 1\n        }\n      },\n      {\n        planName: \"Starter\",\n        price: \"39.00\",\n        features: [\n          \"Up to 50 products\",\n          \"CSV import/export\",\n          \"Shopify/WooCommerce sync\",\n          \"500 emails per month\",\n          \"200 SMS per month\",\n          \"Advanced analytics\"\n        ],\n        limits: {\n          products: 50,\n          emails: 500,\n          sms: 200\n        }\n      },\n      {\n        planName: \"Pro\",\n        price: \"99.00\",\n        features: [\n          \"Unlimited products\",\n          \"Smart suggestions\",\n          \"Rollback functionality\",\n          \"5,000 emails per month\",\n          \"1,000 SMS per month\",\n          \"Email segmentation\",\n          \"SEO tracker\",\n          \"A/B testing\"\n        ],\n        limits: {\n          products: -1,\n          emails: 5000,\n          sms: 1000\n        }\n      },\n      {\n        planName: \"Growth\",\n        price: \"299.00\",\n        features: [\n          \"Everything in Pro\",\n          \"Multi-language support\",\n          \"Ad export functionality\",\n          \"Content repurposing\",\n          \"25,000 emails per month\",\n          \"5,000 SMS per month\",\n          \"Revenue dashboard\",\n          \"White-label options\"\n        ],\n        limits: {\n          products: -1,\n          emails: 25000,\n          sms: 5000\n        }\n      },\n      {\n        planName: \"Enterprise\",\n        price: \"999.00\",\n        features: [\n          \"Unlimited everything\",\n          \"Custom AI tuning\",\n          \"API access\",\n          \"SLA guarantee\",\n          \"Dedicated support manager\",\n          \"Custom integrations\",\n          \"Advanced reporting\"\n        ],\n        limits: {\n          products: -1,\n          emails: -1,\n          sms: -1\n        }\n      },\n    ];\n\n    // Check if plans already exist\n    for (const planData of defaultPlans) {\n      const [existingPlan] = await db.select({\n        id: subscriptionPlans.id,\n        planName: subscriptionPlans.planName,\n        price: subscriptionPlans.price,\n        features: subscriptionPlans.features,\n        isActive: subscriptionPlans.isActive,\n        createdAt: subscriptionPlans.createdAt\n      })\n        .from(subscriptionPlans)\n        .where(eq(subscriptionPlans.planName, planData.planName));\n\n      if (!existingPlan) {\n        // Only insert fields that exist in the database schema\n        await db.insert(subscriptionPlans).values({\n          planName: planData.planName,\n          price: planData.price,\n          features: planData.features,\n          limits: {},\n          interval: \"month\"\n        });\n        console.log(`[DB] Created subscription plan: ${planData.planName}`);\n      } else {\n        console.log(`[DB] Subscription plan already exists: ${planData.planName}`);\n      }\n    }\n\n    console.log(\"[DB] Subscription plans seeding completed!\");\n  }, \"seedSubscriptionPlans\");\n}\n\n// Database health check\nexport async function testDatabaseConnection(): Promise<boolean> {\n  try {\n    if (!db) return false;\n    \n    // Simple test query\n    await db.execute(\"SELECT 1\");\n    console.log(\"[DB] Database connection test successful!\");\n    return true;\n  } catch (error) {\n    console.error(\"[DB] Database connection test failed:\", error);\n    return false;\n  }\n}\n\n// REAL-TIME DASHBOARD DATA FUNCTIONS\n\n// Usage Stats Operations\nexport async function getUserUsageStats(userId: string): Promise<UsageStats | null> {\n  return withErrorHandling(async () => {\n    const [stats] = await db.select().from(usageStats).where(eq(usageStats.userId, userId));\n    return stats || null;\n  }, \"getUserUsageStats\");\n}\n\nexport async function createOrUpdateUsageStats(userId: string, statsData: Partial<InsertUsageStats>): Promise<UsageStats> {\n  return withErrorHandling(async () => {\n    const existing = await getUserUsageStats(userId);\n    \n    if (existing) {\n      const [updated] = await db.update(usageStats)\n        .set({ ...statsData, lastUpdated: new Date() })\n        .where(eq(usageStats.userId, userId))\n        .returning();\n      return updated;\n    } else {\n      const [created] = await db.insert(usageStats)\n        .values({ userId, ...statsData })\n        .returning();\n      return created;\n    }\n  }, \"createOrUpdateUsageStats\");\n}\n\nexport async function incrementUsageStat(userId: string, statField: keyof UsageStats, increment: number = 1): Promise<void> {\n  return withErrorHandling(async () => {\n    const current = await getUserUsageStats(userId);\n    if (current) {\n      const currentValue = current[statField] as number || 0;\n      await db.update(usageStats)\n        .set({ [statField]: currentValue + increment, lastUpdated: new Date() })\n        .where(eq(usageStats.userId, userId));\n    } else {\n      await db.insert(usageStats)\n        .values({ userId, [statField]: increment });\n    }\n    console.log(`[DB] Incremented ${statField} by ${increment} for user ${userId}`);\n  }, \"incrementUsageStat\");\n}\n\n// Activity Logs Operations\nexport async function createActivityLog(logData: InsertActivityLog): Promise<ActivityLog> {\n  return withErrorHandling(async () => {\n    const [log] = await db.insert(activityLogs).values(logData).returning();\n    console.log(`[DB] Activity logged: ${logData.action} for user ${logData.userId}`);\n    return log;\n  }, \"createActivityLog\");\n}\n\nexport async function getUserActivityLogs(userId: string, limit: number = 10): Promise<ActivityLog[]> {\n  return withErrorHandling(async () => {\n    return await db.select()\n      .from(activityLogs)\n      .where(eq(activityLogs.userId, userId))\n      .orderBy(desc(activityLogs.createdAt))\n      .limit(limit);\n  }, \"getUserActivityLogs\");\n}\n\n// Tools Access Operations\nexport async function trackToolAccess(userId: string, toolName: string): Promise<ToolsAccess> {\n  return withErrorHandling(async () => {\n    const [existing] = await db.select()\n      .from(toolsAccess)\n      .where(and(eq(toolsAccess.userId, userId), eq(toolsAccess.toolName, toolName)));\n\n    if (existing) {\n      const [updated] = await db.update(toolsAccess)\n        .set({ \n          accessCount: existing.accessCount + 1,\n          lastAccessed: new Date()\n        })\n        .where(and(eq(toolsAccess.userId, userId), eq(toolsAccess.toolName, toolName)))\n        .returning();\n      return updated;\n    } else {\n      const [created] = await db.insert(toolsAccess)\n        .values({ userId, toolName, accessCount: 1 })\n        .returning();\n      return created;\n    }\n  }, \"trackToolAccess\");\n}\n\nexport async function getUserToolsAccess(userId: string): Promise<ToolsAccess[]> {\n  return withErrorHandling(async () => {\n    return await db.select()\n      .from(toolsAccess)\n      .where(eq(toolsAccess.userId, userId))\n      .orderBy(desc(toolsAccess.lastAccessed));\n  }, \"getUserToolsAccess\");\n}\n\n// Real-time Metrics Operations\nexport async function updateRealtimeMetric(metricData: InsertRealtimeMetrics): Promise<RealtimeMetrics> {\n  return withErrorHandling(async () => {\n    const [metric] = await db.insert(realtimeMetrics).values(metricData).returning();\n    console.log(`[DB] Real-time metric updated: ${metricData.metricName} for user ${metricData.userId}`);\n    return metric;\n  }, \"updateRealtimeMetric\");\n}\n\nexport async function getUserRealtimeMetrics(userId: string, hours: number = 24): Promise<RealtimeMetrics[]> {\n  return withErrorHandling(async () => {\n    const hoursAgo = new Date(Date.now() - hours * 60 * 60 * 1000);\n    return await db.select()\n      .from(realtimeMetrics)\n      .where(and(\n        eq(realtimeMetrics.userId, userId),\n        gte(realtimeMetrics.timestamp, hoursAgo)\n      ))\n      .orderBy(desc(realtimeMetrics.timestamp));\n  }, \"getUserRealtimeMetrics\");\n}\n\n// Comprehensive Dashboard Data\nexport async function getUserDashboardData(userId: string): Promise<{\n  user: User;\n  profile: Profile | null;\n  usageStats: UsageStats | null;\n  activityLogs: ActivityLog[];\n  toolsAccess: ToolsAccess[];\n  realtimeMetrics: RealtimeMetrics[];\n}> {\n  return withErrorHandling(async () => {\n    const [user, profile, stats, activities, tools, metrics] = await Promise.all([\n      getUserById(userId),\n      getUserProfile(userId),\n      getUserUsageStats(userId),\n      getUserActivityLogs(userId, 5),\n      getUserToolsAccess(userId),\n      getUserRealtimeMetrics(userId, 24)\n    ]);\n\n    if (!user) {\n      throw new Error(`User with ID ${userId} not found`);\n    }\n\n    console.log(`[DB] Dashboard data fetched for user ${userId}`);\n    return {\n      user,\n      profile: profile || null,\n      usageStats: stats,\n      activityLogs: activities,\n      toolsAccess: tools,\n      realtimeMetrics: metrics\n    };\n  }, \"getUserDashboardData\");\n}\n\n// Initialize user real-time data (called on first login)\nexport async function initializeUserRealtimeData(userId: string): Promise<void> {\n  return withErrorHandling(async () => {\n    // Create initial usage stats if they don't exist\n    const existingStats = await getUserUsageStats(userId);\n    if (!existingStats) {\n      await db.insert(usageStats).values({\n        userId,\n        totalRevenue: Math.floor(Math.random() * 50000) + 10000, // Random initial revenue $100-$500\n        totalOrders: Math.floor(Math.random() * 500) + 100, // Random initial orders 100-600\n        conversionRate: Math.floor(Math.random() * 500) + 200, // 2-7% conversion rate\n        cartRecoveryRate: Math.floor(Math.random() * 3000) + 5000, // 50-80% recovery rate\n        productsOptimized: 0,\n        emailsSent: 0,\n        smsSent: 0,\n        aiGenerationsUsed: 0,\n        seoOptimizationsUsed: 0\n      });\n    }\n\n    // Create initial activity log\n    await createActivityLog({\n      userId,\n      action: \"user_login\",\n      description: \"User logged into dashboard\",\n      toolUsed: \"dashboard\",\n      metadata: { timestamp: new Date().toISOString() }\n    });\n\n    console.log(`[DB] Initialized real-time data for user ${userId}`);\n  }, \"initializeUserRealtimeData\");\n}\n\n// Generate realistic sample metrics for demo purposes\nexport async function generateSampleMetrics(userId: string): Promise<void> {\n  return withErrorHandling(async () => {\n    const metrics = [\n      {\n        userId,\n        metricName: \"revenue_change\",\n        value: \"$\" + (Math.floor(Math.random() * 5000) + 1000),\n        changePercent: \"+\" + (Math.random() * 20 + 5).toFixed(1) + \"%\",\n        isPositive: true\n      },\n      {\n        userId,\n        metricName: \"orders_change\", \n        value: (Math.floor(Math.random() * 100) + 50).toString(),\n        changePercent: \"+\" + (Math.random() * 15 + 3).toFixed(1) + \"%\",\n        isPositive: true\n      },\n      {\n        userId,\n        metricName: \"conversion_change\",\n        value: (Math.random() * 2 + 2).toFixed(1) + \"%\",\n        changePercent: (Math.random() > 0.5 ? \"+\" : \"-\") + (Math.random() * 5 + 1).toFixed(1) + \"%\",\n        isPositive: Math.random() > 0.3\n      },\n      {\n        userId,\n        metricName: \"cart_recovery_change\",\n        value: (Math.random() * 20 + 70).toFixed(0) + \"%\",\n        changePercent: \"+\" + (Math.random() * 10 + 5).toFixed(1) + \"%\",\n        isPositive: true\n      }\n    ];\n\n    for (const metric of metrics) {\n      await updateRealtimeMetric(metric);\n    }\n\n    console.log(`[DB] Generated sample metrics for user ${userId}`);\n  }, \"generateSampleMetrics\");\n}\n\n// Export the database instance for direct queries if needed\nexport { db };\n","size_bytes":19091},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { initializeDatabase } from \"./init-db\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Initialize database on startup\n  try {\n    log(\"🔄 Initializing database...\");\n    await initializeDatabase();\n    log(\"✅ Database initialization completed\");\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    log(`❌ Database initialization failed: ${errorMessage}`);\n    // Don't exit - allow app to start anyway in case of DB issues\n  }\n\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2519},"server/init-db.ts":{"content":"import { testDatabaseConnection, seedSubscriptionPlans } from \"./db\";\n\nexport async function initializeDatabase(): Promise<void> {\n  console.log(\"🚀 [INIT] Starting database initialization...\");\n  \n  try {\n    // Test database connection\n    const isConnected = await testDatabaseConnection();\n    if (!isConnected) {\n      throw new Error(\"Database connection failed\");\n    }\n    \n    // Seed subscription plans\n    await seedSubscriptionPlans();\n    \n    console.log(\"✅ [INIT] Database initialization completed successfully!\");\n  } catch (error) {\n    console.error(\"❌ [INIT] Database initialization failed:\", error);\n    throw error;\n  }\n}\n\n// Auto-run if this file is executed directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  initializeDatabase()\n    .then(() => {\n      console.log(\"[INIT] Database ready!\");\n      process.exit(0);\n    })\n    .catch((error) => {\n      console.error(\"[INIT] Failed to initialize database:\", error);\n      process.exit(1);\n    });\n}","size_bytes":992},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport bcrypt from \"bcrypt\";\nimport session from \"express-session\";\nimport passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { insertUserSchema, insertProductSchema, insertNotificationSchema } from \"@shared/schema\";\nimport { storage } from \"./storage\";\nimport { \n  testDatabaseConnection,\n  seedSubscriptionPlans,\n  getSubscriptionPlans,\n  updateUserSubscription,\n  saveSession,\n  getSession,\n  deleteSession\n} from \"./db\";\nimport OpenAI from \"openai\";\nimport Stripe from \"stripe\";\n\n// Initialize OpenAI\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY_ENV_VAR || \"\"\n});\n\n// Initialize Stripe if keys are provided\nlet stripe: Stripe | null = null;\nif (process.env.STRIPE_SECRET_KEY) {\n  stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {\n    apiVersion: \"2025-08-27.basil\",\n  });\n}\n\ndeclare module \"express-session\" {\n  interface SessionData {\n    userId?: string;\n  }\n}\n\ndeclare global {\n  namespace Express {\n    interface User {\n      id: string;\n      email: string;\n      fullName: string;\n      role: string;\n      plan: string;\n      stripeCustomerId?: string | null;\n      stripeSubscriptionId?: string | null;\n    }\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Session configuration\n  app.use(\n    session({\n      secret: process.env.SESSION_SECRET || \"your-secret-key\",\n      resave: false,\n      saveUninitialized: false,\n      cookie: {\n        secure: process.env.NODE_ENV === \"production\",\n        maxAge: 24 * 60 * 60 * 1000, // 24 hours\n      },\n    })\n  );\n\n  // Passport configuration\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(\n      { usernameField: \"email\" },\n      async (email, password, done) => {\n        try {\n          const user = await storage.getUserByEmail(email);\n          if (!user) {\n            return done(null, false, { message: \"Invalid email or password\" });\n          }\n\n          const isValid = await bcrypt.compare(password, user.password);\n          if (!isValid) {\n            return done(null, false, { message: \"Invalid email or password\" });\n          }\n\n          return done(null, user);\n        } catch (error) {\n          return done(error);\n        }\n      }\n    )\n  );\n\n  passport.serializeUser((user, done) => {\n    done(null, user.id);\n  });\n\n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user);\n    } catch (error) {\n      done(error);\n    }\n  });\n\n  // Auth middleware\n  const requireAuth = (req: any, res: any, next: any) => {\n    if (req.isAuthenticated()) {\n      return next();\n    }\n    res.status(401).json({ message: \"Authentication required\" });\n  };\n\n  // Auth routes\n  app.post(\"/api/register\", async (req, res) => {\n    try {\n      const validatedData = insertUserSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(validatedData.email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User already exists\" });\n      }\n\n      const user = await storage.createUser(validatedData);\n      \n      // Auto-login after registration\n      req.login(user, (err) => {\n        if (err) {\n          return res.status(500).json({ message: \"Login failed after registration\" });\n        }\n        res.json({ user: { id: user.id, email: user.email, fullName: user.fullName, plan: user.plan } });\n      });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/login\", (req, res, next) => {\n    passport.authenticate(\"local\", (err: any, user: any, info: any) => {\n      if (err) {\n        return res.status(500).json({ message: \"Authentication error\" });\n      }\n      \n      if (!user) {\n        return res.status(401).json({ message: info?.message || \"Invalid email or password\" });\n      }\n      \n      req.logIn(user, (err) => {\n        if (err) {\n          return res.status(500).json({ message: \"Session creation failed\" });\n        }\n        \n        res.json({ \n          user: { \n            id: user.id, \n            email: user.email, \n            fullName: user.fullName, \n            plan: user.plan \n          } \n        });\n      });\n    })(req, res, next);\n  });\n\n  app.post(\"/api/logout\", (req, res) => {\n    req.logout((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Logout failed\" });\n      }\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  app.get(\"/api/me\", requireAuth, (req, res) => {\n    const user = req.user!;\n    res.json({ \n      user: { \n        id: user.id, \n        email: user.email, \n        fullName: user.fullName, \n        plan: user.plan \n      } \n    });\n  });\n\n  // AI Product Description Generator\n  app.post(\"/api/generate-description\", requireAuth, async (req, res) => {\n    try {\n      const { productName, category, features, audience, brandVoice } = req.body;\n\n      if (!productName) {\n        return res.status(400).json({ message: \"Product name is required\" });\n      }\n\n      const prompts = {\n        sales: `Create a compelling sales-focused product description for \"${productName}\" in the ${category} category. \n                Target audience: ${audience}. Key features: ${features}. \n                Make it persuasive, benefit-focused, and include a clear call-to-action. Keep it under 150 words.\n                Respond with JSON in this format: { \"description\": \"your description here\" }`,\n        \n        seo: `Create an SEO-optimized product description for \"${productName}\" in the ${category} category.\n              Target audience: ${audience}. Key features: ${features}.\n              Include relevant keywords naturally, focus on search-friendly language, and maintain readability.\n              Keep it under 160 words.\n              Respond with JSON in this format: { \"description\": \"your description here\" }`,\n        \n        casual: `Create a casual, friendly product description for \"${productName}\" in the ${category} category.\n                 Target audience: ${audience}. Key features: ${features}.\n                 Use conversational tone, emojis where appropriate, and make it relatable and fun.\n                 Keep it under 150 words.\n                 Respond with JSON in this format: { \"description\": \"your description here\" }`\n      };\n\n      const selectedPrompt = prompts[brandVoice as keyof typeof prompts] || prompts.sales;\n\n      // the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n      const response = await openai.chat.completions.create({\n        model: \"gpt-5\",\n        messages: [{ role: \"user\", content: selectedPrompt }],\n        response_format: { type: \"json_object\" },\n      });\n\n      const result = JSON.parse(response.choices[0].message.content || \"{}\");\n      res.json({ description: result.description });\n    } catch (error: any) {\n      console.error(\"AI generation error:\", error);\n      res.status(500).json({ message: \"Failed to generate description\" });\n    }\n  });\n\n  // SEO Optimization\n  app.post(\"/api/optimize-seo\", requireAuth, async (req, res) => {\n    try {\n      const { currentTitle, keywords, currentMeta, category } = req.body;\n\n      if (!currentTitle || !keywords) {\n        return res.status(400).json({ message: \"Title and keywords are required\" });\n      }\n\n      const prompt = `Optimize the following product for SEO:\n                      Current Title: \"${currentTitle}\"\n                      Keywords: \"${keywords}\"\n                      Category: \"${category}\"\n                      Current Meta: \"${currentMeta}\"\n                      \n                      Create an optimized SEO title (under 60 characters), meta description (under 160 characters), \n                      and suggest 5-7 relevant keywords. Calculate an SEO score out of 100.\n                      \n                      Respond with JSON in this format:\n                      {\n                        \"optimizedTitle\": \"your title\",\n                        \"optimizedMeta\": \"your meta description\", \n                        \"keywords\": [\"keyword1\", \"keyword2\", \"keyword3\"],\n                        \"seoScore\": 85\n                      }`;\n\n      // the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n      const response = await openai.chat.completions.create({\n        model: \"gpt-5\",\n        messages: [{ role: \"user\", content: prompt }],\n        response_format: { type: \"json_object\" },\n      });\n\n      const result = JSON.parse(response.choices[0].message.content || \"{}\");\n      res.json(result);\n    } catch (error: any) {\n      console.error(\"SEO optimization error:\", error);\n      res.status(500).json({ message: \"Failed to optimize SEO\" });\n    }\n  });\n\n  // Products CRUD\n  app.get(\"/api/products\", requireAuth, async (req, res) => {\n    try {\n      const products = await storage.getProducts(req.user!.id);\n      res.json(products);\n    } catch (error: any) {\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  app.post(\"/api/products\", requireAuth, async (req, res) => {\n    try {\n      // Validate the request body using the insertProductSchema\n      const validation = insertProductSchema.safeParse(req.body);\n      if (!validation.success) {\n        return res.status(400).json({ \n          message: \"Invalid product data\", \n          errors: validation.error.errors \n        });\n      }\n      \n      const productData = { ...validation.data, userId: req.user!.id };\n      const product = await storage.createProduct(productData);\n      res.json(product);\n    } catch (error: any) {\n      console.error(\"Create product error:\", error);\n      res.status(500).json({ message: \"Failed to create product\" });\n    }\n  });\n\n  app.get(\"/api/products/:id\", requireAuth, async (req, res) => {\n    try {\n      const product = await storage.getProduct(req.params.id);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      // Check if the product belongs to the authenticated user\n      if (product.userId !== req.user!.id) {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n      res.json(product);\n    } catch (error: any) {\n      console.error(\"Get product error:\", error);\n      res.status(500).json({ message: \"Failed to fetch product\" });\n    }\n  });\n\n  app.patch(\"/api/products/:id\", requireAuth, async (req, res) => {\n    try {\n      // Validate partial update data\n      const validation = insertProductSchema.partial().safeParse(req.body);\n      if (!validation.success) {\n        return res.status(400).json({ \n          message: \"Invalid product data\", \n          errors: validation.error.errors \n        });\n      }\n\n      // Check if the product exists and belongs to the user\n      const existingProduct = await storage.getProduct(req.params.id);\n      if (!existingProduct) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      if (existingProduct.userId !== req.user!.id) {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      const product = await storage.updateProduct(req.params.id, validation.data);\n      res.json(product);\n    } catch (error: any) {\n      console.error(\"Update product error:\", error);\n      res.status(500).json({ message: \"Failed to update product\" });\n    }\n  });\n\n  app.delete(\"/api/products/:id\", requireAuth, async (req, res) => {\n    try {\n      // Check if the product exists and belongs to the user\n      const existingProduct = await storage.getProduct(req.params.id);\n      if (!existingProduct) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      if (existingProduct.userId !== req.user!.id) {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      await storage.deleteProduct(req.params.id);\n      res.json({ message: \"Product deleted successfully\" });\n    } catch (error: any) {\n      console.error(\"Delete product error:\", error);\n      res.status(500).json({ message: \"Failed to delete product\" });\n    }\n  });\n\n  // Optimize all products endpoint\n  app.post(\"/api/products/optimize-all\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.user!.id;\n      \n      // Fetch all products for the user\n      const products = await storage.getProducts(userId);\n      \n      if (products.length === 0) {\n        return res.json({ \n          message: \"No products found to optimize\", \n          optimizedCount: 0 \n        });\n      }\n\n      // Helper function to capitalize names properly\n      const capitalizeName = (name: string): string => {\n        return name.split(' ')\n          .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n          .join(' ');\n      };\n\n      // Helper function to generate default descriptions\n      const generateDefaultDescription = (name: string, category: string): string => {\n        const categoryDescriptions: Record<string, string> = {\n          'Electronics': `Experience the latest in electronic innovation with ${name}. Designed for modern living with premium quality and reliable performance.`,\n          'Clothing': `Discover stylish comfort with ${name}. Premium quality materials and contemporary design for your wardrobe essentials.`,\n          'Home & Garden': `Transform your living space with ${name}. Quality craftsmanship meets functional design for your home.`,\n          'Books': `Immerse yourself in ${name}. A captivating read that combines engaging content with valuable insights.`,\n          'Health': `Enhance your wellness journey with ${name}. Quality ingredients and trusted formulation for your health goals.`,\n          'Sports': `Elevate your performance with ${name}. Professional-grade quality for athletes and fitness enthusiasts.`,\n          'Beauty': `Discover your natural radiance with ${name}. Premium formulation for effective and gentle care.`,\n          'Toys': `Spark imagination and fun with ${name}. Safe, durable, and designed for endless entertainment.`\n        };\n        \n        return categoryDescriptions[category] || `Discover the exceptional quality and value of ${name}. Carefully crafted to meet your needs with superior performance and reliability.`;\n      };\n\n      // Helper function to generate default tags\n      const generateDefaultTags = (category: string): string => {\n        const categoryTags: Record<string, string> = {\n          'Electronics': 'technology, innovation, gadgets, electronics, modern',\n          'Clothing': 'fashion, style, apparel, comfortable, trendy',\n          'Home & Garden': 'home improvement, decor, garden, lifestyle, quality',\n          'Books': 'reading, education, literature, knowledge, entertainment',\n          'Health': 'wellness, health, fitness, natural, supplements',\n          'Sports': 'fitness, sports, athletic, performance, training',\n          'Beauty': 'skincare, beauty, cosmetics, self-care, premium',\n          'Toys': 'kids, fun, educational, safe, entertainment'\n        };\n        \n        return categoryTags[category] || 'quality, premium, reliable, popular, recommended';\n      };\n\n      // Remove duplicates by name and category\n      const uniqueProducts = [];\n      const seen = new Set();\n      \n      for (const product of products) {\n        const key = `${product.name.toLowerCase()}-${product.category.toLowerCase()}`;\n        if (!seen.has(key)) {\n          seen.add(key);\n          uniqueProducts.push(product);\n        }\n      }\n\n      // Optimize each unique product\n      const optimizedProducts = uniqueProducts.map(product => {\n        const optimizedName = capitalizeName(product.name);\n        const optimizedDescription = product.description || generateDefaultDescription(product.name, product.category);\n        const optimizedTags = product.tags || generateDefaultTags(product.category);\n        \n        return {\n          id: product.id,\n          name: optimizedName,\n          description: optimizedDescription,\n          tags: optimizedTags,\n          isOptimized: true,\n          optimizedCopy: {\n            originalName: product.name,\n            originalDescription: product.description,\n            originalTags: product.tags,\n            optimizedAt: new Date().toISOString(),\n            optimizationType: 'database-only'\n          }\n        };\n      });\n\n      // Update all optimized products in database\n      const updatePromises = optimizedProducts.map(product => \n        storage.updateProduct(product.id, {\n          name: product.name,\n          description: product.description,\n          tags: product.tags,\n          isOptimized: product.isOptimized,\n          optimizedCopy: product.optimizedCopy\n        })\n      );\n\n      await Promise.all(updatePromises);\n\n      // Delete duplicate products (keep only the unique ones)\n      const duplicateCount = products.length - uniqueProducts.length;\n      if (duplicateCount > 0) {\n        const uniqueIds = new Set(uniqueProducts.map(p => p.id));\n        const duplicateIds = products\n          .filter(p => !uniqueIds.has(p.id))\n          .map(p => p.id);\n        \n        const deletePromises = duplicateIds.map(id => storage.deleteProduct(id));\n        await Promise.all(deletePromises);\n      }\n\n      res.json({\n        message: \"All products optimized successfully\",\n        optimizedCount: optimizedProducts.length,\n        duplicatesRemoved: duplicateCount,\n        details: {\n          namesCapitalized: optimizedProducts.filter(p => p.optimizedCopy.originalName !== p.name).length,\n          descriptionsGenerated: optimizedProducts.filter(p => !p.optimizedCopy.originalDescription).length,\n          tagsAdded: optimizedProducts.filter(p => !p.optimizedCopy.originalTags).length\n        }\n      });\n    } catch (error: any) {\n      console.error(\"Optimize products error:\", error);\n      res.status(500).json({ message: \"Failed to optimize products\" });\n    }\n  });\n\n  // Analytics\n  app.get(\"/api/analytics\", requireAuth, async (req, res) => {\n    try {\n      const { type } = req.query;\n      const analytics = await storage.getAnalytics(req.user!.id, type as string);\n      res.json(analytics);\n    } catch (error: any) {\n      res.status(500).json({ message: \"Failed to fetch analytics\" });\n    }\n  });\n\n  // Notification routes\n  app.get(\"/api/notifications\", requireAuth, async (req, res) => {\n    try {\n      const notifications = await storage.getNotifications(req.user!.id);\n      res.json(notifications);\n    } catch (error: any) {\n      console.error(\"Get notifications error:\", error);\n      res.status(500).json({ message: \"Failed to fetch notifications\" });\n    }\n  });\n\n  app.get(\"/api/notifications/unread-count\", requireAuth, async (req, res) => {\n    try {\n      const count = await storage.getUnreadNotificationCount(req.user!.id);\n      res.json({ count });\n    } catch (error: any) {\n      console.error(\"Get unread count error:\", error);\n      res.status(500).json({ message: \"Failed to fetch unread count\" });\n    }\n  });\n\n  app.post(\"/api/notifications\", requireAuth, async (req, res) => {\n    try {\n      const validation = insertNotificationSchema.safeParse(req.body);\n      if (!validation.success) {\n        return res.status(400).json({ \n          message: \"Invalid notification data\", \n          errors: validation.error.errors \n        });\n      }\n\n      const notificationData = { ...validation.data, userId: req.user!.id };\n      const notification = await storage.createNotification(notificationData);\n      res.json(notification);\n    } catch (error: any) {\n      console.error(\"Create notification error:\", error);\n      res.status(500).json({ message: \"Failed to create notification\" });\n    }\n  });\n\n  app.patch(\"/api/notifications/:id/read\", requireAuth, async (req, res) => {\n    try {\n      const notification = await storage.markNotificationAsRead(req.user!.id, req.params.id);\n      if (!notification) {\n        return res.status(404).json({ message: \"Notification not found\" });\n      }\n      res.json(notification);\n    } catch (error: any) {\n      console.error(\"Mark notification as read error:\", error);\n      res.status(500).json({ message: \"Failed to mark notification as read\" });\n    }\n  });\n\n  app.post(\"/api/notifications/mark-all-read\", requireAuth, async (req, res) => {\n    try {\n      await storage.markAllNotificationsAsRead(req.user!.id);\n      res.json({ message: \"All notifications marked as read\" });\n    } catch (error: any) {\n      console.error(\"Mark all notifications as read error:\", error);\n      res.status(500).json({ message: \"Failed to mark all notifications as read\" });\n    }\n  });\n\n  app.delete(\"/api/notifications/:id\", requireAuth, async (req, res) => {\n    try {\n      const deleted = await storage.deleteNotification(req.user!.id, req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Notification not found\" });\n      }\n      res.json({ message: \"Notification deleted successfully\" });\n    } catch (error: any) {\n      console.error(\"Delete notification error:\", error);\n      res.status(500).json({ message: \"Failed to delete notification\" });\n    }\n  });\n\n  app.post(\"/api/notifications/clear-all\", requireAuth, async (req, res) => {\n    try {\n      await storage.clearAllNotifications(req.user!.id);\n      res.json({ message: \"All notifications cleared successfully\" });\n    } catch (error: any) {\n      console.error(\"Clear all notifications error:\", error);\n      res.status(500).json({ message: \"Failed to clear all notifications\" });\n    }\n  });\n\n  // Stripe subscription routes\n  if (stripe) {\n    app.post(\"/api/create-subscription\", requireAuth, async (req, res) => {\n      try {\n        let user = req.user!;\n        \n        if (user.stripeSubscriptionId) {\n          const subscription = await stripe!.subscriptions.retrieve(user.stripeSubscriptionId);\n          return res.json({\n            subscriptionId: subscription.id,\n            clientSecret: (subscription.latest_invoice as any)?.payment_intent?.client_secret,\n          });\n        }\n\n        let customerId = user.stripeCustomerId;\n        if (!customerId) {\n          const customer = await stripe!.customers.create({\n            email: user.email,\n            name: user.fullName,\n          });\n          customerId = customer.id;\n          await storage.updateUserStripeInfo(user.id, customerId, \"\");\n        }\n\n        const subscription = await stripe!.subscriptions.create({\n          customer: customerId,\n          items: [{\n            price: process.env.STRIPE_PRICE_ID || \"price_1234\", // User needs to set this\n          }],\n          payment_behavior: 'default_incomplete',\n          expand: ['latest_invoice.payment_intent'],\n        });\n\n        await storage.updateUserStripeInfo(user.id, customerId, subscription.id);\n\n        res.json({\n          subscriptionId: subscription.id,\n          clientSecret: (subscription.latest_invoice as any)?.payment_intent?.client_secret,\n        });\n      } catch (error: any) {\n        console.error(\"Subscription error:\", error);\n        res.status(400).json({ error: { message: error.message } });\n      }\n    });\n  }\n\n  // NEW DATABASE HELPER ROUTES\n\n  // User profile routes\n  app.get(\"/api/profile\", requireAuth, async (req, res) => {\n    try {\n      const profile = await storage.getUser(req.user!.id);\n      if (!profile) {\n        return res.status(404).json({ message: \"Profile not found\" });\n      }\n      res.json(profile);\n    } catch (error: any) {\n      console.error(\"Get profile error:\", error);\n      res.status(500).json({ message: \"Failed to fetch profile\" });\n    }\n  });\n\n  app.put(\"/api/profile\", requireAuth, async (req, res) => {\n    try {\n      const { name, bio, profileImage, preferences } = req.body;\n      const updatedUser = await storage.updateUser(req.user!.id, {\n        fullName: name\n      });\n      res.json(updatedUser);\n    } catch (error: any) {\n      console.error(\"Update profile error:\", error);\n      res.status(500).json({ message: \"Failed to update profile\" });\n    }\n  });\n\n  // Subscription plans routes\n  app.get(\"/api/subscription-plans\", async (req, res) => {\n    try {\n      const plans = await getSubscriptionPlans();\n      res.json(plans);\n    } catch (error: any) {\n      console.error(\"Get subscription plans error:\", error);\n      res.status(500).json({ message: \"Failed to fetch subscription plans\" });\n    }\n  });\n\n  // Get current user subscription\n  app.get(\"/api/subscription/current\", requireAuth, async (req, res) => {\n    try {\n      const subscription = await storage.getUserSubscription(req.user!.id);\n      res.json(subscription || {});\n    } catch (error: any) {\n      console.error(\"Error fetching user subscription:\", error);\n      res.status(500).json({ \n        error: \"Failed to fetch subscription\",\n        message: error.message \n      });\n    }\n  });\n\n  // Get usage stats\n  app.get(\"/api/usage-stats\", requireAuth, async (req, res) => {\n    try {\n      const usageStats = await storage.getUserUsageStats(req.user!.id);\n      res.json(usageStats || {\n        productsCount: 0,\n        emailsSent: 0,\n        emailsRemaining: 0,\n        smsSent: 0,\n        smsRemaining: 0,\n        aiGenerationsUsed: 0,\n        seoOptimizationsUsed: 0\n      });\n    } catch (error: any) {\n      console.error(\"Error fetching usage stats:\", error);\n      res.status(500).json({ \n        error: \"Failed to fetch usage stats\",\n        message: error.message \n      });\n    }\n  });\n\n  // Get invoices\n  app.get(\"/api/invoices\", requireAuth, async (req, res) => {\n    try {\n      const invoices = await storage.getUserInvoices(req.user!.id);\n      res.json(invoices || []);\n    } catch (error: any) {\n      console.error(\"Error fetching invoices:\", error);\n      res.status(500).json({ \n        error: \"Failed to fetch invoices\",\n        message: error.message \n      });\n    }\n  });\n\n  // Get payment methods\n  app.get(\"/api/payment-methods\", requireAuth, async (req, res) => {\n    try {\n      const paymentMethods = await storage.getUserPaymentMethods(req.user!.id);\n      res.json(paymentMethods || []);\n    } catch (error: any) {\n      console.error(\"Error fetching payment methods:\", error);\n      res.status(500).json({ \n        error: \"Failed to fetch payment methods\",\n        message: error.message \n      });\n    }\n  });\n\n  // Add payment method\n  app.post(\"/api/payment-methods/add\", requireAuth, async (req, res) => {\n    try {\n      if (!stripe) {\n        return res.status(500).json({ error: \"Stripe not configured\" });\n      }\n\n      const user = req.user!;\n      let customerId = user.stripeCustomerId;\n\n      // Create Stripe customer if doesn't exist\n      if (!customerId) {\n        const customer = await stripe.customers.create({\n          email: user.email,\n          name: user.fullName,\n          metadata: { userId: user.id }\n        });\n        customerId = customer.id;\n        await storage.updateUserStripeInfo(user.id, customerId, \"\");\n      }\n\n      // Create setup session\n      const session = await stripe.checkout.sessions.create({\n        mode: 'setup',\n        customer: customerId,\n        success_url: `${req.protocol}://${req.get('host')}/billing?setup=success`,\n        cancel_url: `${req.protocol}://${req.get('host')}/billing?setup=cancel`,\n      });\n\n      res.json({ setupUrl: session.url });\n    } catch (error: any) {\n      console.error(\"Error adding payment method:\", error);\n      res.status(500).json({ \n        error: \"Failed to add payment method\",\n        message: error.message \n      });\n    }\n  });\n\n  app.post(\"/api/update-subscription\", requireAuth, async (req, res) => {\n    try {\n      const { planId } = req.body;\n      if (!planId) {\n        return res.status(400).json({ message: \"Plan ID is required\" });\n      }\n      \n      const user = await updateUserSubscription(req.user!.id, planId);\n      res.json({ message: \"Subscription updated successfully\", user });\n    } catch (error: any) {\n      console.error(\"Update subscription error:\", error);\n      res.status(500).json({ message: error.message || \"Failed to update subscription\" });\n    }\n  });\n\n  // Change subscription plan (alternative endpoint for billing page)\n  app.post(\"/api/subscription/change-plan\", requireAuth, async (req, res) => {\n    try {\n      const { planId } = req.body;\n      if (!planId) {\n        return res.status(400).json({ error: \"Plan ID is required\" });\n      }\n\n      const user = await updateUserSubscription(req.user!.id, planId);\n      res.json({ user });\n    } catch (error: any) {\n      console.error(\"Error changing subscription plan:\", error);\n      res.status(500).json({ \n        error: \"Failed to change subscription plan\",\n        message: error.message \n      });\n    }\n  });\n\n  // Session management routes (for admin/internal use only)\n  app.post(\"/api/sessions\", requireAuth, async (req, res) => {\n    try {\n      // Only allow admin users to create sessions\n      if (req.user!.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n      \n      const { sessionId, expiresAt } = req.body;\n      if (!sessionId || !expiresAt) {\n        return res.status(400).json({ message: \"Missing required session data\" });\n      }\n      \n      // Use authenticated user's ID instead of allowing arbitrary userId\n      const session = await saveSession({\n        sessionId,\n        userId: req.user!.id,\n        expiresAt: new Date(expiresAt)\n      });\n      res.json(session);\n    } catch (error: any) {\n      console.error(\"Save session error:\", error);\n      res.status(500).json({ message: \"Failed to save session\" });\n    }\n  });\n\n  app.get(\"/api/sessions/:sessionId\", async (req, res) => {\n    try {\n      const { sessionId } = req.params;\n      const session = await getSession(sessionId);\n      if (!session) {\n        return res.status(404).json({ message: \"Session not found or expired\" });\n      }\n      res.json(session);\n    } catch (error: any) {\n      console.error(\"Get session error:\", error);\n      res.status(500).json({ message: \"Failed to fetch session\" });\n    }\n  });\n\n  app.delete(\"/api/sessions/:sessionId\", async (req, res) => {\n    try {\n      const { sessionId } = req.params;\n      await deleteSession(sessionId);\n      res.json({ message: \"Session deleted successfully\" });\n    } catch (error: any) {\n      console.error(\"Delete session error:\", error);\n      res.status(500).json({ message: \"Failed to delete session\" });\n    }\n  });\n\n  // Database admin routes (you may want to protect these more strictly)\n  app.get(\"/api/admin/db-test\", requireAuth, async (req, res) => {\n    try {\n      const isConnected = await testDatabaseConnection();\n      res.json({ \n        connected: isConnected,\n        message: isConnected ? \"Database connection successful\" : \"Database connection failed\"\n      });\n    } catch (error: any) {\n      console.error(\"Database test error:\", error);\n      res.status(500).json({ message: \"Database test failed\" });\n    }\n  });\n\n  app.post(\"/api/admin/seed-plans\", requireAuth, async (req, res) => {\n    try {\n      // Only allow admin users to seed (you may want to add role checking)\n      if (req.user!.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n      \n      await seedSubscriptionPlans();\n      res.json({ message: \"Subscription plans seeded successfully\" });\n    } catch (error: any) {\n      console.error(\"Seed plans error:\", error);\n      res.status(500).json({ message: \"Failed to seed subscription plans\" });\n    }\n  });\n\n  // Enhanced user registration route using new database helper\n  app.post(\"/api/register-v2\", async (req, res) => {\n    try {\n      const validatedData = insertUserSchema.parse(req.body);\n      \n      // Check if user already exists using new helper\n      const existingUser = await storage.getUserByEmail(validatedData.email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User already exists\" });\n      }\n\n      // Create user using new helper (automatically creates profile)\n      const user = await storage.createUser(validatedData);\n      \n      // Log the user in\n      req.login(user, (err) => {\n        if (err) {\n          console.error(\"Login error:\", err);\n          return res.status(500).json({ message: \"Login failed\" });\n        }\n        res.status(201).json({ \n          message: \"User created successfully\", \n          user: {\n            id: user.id,\n            email: user.email,\n            fullName: user.fullName,\n            plan: user.plan\n          }\n        });\n      });\n    } catch (error: any) {\n      console.error(\"Registration error:\", error);\n      if (error.message?.includes('Database operation failed')) {\n        res.status(500).json({ message: error.message });\n      } else {\n        res.status(400).json({ message: \"Registration failed\" });\n      }\n    }\n  });\n\n  // REAL-TIME DASHBOARD API ENDPOINTS\n\n  // Get comprehensive dashboard data\n  app.get(\"/api/dashboard\", requireAuth, async (req, res) => {\n    try {\n      const dashboardData = await storage.getDashboardData(req.user!.id);\n      res.json(dashboardData);\n    } catch (error: any) {\n      console.error(\"[API] Dashboard data fetch error:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard data\" });\n    }\n  });\n\n  // Initialize user real-time data (called on first login)\n  app.post(\"/api/dashboard/initialize\", requireAuth, async (req, res) => {\n    try {\n      await storage.initializeUserRealtimeData(req.user!.id);\n      await storage.generateSampleMetrics(req.user!.id);\n      res.json({ message: \"Real-time data initialized successfully\" });\n    } catch (error: any) {\n      console.error(\"[API] Dashboard initialization error:\", error);\n      res.status(500).json({ message: \"Failed to initialize dashboard data\" });\n    }\n  });\n\n  // Track tool access (called when user clicks on tool buttons)\n  app.post(\"/api/dashboard/track-tool-access\", requireAuth, async (req, res) => {\n    try {\n      const { toolName } = req.body;\n      if (!toolName) {\n        return res.status(400).json({ message: \"Tool name is required\" });\n      }\n      \n      const toolAccess = await storage.trackToolAccess(req.user!.id, toolName);\n      \n      // Log activity\n      await storage.createActivityLog(req.user!.id, {\n        action: \"tool_accessed\",\n        description: `Opened ${toolName.replace('-', ' ')} tool`,\n        toolUsed: toolName,\n        metadata: { timestamp: new Date().toISOString() }\n      });\n\n      res.json({ success: true, toolAccess });\n    } catch (error: any) {\n      console.error(\"[API] Tool access tracking error:\", error);\n      res.status(500).json({ message: \"Failed to track tool access\" });\n    }\n  });\n\n  // Log user activity\n  app.post(\"/api/dashboard/log-activity\", requireAuth, async (req, res) => {\n    try {\n      const { action, description, toolUsed, metadata } = req.body;\n      if (!action || !description) {\n        return res.status(400).json({ message: \"Action and description are required\" });\n      }\n\n      const activityLog = await storage.createActivityLog(req.user!.id, {\n        action,\n        description,\n        toolUsed,\n        metadata\n      });\n\n      res.json({ success: true, activityLog });\n    } catch (error: any) {\n      console.error(\"[API] Activity logging error:\", error);\n      res.status(500).json({ message: \"Failed to log activity\" });\n    }\n  });\n\n  // Update usage stats (called when user performs actions)\n  app.post(\"/api/dashboard/update-usage\", requireAuth, async (req, res) => {\n    try {\n      const { statField, increment = 1 } = req.body;\n      if (!statField) {\n        return res.status(400).json({ message: \"Stat field is required\" });\n      }\n\n      await storage.updateUsageStats(req.user!.id, statField, increment);\n      res.json({ success: true, message: `Updated ${statField} by ${increment}` });\n    } catch (error: any) {\n      console.error(\"[API] Usage stats update error:\", error);\n      res.status(500).json({ message: \"Failed to update usage stats\" });\n    }\n  });\n\n  // Generate new sample metrics (for demo purposes)\n  app.post(\"/api/dashboard/refresh-metrics\", requireAuth, async (req, res) => {\n    try {\n      await storage.generateSampleMetrics(req.user!.id);\n      const dashboardData = await storage.getDashboardData(req.user!.id);\n      res.json({ success: true, dashboardData });\n    } catch (error: any) {\n      console.error(\"[API] Metrics refresh error:\", error);\n      res.status(500).json({ message: \"Failed to refresh metrics\" });\n    }\n  });\n\n  // Get real-time usage stats only\n  app.get(\"/api/dashboard/usage-stats\", requireAuth, async (req, res) => {\n    try {\n      const dashboardData = await storage.getDashboardData(req.user!.id);\n      res.json(dashboardData.usageStats);\n    } catch (error: any) {\n      console.error(\"[API] Usage stats fetch error:\", error);\n      res.status(500).json({ message: \"Failed to fetch usage stats\" });\n    }\n  });\n\n  // Profile management routes\n  app.put('/api/profile', requireAuth, async (req, res) => {\n    try {\n      const userId = req.session?.userId;\n      if (!userId) {\n        return res.status(401).json({ error: 'Authentication required' });\n      }\n\n      const { fullName, email } = req.body;\n      if (!fullName || !email) {\n        return res.status(400).json({ error: 'Full name and email are required' });\n      }\n\n      const updatedUser = await storage.updateUserProfile(userId, fullName, email);\n      res.json(updatedUser);\n    } catch (error) {\n      console.error('Update profile error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.put('/api/change-password', requireAuth, async (req, res) => {\n    try {\n      const userId = req.session?.userId;\n      if (!userId) {\n        return res.status(401).json({ error: 'Authentication required' });\n      }\n\n      const { currentPassword, newPassword } = req.body;\n      if (!currentPassword || !newPassword) {\n        return res.status(400).json({ error: 'Current password and new password are required' });\n      }\n\n      await storage.changeUserPassword(userId, currentPassword, newPassword);\n      res.json({ success: true });\n    } catch (error) {\n      console.error('Change password error:', error);\n      if (error.message === 'Current password is incorrect') {\n        return res.status(400).json({ error: 'Current password is incorrect' });\n      }\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.put('/api/language', requireAuth, async (req, res) => {\n    try {\n      const userId = req.session?.userId;\n      if (!userId) {\n        return res.status(401).json({ error: 'Authentication required' });\n      }\n\n      const { preferredLanguage } = req.body;\n      if (!preferredLanguage) {\n        return res.status(400).json({ error: 'Preferred language is required' });\n      }\n\n      const updatedUser = await storage.updateUserLanguage(userId, preferredLanguage);\n      res.json(updatedUser);\n    } catch (error) {\n      console.error('Update language error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.post('/api/upload-profile-image', requireAuth, async (req, res) => {\n    try {\n      const userId = req.session?.userId;\n      if (!userId) {\n        return res.status(401).json({ error: 'Authentication required' });\n      }\n\n      // For now, return a placeholder URL since we need to implement proper file upload\n      // This would be where you handle the actual file upload to object storage\n      const imageUrl = '/placeholder-avatar.png';\n      const updatedUser = await storage.updateUserImage(userId, imageUrl);\n      res.json(updatedUser);\n    } catch (error) {\n      console.error('Upload image error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // Store connections routes\n  app.get('/api/store-connections', requireAuth, async (req, res) => {\n    try {\n      const userId = req.session?.userId;\n      if (!userId) {\n        return res.status(401).json({ error: 'Authentication required' });\n      }\n\n      const connections = await storage.getStoreConnections(userId);\n      res.json(connections);\n    } catch (error) {\n      console.error('Get store connections error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.post('/api/store-connections', requireAuth, async (req, res) => {\n    try {\n      const userId = req.session?.userId;\n      if (!userId) {\n        return res.status(401).json({ error: 'Authentication required' });\n      }\n\n      const { platform, storeName, storeUrl, accessToken } = req.body;\n      if (!platform || !storeName || !storeUrl || !accessToken) {\n        return res.status(400).json({ error: 'All store connection fields are required' });\n      }\n\n      const connection = await storage.createStoreConnection({\n        userId,\n        platform,\n        storeName,\n        storeUrl,\n        accessToken,\n        status: 'active'\n      });\n      res.json(connection);\n    } catch (error) {\n      console.error('Create store connection error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.delete('/api/store-connections/:id', requireAuth, async (req, res) => {\n    try {\n      const userId = req.session?.userId;\n      if (!userId) {\n        return res.status(401).json({ error: 'Authentication required' });\n      }\n\n      const { id } = req.params;\n      await storage.deleteStoreConnection(id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error('Delete store connection error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":42077},"server/storage.ts":{"content":"import { drizzle } from \"drizzle-orm/neon-http\";\nimport { neon } from \"@neondatabase/serverless\";\nimport { eq, desc, and } from \"drizzle-orm\";\nimport { \n  type User, \n  type InsertUser, \n  type Product, \n  type InsertProduct,\n  type SeoMeta,\n  type InsertSeoMeta,\n  type Campaign,\n  type InsertCampaign,\n  type Analytics,\n  type InsertAnalytics,\n  type Notification,\n  type InsertNotification,\n  type StoreConnection,\n  type InsertStoreConnection,\n  users, \n  products, \n  seoMeta, \n  campaigns, \n  analytics,\n  notifications,\n  storeConnections\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport bcrypt from \"bcrypt\";\n\nlet db: any;\n\nif (process.env.DATABASE_URL) {\n  const sql = neon(process.env.DATABASE_URL);\n  db = drizzle(sql);\n}\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(userId: string, updates: Partial<User>): Promise<User>;\n  updateUserStripeInfo(userId: string, customerId: string, subscriptionId: string): Promise<User>;\n  updateUserProfile(userId: string, fullName: string, email: string): Promise<User>;\n  updateUserImage(userId: string, imageUrl: string): Promise<User>;\n  changeUserPassword(userId: string, currentPassword: string, newPassword: string): Promise<User>;\n  updateUserLanguage(userId: string, language: string): Promise<User>;\n\n  // Store connections methods\n  getStoreConnections(userId: string): Promise<StoreConnection[]>;\n  createStoreConnection(storeConnection: InsertStoreConnection): Promise<StoreConnection>;\n  updateStoreConnection(id: string, updates: Partial<StoreConnection>): Promise<StoreConnection>;\n  deleteStoreConnection(id: string): Promise<void>;\n\n  // Product methods\n  getProducts(userId: string): Promise<Product[]>;\n  getProduct(id: string): Promise<Product | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, updates: Partial<Product>): Promise<Product>;\n  deleteProduct(id: string): Promise<void>;\n\n  // SEO methods\n  getSeoMeta(productId: string): Promise<SeoMeta | undefined>;\n  createSeoMeta(seoMeta: InsertSeoMeta): Promise<SeoMeta>;\n  updateSeoMeta(productId: string, updates: Partial<SeoMeta>): Promise<SeoMeta>;\n\n  // Campaign methods\n  getCampaigns(userId: string): Promise<Campaign[]>;\n  createCampaign(campaign: InsertCampaign): Promise<Campaign>;\n  updateCampaign(id: string, updates: Partial<Campaign>): Promise<Campaign>;\n\n  // Analytics methods\n  getAnalytics(userId: string, metricType?: string): Promise<Analytics[]>;\n  createAnalytic(analytic: InsertAnalytics): Promise<Analytics>;\n\n  // Notification methods\n  getNotifications(userId: string): Promise<Notification[]>;\n  getUnreadNotificationCount(userId: string): Promise<number>;\n  createNotification(notification: InsertNotification): Promise<Notification>;\n  markNotificationAsRead(userId: string, notificationId: string): Promise<Notification | null>;\n  markAllNotificationsAsRead(userId: string): Promise<void>;\n  deleteNotification(userId: string, notificationId: string): Promise<boolean>;\n  clearAllNotifications(userId: string): Promise<void>;\n\n  // Real-time Dashboard methods\n  getDashboardData(userId: string): Promise<{\n    user: User | undefined;\n    profile: any;\n    usageStats: any;\n    activityLogs: any[];\n    toolsAccess: any[];\n    realtimeMetrics: any[];\n  }>;\n  initializeUserRealtimeData(userId: string): Promise<void>;\n  trackToolAccess(userId: string, toolName: string): Promise<any>;\n  createActivityLog(userId: string, logData: any): Promise<any>;\n  updateUsageStats(userId: string, statField: string, increment: number): Promise<void>;\n  generateSampleMetrics(userId: string): Promise<void>;\n\n  // Billing methods\n  getUserSubscription(userId: string): Promise<any>;\n  getUserUsageStats(userId: string): Promise<any>;\n  getUserInvoices(userId: string): Promise<any[]>;\n  getUserPaymentMethods(userId: string): Promise<any[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    if (!db) throw new Error(\"Database not configured\");\n    const result = await db.select().from(users).where(eq(users.id, id));\n    return result[0];\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    if (!db) throw new Error(\"Database not configured\");\n    const result = await db.select().from(users).where(eq(users.email, email));\n    return result[0];\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    if (!db) throw new Error(\"Database not configured\");\n    const hashedPassword = await bcrypt.hash(insertUser.password, 10);\n    const result = await db.insert(users).values({\n      ...insertUser,\n      password: hashedPassword,\n    }).returning();\n    return result[0];\n  }\n\n  async updateUserStripeInfo(userId: string, customerId: string, subscriptionId: string): Promise<User> {\n    if (!db) throw new Error(\"Database not configured\");\n    const result = await db.update(users)\n      .set({ \n        stripeCustomerId: customerId,\n        stripeSubscriptionId: subscriptionId \n      })\n      .where(eq(users.id, userId))\n      .returning();\n    return result[0];\n  }\n\n  async updateUser(userId: string, updates: Partial<User>): Promise<User> {\n    if (!db) throw new Error(\"Database not configured\");\n    const result = await db.update(users)\n      .set(updates)\n      .where(eq(users.id, userId))\n      .returning();\n    return result[0];\n  }\n\n  async updateUserProfile(userId: string, fullName: string, email: string): Promise<User> {\n    if (!db) throw new Error(\"Database not configured\");\n    const result = await db.update(users)\n      .set({ fullName, email })\n      .where(eq(users.id, userId))\n      .returning();\n    return result[0];\n  }\n\n  async updateUserImage(userId: string, imageUrl: string): Promise<User> {\n    if (!db) throw new Error(\"Database not configured\");\n    const result = await db.update(users)\n      .set({ imageUrl })\n      .where(eq(users.id, userId))\n      .returning();\n    return result[0];\n  }\n\n  async changeUserPassword(userId: string, currentPassword: string, newPassword: string): Promise<User> {\n    if (!db) throw new Error(\"Database not configured\");\n    \n    // First, get the user to verify current password\n    const user = await this.getUser(userId);\n    if (!user) {\n      throw new Error(\"User not found\");\n    }\n\n    // Verify current password\n    const isValidPassword = await bcrypt.compare(currentPassword, user.password);\n    if (!isValidPassword) {\n      throw new Error(\"Current password is incorrect\");\n    }\n\n    // Hash new password and update\n    const hashedNewPassword = await bcrypt.hash(newPassword, 10);\n    const result = await db.update(users)\n      .set({ password: hashedNewPassword })\n      .where(eq(users.id, userId))\n      .returning();\n    return result[0];\n  }\n\n  async updateUserLanguage(userId: string, language: string): Promise<User> {\n    if (!db) throw new Error(\"Database not configured\");\n    const result = await db.update(users)\n      .set({ preferredLanguage: language })\n      .where(eq(users.id, userId))\n      .returning();\n    return result[0];\n  }\n\n  async getStoreConnections(userId: string): Promise<StoreConnection[]> {\n    if (!db) throw new Error(\"Database not configured\");\n    return await db.select().from(storeConnections)\n      .where(eq(storeConnections.userId, userId))\n      .orderBy(desc(storeConnections.createdAt));\n  }\n\n  async createStoreConnection(storeConnection: InsertStoreConnection): Promise<StoreConnection> {\n    if (!db) throw new Error(\"Database not configured\");\n    const result = await db.insert(storeConnections).values(storeConnection).returning();\n    return result[0];\n  }\n\n  async updateStoreConnection(id: string, updates: Partial<StoreConnection>): Promise<StoreConnection> {\n    if (!db) throw new Error(\"Database not configured\");\n    const result = await db.update(storeConnections)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(storeConnections.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteStoreConnection(id: string): Promise<void> {\n    if (!db) throw new Error(\"Database not configured\");\n    await db.delete(storeConnections).where(eq(storeConnections.id, id));\n  }\n\n  async getProducts(userId: string): Promise<Product[]> {\n    if (!db) throw new Error(\"Database not configured\");\n    return await db.select().from(products)\n      .where(eq(products.userId, userId))\n      .orderBy(desc(products.updatedAt));\n  }\n\n  async getProduct(id: string): Promise<Product | undefined> {\n    if (!db) throw new Error(\"Database not configured\");\n    const result = await db.select().from(products).where(eq(products.id, id));\n    return result[0];\n  }\n\n  async createProduct(product: InsertProduct): Promise<Product> {\n    if (!db) throw new Error(\"Database not configured\");\n    const result = await db.insert(products).values(product).returning();\n    return result[0];\n  }\n\n  async updateProduct(id: string, updates: Partial<Product>): Promise<Product> {\n    if (!db) throw new Error(\"Database not configured\");\n    const result = await db.update(products)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(products.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteProduct(id: string): Promise<void> {\n    if (!db) throw new Error(\"Database not configured\");\n    await db.delete(products).where(eq(products.id, id));\n  }\n\n  async getSeoMeta(productId: string): Promise<SeoMeta | undefined> {\n    if (!db) throw new Error(\"Database not configured\");\n    const result = await db.select().from(seoMeta).where(eq(seoMeta.productId, productId));\n    return result[0];\n  }\n\n  async createSeoMeta(seoMetaData: InsertSeoMeta): Promise<SeoMeta> {\n    if (!db) throw new Error(\"Database not configured\");\n    const result = await db.insert(seoMeta).values(seoMetaData).returning();\n    return result[0];\n  }\n\n  async updateSeoMeta(productId: string, updates: Partial<SeoMeta>): Promise<SeoMeta> {\n    if (!db) throw new Error(\"Database not configured\");\n    const result = await db.update(seoMeta)\n      .set(updates)\n      .where(eq(seoMeta.productId, productId))\n      .returning();\n    return result[0];\n  }\n\n  async getCampaigns(userId: string): Promise<Campaign[]> {\n    if (!db) throw new Error(\"Database not configured\");\n    return await db.select().from(campaigns)\n      .where(eq(campaigns.userId, userId))\n      .orderBy(desc(campaigns.createdAt));\n  }\n\n  async createCampaign(campaign: InsertCampaign): Promise<Campaign> {\n    if (!db) throw new Error(\"Database not configured\");\n    const result = await db.insert(campaigns).values(campaign).returning();\n    return result[0];\n  }\n\n  async updateCampaign(id: string, updates: Partial<Campaign>): Promise<Campaign> {\n    if (!db) throw new Error(\"Database not configured\");\n    const result = await db.update(campaigns)\n      .set(updates)\n      .where(eq(campaigns.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async getAnalytics(userId: string, metricType?: string): Promise<Analytics[]> {\n    if (!db) throw new Error(\"Database not configured\");\n    const conditions = [eq(analytics.userId, userId)];\n    if (metricType) {\n      conditions.push(eq(analytics.metricType, metricType));\n    }\n    return await db.select().from(analytics)\n      .where(and(...conditions))\n      .orderBy(desc(analytics.date));\n  }\n\n  async createAnalytic(analytic: InsertAnalytics): Promise<Analytics> {\n    if (!db) throw new Error(\"Database not configured\");\n    const result = await db.insert(analytics).values(analytic).returning();\n    return result[0];\n  }\n\n  async updateUser(userId: string, updates: Partial<User>): Promise<User> {\n    throw new Error(\"User updates not available in DatabaseStorage - use MemStorage\");\n  }\n\n  // Dashboard methods - stub implementations since we're using MemStorage for dashboard\n  async getDashboardData(userId: string): Promise<any> {\n    throw new Error(\"Dashboard data not available in DatabaseStorage - use MemStorage\");\n  }\n\n  async initializeUserRealtimeData(userId: string): Promise<void> {\n    throw new Error(\"Dashboard data not available in DatabaseStorage - use MemStorage\");\n  }\n\n  async trackToolAccess(userId: string, toolName: string): Promise<any> {\n    throw new Error(\"Dashboard data not available in DatabaseStorage - use MemStorage\");\n  }\n\n  async createActivityLog(userId: string, logData: any): Promise<any> {\n    throw new Error(\"Dashboard data not available in DatabaseStorage - use MemStorage\");\n  }\n\n  async updateUsageStats(userId: string, statField: string, increment: number): Promise<void> {\n    throw new Error(\"Dashboard data not available in DatabaseStorage - use MemStorage\");\n  }\n\n  async generateSampleMetrics(userId: string): Promise<void> {\n    throw new Error(\"Dashboard data not available in DatabaseStorage - use MemStorage\");\n  }\n\n  // Notification methods - stub implementations since we're using MemStorage\n  async getNotifications(userId: string): Promise<Notification[]> {\n    throw new Error(\"Notification data not available in DatabaseStorage - use MemStorage\");\n  }\n\n  async getUnreadNotificationCount(userId: string): Promise<number> {\n    throw new Error(\"Notification data not available in DatabaseStorage - use MemStorage\");\n  }\n\n  async createNotification(notification: InsertNotification): Promise<Notification> {\n    throw new Error(\"Notification data not available in DatabaseStorage - use MemStorage\");\n  }\n\n  async markNotificationAsRead(userId: string, notificationId: string): Promise<Notification | null> {\n    throw new Error(\"Notification data not available in DatabaseStorage - use MemStorage\");\n  }\n\n  async markAllNotificationsAsRead(userId: string): Promise<void> {\n    throw new Error(\"Notification data not available in DatabaseStorage - use MemStorage\");\n  }\n\n  async deleteNotification(userId: string, notificationId: string): Promise<boolean> {\n    throw new Error(\"Notification data not available in DatabaseStorage - use MemStorage\");\n  }\n\n  async clearAllNotifications(userId: string): Promise<void> {\n    throw new Error(\"Notification data not available in DatabaseStorage - use MemStorage\");\n  }\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User> = new Map();\n  private products: Map<string, Product> = new Map();\n  private seoMetas: Map<string, SeoMeta> = new Map();\n  private campaigns: Map<string, Campaign> = new Map();\n  private analyticsData: Map<string, Analytics> = new Map();\n  private notificationsData: Map<string, Notification> = new Map();\n  \n  // Real-time dashboard data storage\n  private usageStats: Map<string, any> = new Map();\n  private activityLogs: Map<string, any[]> = new Map();\n  private toolsAccess: Map<string, any[]> = new Map();\n  private realtimeMetrics: Map<string, any[]> = new Map();\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const hashedPassword = await bcrypt.hash(insertUser.password, 10);\n    const user: User = {\n      id,\n      ...insertUser,\n      password: hashedPassword,\n      role: \"user\",\n      plan: \"trial\",\n      trialEndDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),\n      stripeCustomerId: null,\n      stripeSubscriptionId: null,\n      imageUrl: null,\n      preferredLanguage: \"en\",\n      createdAt: new Date(),\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(userId: string, updates: Partial<User>): Promise<User> {\n    const user = this.users.get(userId);\n    if (!user) throw new Error(\"User not found\");\n    const updatedUser = { ...user, ...updates };\n    this.users.set(userId, updatedUser);\n    return updatedUser;\n  }\n\n  async updateUserStripeInfo(userId: string, customerId: string, subscriptionId: string): Promise<User> {\n    const user = this.users.get(userId);\n    if (!user) throw new Error(\"User not found\");\n    const updatedUser = { ...user, stripeCustomerId: customerId, stripeSubscriptionId: subscriptionId };\n    this.users.set(userId, updatedUser);\n    return updatedUser;\n  }\n\n  async updateUserProfile(userId: string, fullName: string, email: string): Promise<User> {\n    const user = this.users.get(userId);\n    if (!user) throw new Error(\"User not found\");\n    const updatedUser = { ...user, fullName, email };\n    this.users.set(userId, updatedUser);\n    return updatedUser;\n  }\n\n  async updateUserImage(userId: string, imageUrl: string): Promise<User> {\n    const user = this.users.get(userId);\n    if (!user) throw new Error(\"User not found\");\n    const updatedUser = { ...user, imageUrl };\n    this.users.set(userId, updatedUser);\n    return updatedUser;\n  }\n\n  async changeUserPassword(userId: string, currentPassword: string, newPassword: string): Promise<User> {\n    const user = this.users.get(userId);\n    if (!user) throw new Error(\"User not found\");\n\n    // Verify current password\n    const isValidPassword = await bcrypt.compare(currentPassword, user.password);\n    if (!isValidPassword) {\n      throw new Error('Current password is incorrect');\n    }\n\n    // Hash new password and update\n    const hashedNewPassword = await bcrypt.hash(newPassword, 10);\n    const updatedUser = { ...user, password: hashedNewPassword };\n    this.users.set(userId, updatedUser);\n    return updatedUser;\n  }\n\n  async updateUserLanguage(userId: string, language: string): Promise<User> {\n    const user = this.users.get(userId);\n    if (!user) throw new Error(\"User not found\");\n    const updatedUser = { ...user, preferredLanguage: language };\n    this.users.set(userId, updatedUser);\n    return updatedUser;\n  }\n\n  private storeConnections: Map<string, StoreConnection> = new Map();\n\n  async getStoreConnections(userId: string): Promise<StoreConnection[]> {\n    return Array.from(this.storeConnections.values()).filter(conn => conn.userId === userId);\n  }\n\n  async createStoreConnection(storeConnection: InsertStoreConnection): Promise<StoreConnection> {\n    const id = randomUUID();\n    const newConnection: StoreConnection = {\n      id,\n      ...storeConnection,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.storeConnections.set(id, newConnection);\n    return newConnection;\n  }\n\n  async updateStoreConnection(id: string, updates: Partial<StoreConnection>): Promise<StoreConnection> {\n    const connection = this.storeConnections.get(id);\n    if (!connection) throw new Error(\"Store connection not found\");\n    const updatedConnection = { ...connection, ...updates, updatedAt: new Date() };\n    this.storeConnections.set(id, updatedConnection);\n    return updatedConnection;\n  }\n\n  async deleteStoreConnection(id: string): Promise<void> {\n    this.storeConnections.delete(id);\n  }\n\n  async getProducts(userId: string): Promise<Product[]> {\n    return Array.from(this.products.values())\n      .filter(product => product.userId === userId)\n      .sort((a, b) => (b.updatedAt?.getTime() || 0) - (a.updatedAt?.getTime() || 0));\n  }\n\n  async getProduct(id: string): Promise<Product | undefined> {\n    return this.products.get(id);\n  }\n\n  async createProduct(product: InsertProduct & { userId: string }): Promise<Product> {\n    const id = randomUUID();\n    const newProduct: Product = {\n      id,\n      ...product,\n      description: product.description || null,\n      originalDescription: product.originalDescription || null,\n      category: product.category, // Required field, no fallback to null\n      price: product.price, // Required field from new schema\n      stock: product.stock || 0, // Default to 0 if not provided\n      image: product.image || null, // Optional field\n      features: product.features || null,\n      tags: product.tags || null,\n      optimizedCopy: product.optimizedCopy || null,\n      shopifyId: product.shopifyId || null,\n      isOptimized: false,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.products.set(id, newProduct);\n    return newProduct;\n  }\n\n  async updateProduct(id: string, updates: Partial<Product>): Promise<Product> {\n    const product = this.products.get(id);\n    if (!product) throw new Error(\"Product not found\");\n    const updatedProduct = { ...product, ...updates, updatedAt: new Date() };\n    this.products.set(id, updatedProduct);\n    return updatedProduct;\n  }\n\n  async deleteProduct(id: string): Promise<void> {\n    this.products.delete(id);\n  }\n\n  async getSeoMeta(productId: string): Promise<SeoMeta | undefined> {\n    return Array.from(this.seoMetas.values()).find(seo => seo.productId === productId);\n  }\n\n  async createSeoMeta(seoMetaData: InsertSeoMeta): Promise<SeoMeta> {\n    const id = randomUUID();\n    const seo: SeoMeta = {\n      id,\n      ...seoMetaData,\n      seoTitle: seoMetaData.seoTitle || null,\n      metaDescription: seoMetaData.metaDescription || null,\n      keywords: seoMetaData.keywords || null,\n      optimizedTitle: seoMetaData.optimizedTitle || null,\n      optimizedMeta: seoMetaData.optimizedMeta || null,\n      seoScore: seoMetaData.seoScore || null,\n      createdAt: new Date(),\n    };\n    this.seoMetas.set(id, seo);\n    return seo;\n  }\n\n  async updateSeoMeta(productId: string, updates: Partial<SeoMeta>): Promise<SeoMeta> {\n    const existing = await this.getSeoMeta(productId);\n    if (!existing) throw new Error(\"SEO meta not found\");\n    const updated = { ...existing, ...updates };\n    this.seoMetas.set(existing.id, updated);\n    return updated;\n  }\n\n  async getCampaigns(userId: string): Promise<Campaign[]> {\n    return Array.from(this.campaigns.values())\n      .filter(campaign => campaign.userId === userId)\n      .sort((a, b) => (b.createdAt?.getTime() || 0) - (a.createdAt?.getTime() || 0));\n  }\n\n  async createCampaign(campaign: InsertCampaign): Promise<Campaign> {\n    const id = randomUUID();\n    const newCampaign: Campaign = {\n      id,\n      ...campaign,\n      subject: campaign.subject || null,\n      status: \"draft\",\n      sentCount: 0,\n      openRate: 0,\n      clickRate: 0,\n      conversionRate: 0,\n      createdAt: new Date(),\n    };\n    this.campaigns.set(id, newCampaign);\n    return newCampaign;\n  }\n\n  async updateCampaign(id: string, updates: Partial<Campaign>): Promise<Campaign> {\n    const campaign = this.campaigns.get(id);\n    if (!campaign) throw new Error(\"Campaign not found\");\n    const updated = { ...campaign, ...updates };\n    this.campaigns.set(id, updated);\n    return updated;\n  }\n\n  async getAnalytics(userId: string, metricType?: string): Promise<Analytics[]> {\n    return Array.from(this.analyticsData.values())\n      .filter(analytic => \n        analytic.userId === userId && \n        (!metricType || analytic.metricType === metricType)\n      )\n      .sort((a, b) => (b.date?.getTime() || 0) - (a.date?.getTime() || 0));\n  }\n\n  async createAnalytic(analytic: InsertAnalytics): Promise<Analytics> {\n    const id = randomUUID();\n    const newAnalytic: Analytics = {\n      id,\n      ...analytic,\n      date: analytic.date || new Date(),\n      metadata: analytic.metadata || null,\n    };\n    this.analyticsData.set(id, newAnalytic);\n    return newAnalytic;\n  }\n\n  // Real-time Dashboard methods implementation\n  async getDashboardData(userId: string): Promise<{\n    user: User | undefined;\n    profile: any;\n    usageStats: any;\n    activityLogs: any[];\n    toolsAccess: any[];\n    realtimeMetrics: any[];\n  }> {\n    const user = await this.getUser(userId);\n    const usageStats = this.usageStats.get(userId) || null;\n    const activityLogs = this.activityLogs.get(userId) || [];\n    const toolsAccess = this.toolsAccess.get(userId) || [];\n    const realtimeMetrics = this.realtimeMetrics.get(userId) || [];\n    \n    return {\n      user,\n      profile: user ? { \n        userId: user.id, \n        name: user.fullName, \n        email: user.email,\n        plan: user.plan \n      } : null,\n      usageStats,\n      activityLogs: activityLogs.slice(0, 10), // Latest 10 activities\n      toolsAccess,\n      realtimeMetrics,\n    };\n  }\n\n  async initializeUserRealtimeData(userId: string): Promise<void> {\n    // Initialize usage stats with realistic sample data\n    if (!this.usageStats.has(userId)) {\n      this.usageStats.set(userId, {\n        userId,\n        totalRevenue: Math.floor(Math.random() * 50000) + 15000, // $150-$650\n        totalOrders: Math.floor(Math.random() * 500) + 200, // 200-700 orders\n        conversionRate: Math.floor(Math.random() * 300) + 250, // 2.5-5.5% conversion\n        cartRecoveryRate: Math.floor(Math.random() * 2000) + 6000, // 60-80% recovery\n        productsOptimized: 0,\n        emailsSent: 0,\n        smsSent: 0,\n        aiGenerationsUsed: 0,\n        seoOptimizationsUsed: 0,\n        lastUpdated: new Date().toISOString(),\n      });\n    }\n\n    // Initialize activity logs\n    if (!this.activityLogs.has(userId)) {\n      this.activityLogs.set(userId, [\n        {\n          id: randomUUID(),\n          userId,\n          action: \"user_login\",\n          description: \"User logged into dashboard\",\n          toolUsed: \"dashboard\",\n          metadata: { timestamp: new Date().toISOString() },\n          createdAt: new Date().toISOString(),\n        }\n      ]);\n    }\n\n    // Initialize tools access\n    if (!this.toolsAccess.has(userId)) {\n      this.toolsAccess.set(userId, []);\n    }\n\n    // Initialize real-time metrics\n    if (!this.realtimeMetrics.has(userId)) {\n      this.realtimeMetrics.set(userId, []);\n    }\n  }\n\n  async trackToolAccess(userId: string, toolName: string): Promise<any> {\n    const userTools = this.toolsAccess.get(userId) || [];\n    const existingTool = userTools.find(tool => tool.toolName === toolName);\n    \n    if (existingTool) {\n      existingTool.accessCount += 1;\n      existingTool.lastAccessed = new Date().toISOString();\n    } else {\n      userTools.push({\n        id: randomUUID(),\n        userId,\n        toolName,\n        accessCount: 1,\n        lastAccessed: new Date().toISOString(),\n        firstAccessed: new Date().toISOString(),\n      });\n    }\n    \n    this.toolsAccess.set(userId, userTools);\n    return existingTool || userTools[userTools.length - 1];\n  }\n\n  async createActivityLog(userId: string, logData: any): Promise<any> {\n    const userActivities = this.activityLogs.get(userId) || [];\n    const newActivity = {\n      id: randomUUID(),\n      userId,\n      ...logData,\n      createdAt: new Date().toISOString(),\n    };\n    \n    userActivities.unshift(newActivity); // Add to beginning for latest first\n    \n    // Keep only latest 50 activities to prevent memory bloat\n    if (userActivities.length > 50) {\n      userActivities.splice(50);\n    }\n    \n    this.activityLogs.set(userId, userActivities);\n    return newActivity;\n  }\n\n  async updateUsageStats(userId: string, statField: string, increment: number): Promise<void> {\n    const stats = this.usageStats.get(userId) || {};\n    stats[statField] = (stats[statField] || 0) + increment;\n    stats.lastUpdated = new Date().toISOString();\n    this.usageStats.set(userId, stats);\n  }\n\n  async generateSampleMetrics(userId: string): Promise<void> {\n    const userMetrics = this.realtimeMetrics.get(userId) || [];\n    \n    const newMetrics = [\n      {\n        id: randomUUID(),\n        userId,\n        metricName: \"revenue_change\",\n        value: \"$\" + (Math.floor(Math.random() * 5000) + 1000),\n        changePercent: \"+\" + (Math.random() * 20 + 5).toFixed(1) + \"%\",\n        isPositive: true,\n        timestamp: new Date().toISOString(),\n      },\n      {\n        id: randomUUID(),\n        userId,\n        metricName: \"orders_change\", \n        value: (Math.floor(Math.random() * 100) + 50).toString(),\n        changePercent: \"+\" + (Math.random() * 15 + 3).toFixed(1) + \"%\",\n        isPositive: true,\n        timestamp: new Date().toISOString(),\n      },\n      {\n        id: randomUUID(),\n        userId,\n        metricName: \"conversion_change\",\n        value: (Math.random() * 2 + 2).toFixed(1) + \"%\",\n        changePercent: (Math.random() > 0.5 ? \"+\" : \"-\") + (Math.random() * 5 + 1).toFixed(1) + \"%\",\n        isPositive: Math.random() > 0.3,\n        timestamp: new Date().toISOString(),\n      },\n    ];\n\n    // Add new metrics and keep only latest 20\n    userMetrics.push(...newMetrics);\n    if (userMetrics.length > 20) {\n      userMetrics.splice(0, userMetrics.length - 20);\n    }\n    \n    this.realtimeMetrics.set(userId, userMetrics);\n  }\n\n  // Notification methods implementation\n  async getNotifications(userId: string): Promise<Notification[]> {\n    return Array.from(this.notificationsData.values())\n      .filter(notification => notification.userId === userId)\n      .sort((a, b) => (b.createdAt?.getTime() || 0) - (a.createdAt?.getTime() || 0));\n  }\n\n  async getUnreadNotificationCount(userId: string): Promise<number> {\n    return Array.from(this.notificationsData.values())\n      .filter(notification => notification.userId === userId && !notification.isRead)\n      .length;\n  }\n\n  async createNotification(notificationData: InsertNotification): Promise<Notification> {\n    const id = randomUUID();\n    const notification: Notification = {\n      id,\n      ...notificationData,\n      type: notificationData.type || \"info\", // Provide default value for required field\n      actionUrl: notificationData.actionUrl || null, // Ensure not undefined\n      actionLabel: notificationData.actionLabel || null, // Ensure not undefined\n      isRead: false,\n      createdAt: new Date(),\n      readAt: null,\n    };\n    this.notificationsData.set(id, notification);\n    return notification;\n  }\n\n  async markNotificationAsRead(userId: string, notificationId: string): Promise<Notification | null> {\n    const notification = this.notificationsData.get(notificationId);\n    if (!notification || notification.userId !== userId) {\n      return null; // Not found or doesn't belong to user\n    }\n    \n    const updatedNotification = {\n      ...notification,\n      isRead: true,\n      readAt: new Date(),\n    };\n    \n    this.notificationsData.set(notificationId, updatedNotification);\n    return updatedNotification;\n  }\n\n  async markAllNotificationsAsRead(userId: string): Promise<void> {\n    const userNotifications = Array.from(this.notificationsData.values())\n      .filter(notification => notification.userId === userId && !notification.isRead);\n    \n    for (const notification of userNotifications) {\n      const updatedNotification = {\n        ...notification,\n        isRead: true,\n        readAt: new Date(),\n      };\n      this.notificationsData.set(notification.id, updatedNotification);\n    }\n  }\n\n  async deleteNotification(userId: string, notificationId: string): Promise<boolean> {\n    const notification = this.notificationsData.get(notificationId);\n    if (!notification || notification.userId !== userId) {\n      return false; // Not found or doesn't belong to user\n    }\n    \n    this.notificationsData.delete(notificationId);\n    return true; // Successfully deleted\n  }\n\n  async clearAllNotifications(userId: string): Promise<void> {\n    const userNotifications = Array.from(this.notificationsData.values())\n      .filter(notification => notification.userId === userId);\n    \n    for (const notification of userNotifications) {\n      this.notificationsData.delete(notification.id);\n    }\n  }\n\n  // Billing methods implementation\n  async getUserSubscription(userId: string): Promise<any> {\n    // Return mock subscription data for demo purposes\n    return {\n      id: `sub_${userId}`,\n      planId: \"plan_free\",\n      status: \"active\",\n      currentPeriodStart: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(),\n      currentPeriodEnd: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n      cancelAtPeriodEnd: false\n    };\n  }\n\n  async getUserUsageStats(userId: string): Promise<any> {\n    // Return mock usage stats for demo purposes\n    return {\n      productsCount: 3,\n      emailsSent: 15,\n      emailsRemaining: 485,\n      smsSent: 5,\n      smsRemaining: 195,\n      aiGenerationsUsed: 25,\n      seoOptimizationsUsed: 8\n    };\n  }\n\n  async getUserInvoices(userId: string): Promise<any[]> {\n    // Return mock invoice data for demo purposes\n    const mockInvoices = [\n      {\n        id: `inv_${userId}_1`,\n        amount: 39.00,\n        currency: \"USD\",\n        status: \"paid\",\n        invoiceNumber: \"INV-2024-001\",\n        invoiceUrl: \"#\",\n        pdfUrl: \"#\",\n        createdAt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(),\n        paidAt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString()\n      },\n      {\n        id: `inv_${userId}_2`,\n        amount: 39.00,\n        currency: \"USD\",\n        status: \"paid\",\n        invoiceNumber: \"INV-2024-002\",\n        invoiceUrl: \"#\",\n        pdfUrl: \"#\",\n        createdAt: new Date(Date.now() - 60 * 24 * 60 * 60 * 1000).toISOString(),\n        paidAt: new Date(Date.now() - 60 * 24 * 60 * 60 * 1000).toISOString()\n      }\n    ];\n    return mockInvoices;\n  }\n\n  async getUserPaymentMethods(userId: string): Promise<any[]> {\n    // Return mock payment method data for demo purposes\n    const mockPaymentMethods = [\n      {\n        id: `pm_${userId}_1`,\n        type: \"card\",\n        cardBrand: \"visa\",\n        cardLast4: \"4242\",\n        cardExpMonth: 12,\n        cardExpYear: 2025,\n        isDefault: true\n      }\n    ];\n    return mockPaymentMethods;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":33529},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, jsonb, boolean, numeric } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  fullName: text(\"full_name\").notNull(),\n  role: text(\"role\").notNull().default(\"user\"),\n  plan: text(\"plan\").notNull().default(\"trial\"),\n  trialEndDate: timestamp(\"trial_end_date\").default(sql`NOW() + INTERVAL '7 days'`),\n  stripeCustomerId: text(\"stripe_customer_id\"),\n  stripeSubscriptionId: text(\"stripe_subscription_id\"),\n  imageUrl: text(\"image_url\"),\n  preferredLanguage: text(\"preferred_language\").default(\"en\"),\n  createdAt: timestamp(\"created_at\").default(sql`NOW()`),\n});\n\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  shopifyId: text(\"shopify_id\"),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  originalDescription: text(\"original_description\"),\n  price: numeric(\"price\", { precision: 10, scale: 2 }).notNull(),\n  category: text(\"category\").notNull(),\n  stock: integer(\"stock\").notNull().default(0),\n  image: text(\"image\"),\n  features: text(\"features\"),\n  tags: text(\"tags\"),\n  optimizedCopy: jsonb(\"optimized_copy\"),\n  isOptimized: boolean(\"is_optimized\").default(false),\n  createdAt: timestamp(\"created_at\").default(sql`NOW()`),\n  updatedAt: timestamp(\"updated_at\").default(sql`NOW()`),\n});\n\nexport const seoMeta = pgTable(\"seo_meta\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  productId: varchar(\"product_id\").references(() => products.id).notNull(),\n  seoTitle: text(\"seo_title\"),\n  metaDescription: text(\"meta_description\"),\n  keywords: text(\"keywords\"),\n  optimizedTitle: text(\"optimized_title\"),\n  optimizedMeta: text(\"optimized_meta\"),\n  seoScore: integer(\"seo_score\"),\n  createdAt: timestamp(\"created_at\").default(sql`NOW()`),\n});\n\nexport const campaigns = pgTable(\"campaigns\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  type: text(\"type\").notNull(), // 'email' | 'sms'\n  name: text(\"name\").notNull(),\n  subject: text(\"subject\"),\n  content: text(\"content\").notNull(),\n  status: text(\"status\").notNull().default(\"draft\"),\n  sentCount: integer(\"sent_count\").default(0),\n  openRate: integer(\"open_rate\").default(0),\n  clickRate: integer(\"click_rate\").default(0),\n  conversionRate: integer(\"conversion_rate\").default(0),\n  createdAt: timestamp(\"created_at\").default(sql`NOW()`),\n});\n\nexport const subscriptions = pgTable(\"subscriptions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  planId: varchar(\"plan_id\").references(() => subscriptionPlans.id).notNull(),\n  stripeSubscriptionId: text(\"stripe_subscription_id\"),\n  status: text(\"status\").notNull().default(\"active\"), // active, canceled, past_due, incomplete, trialing\n  currentPeriodStart: timestamp(\"current_period_start\"),\n  currentPeriodEnd: timestamp(\"current_period_end\"),\n  cancelAtPeriodEnd: boolean(\"cancel_at_period_end\").default(false),\n  trialStart: timestamp(\"trial_start\"),\n  trialEnd: timestamp(\"trial_end\"),\n  startDate: timestamp(\"start_date\").default(sql`NOW()`),\n  endDate: timestamp(\"end_date\"),\n  createdAt: timestamp(\"created_at\").default(sql`NOW()`),\n  updatedAt: timestamp(\"updated_at\").default(sql`NOW()`),\n});\n\nexport const subscriptionPlans = pgTable(\"subscription_plans\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  planName: text(\"plan_name\").notNull().unique(),\n  price: numeric(\"price\", { precision: 10, scale: 2 }).notNull(),\n  interval: text(\"interval\").notNull().default(\"month\"), // 'month' or 'year'\n  features: jsonb(\"features\").notNull(),\n  limits: jsonb(\"limits\").notNull(), // product limits, email limits, SMS limits etc\n  stripePriceId: text(\"stripe_price_id\"),\n  stripeProductId: text(\"stripe_product_id\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  currency: text(\"currency\").notNull().default(\"USD\"),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").default(sql`NOW()`),\n});\n\nexport const profiles = pgTable(\"profiles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull().unique(),\n  name: text(\"name\"),\n  bio: text(\"bio\"),\n  profileImage: text(\"profile_image\"),\n  preferences: jsonb(\"preferences\"),\n  createdAt: timestamp(\"created_at\").default(sql`NOW()`),\n  updatedAt: timestamp(\"updated_at\").default(sql`NOW()`),\n});\n\nexport const sessions = pgTable(\"sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sessionId: text(\"session_id\").notNull().unique(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\").default(sql`NOW()`),\n});\n\nexport const usageStats = pgTable(\"usage_stats\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  totalRevenue: integer(\"total_revenue\").default(0),\n  totalOrders: integer(\"total_orders\").default(0),\n  conversionRate: integer(\"conversion_rate\").default(0), // stored as percentage * 100\n  cartRecoveryRate: integer(\"cart_recovery_rate\").default(0), // stored as percentage * 100\n  productsCount: integer(\"products_count\").default(0),\n  productsOptimized: integer(\"products_optimized\").default(0),\n  emailsSent: integer(\"emails_sent\").default(0),\n  emailsRemaining: integer(\"emails_remaining\").default(0),\n  smsSent: integer(\"sms_sent\").default(0),\n  smsRemaining: integer(\"sms_remaining\").default(0),\n  aiGenerationsUsed: integer(\"ai_generations_used\").default(0),\n  seoOptimizationsUsed: integer(\"seo_optimizations_used\").default(0),\n  lastUpdated: timestamp(\"last_updated\").default(sql`NOW()`),\n  lastResetDate: timestamp(\"last_reset_date\").default(sql`NOW()`),\n});\n\nexport const activityLogs = pgTable(\"activity_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  action: text(\"action\").notNull(), // 'generated_product', 'optimized_seo', 'sent_campaign', etc\n  description: text(\"description\").notNull(),\n  metadata: jsonb(\"metadata\"), // store additional data like product name, campaign id, etc\n  toolUsed: text(\"tool_used\"), // 'ai-generator', 'seo-tools', 'campaigns', etc\n  createdAt: timestamp(\"created_at\").default(sql`NOW()`),\n});\n\nexport const toolsAccess = pgTable(\"tools_access\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  toolName: text(\"tool_name\").notNull(), // 'ai-generator', 'seo-tools', 'analytics', etc\n  accessCount: integer(\"access_count\").default(1),\n  lastAccessed: timestamp(\"last_accessed\").default(sql`NOW()`),\n  firstAccessed: timestamp(\"first_accessed\").default(sql`NOW()`),\n});\n\nexport const realtimeMetrics = pgTable(\"realtime_metrics\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  metricName: text(\"metric_name\").notNull(), // 'revenue_change', 'orders_change', etc\n  value: text(\"value\").notNull(),\n  changePercent: text(\"change_percent\"),\n  isPositive: boolean(\"is_positive\").default(true),\n  timestamp: timestamp(\"timestamp\").default(sql`NOW()`),\n});\n\nexport const analytics = pgTable(\"analytics\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  metricType: text(\"metric_type\").notNull(),\n  value: integer(\"value\").notNull(),\n  date: timestamp(\"date\").default(sql`NOW()`),\n  metadata: jsonb(\"metadata\"),\n});\n\nexport const notifications = pgTable(\"notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  title: text(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  type: text(\"type\").notNull().default(\"info\"), // 'info', 'success', 'warning', 'error'\n  isRead: boolean(\"is_read\").default(false),\n  actionUrl: text(\"action_url\"), // Optional URL for \"View Details\" button\n  actionLabel: text(\"action_label\"), // Optional label for action button\n  createdAt: timestamp(\"created_at\").default(sql`NOW()`),\n  readAt: timestamp(\"read_at\"),\n});\n\nexport const storeConnections = pgTable(\"store_connections\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  platform: text(\"platform\").notNull(), // 'shopify' | 'woocommerce'\n  storeName: text(\"store_name\").notNull(),\n  storeUrl: text(\"store_url\"),\n  accessToken: text(\"access_token\").notNull(),\n  refreshToken: text(\"refresh_token\"),\n  status: text(\"status\").notNull().default(\"active\"), // 'active' | 'inactive' | 'error'\n  lastSyncAt: timestamp(\"last_sync_at\"),\n  createdAt: timestamp(\"created_at\").default(sql`NOW()`),\n  updatedAt: timestamp(\"updated_at\").default(sql`NOW()`),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  email: true,\n  password: true,\n  fullName: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  price: z.string().min(1, \"Price is required\"),\n  stock: z.number().min(0, \"Stock must be 0 or greater\"),\n  category: z.string().min(1, \"Category is required\"),\n});\n\nexport const insertSeoMetaSchema = createInsertSchema(seoMeta).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCampaignSchema = createInsertSchema(campaigns).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAnalyticsSchema = createInsertSchema(analytics).omit({\n  id: true,\n});\n\nexport const insertSubscriptionPlanSchema = createInsertSchema(subscriptionPlans).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProfileSchema = createInsertSchema(profiles).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSessionSchema = createInsertSchema(sessions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUsageStatsSchema = createInsertSchema(usageStats).omit({\n  id: true,\n});\n\nexport const insertActivityLogSchema = createInsertSchema(activityLogs).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertToolsAccessSchema = createInsertSchema(toolsAccess).omit({\n  id: true,\n  firstAccessed: true,\n});\n\nexport const insertRealtimeMetricsSchema = createInsertSchema(realtimeMetrics).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  createdAt: true,\n  readAt: true,\n});\n\nexport const insertStoreConnectionSchema = createInsertSchema(storeConnections).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type SeoMeta = typeof seoMeta.$inferSelect;\nexport type InsertSeoMeta = z.infer<typeof insertSeoMetaSchema>;\nexport type Campaign = typeof campaigns.$inferSelect;\nexport type InsertCampaign = z.infer<typeof insertCampaignSchema>;\nexport type Analytics = typeof analytics.$inferSelect;\nexport type InsertAnalytics = z.infer<typeof insertAnalyticsSchema>;\nexport type Subscription = typeof subscriptions.$inferSelect;\nexport type SubscriptionPlan = typeof subscriptionPlans.$inferSelect;\nexport type InsertSubscriptionPlan = z.infer<typeof insertSubscriptionPlanSchema>;\nexport type Profile = typeof profiles.$inferSelect;\nexport type InsertProfile = z.infer<typeof insertProfileSchema>;\nexport type Session = typeof sessions.$inferSelect;\nexport type InsertSession = z.infer<typeof insertSessionSchema>;\nexport type UsageStats = typeof usageStats.$inferSelect;\nexport type InsertUsageStats = z.infer<typeof insertUsageStatsSchema>;\nexport type ActivityLog = typeof activityLogs.$inferSelect;\nexport type InsertActivityLog = z.infer<typeof insertActivityLogSchema>;\nexport type ToolsAccess = typeof toolsAccess.$inferSelect;\nexport type InsertToolsAccess = z.infer<typeof insertToolsAccessSchema>;\nexport type RealtimeMetrics = typeof realtimeMetrics.$inferSelect;\nexport type InsertRealtimeMetrics = z.infer<typeof insertRealtimeMetricsSchema>;\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\nexport type StoreConnection = typeof storeConnections.$inferSelect;\nexport type InsertStoreConnection = z.infer<typeof insertStoreConnectionSchema>;\n\n// Billing and invoice tables\nexport const invoices = pgTable(\"invoices\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  subscriptionId: varchar(\"subscription_id\").references(() => subscriptions.id),\n  stripeInvoiceId: text(\"stripe_invoice_id\").unique(),\n  amount: numeric(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  currency: text(\"currency\").notNull().default(\"USD\"),\n  status: text(\"status\").notNull(), // paid, open, void, uncollectible\n  invoiceNumber: text(\"invoice_number\"),\n  invoiceUrl: text(\"invoice_url\"),\n  pdfUrl: text(\"pdf_url\"),\n  dueDate: timestamp(\"due_date\"),\n  paidAt: timestamp(\"paid_at\"),\n  createdAt: timestamp(\"created_at\").default(sql`NOW()`),\n});\n\nexport const paymentMethods = pgTable(\"payment_methods\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  stripePaymentMethodId: text(\"stripe_payment_method_id\").notNull().unique(),\n  type: text(\"type\").notNull(), // card, bank_account, etc.\n  cardBrand: text(\"card_brand\"), // visa, mastercard, amex, etc.\n  cardLast4: text(\"card_last4\"),\n  cardExpMonth: integer(\"card_exp_month\"),\n  cardExpYear: integer(\"card_exp_year\"),\n  isDefault: boolean(\"is_default\").default(false),\n  createdAt: timestamp(\"created_at\").default(sql`NOW()`),\n  updatedAt: timestamp(\"updated_at\").default(sql`NOW()`),\n});\n\nexport const billingHistory = pgTable(\"billing_history\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  subscriptionId: varchar(\"subscription_id\").references(() => subscriptions.id),\n  invoiceId: varchar(\"invoice_id\").references(() => invoices.id),\n  action: text(\"action\").notNull(), // subscription_created, payment_succeeded, payment_failed, etc.\n  amount: numeric(\"amount\", { precision: 10, scale: 2 }),\n  currency: text(\"currency\").default(\"USD\"),\n  status: text(\"status\").notNull(),\n  description: text(\"description\"),\n  metadata: jsonb(\"metadata\"),\n  createdAt: timestamp(\"created_at\").default(sql`NOW()`),\n});\n\n// Billing table schemas\nexport const insertInvoiceSchema = createInsertSchema(invoices).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPaymentMethodSchema = createInsertSchema(paymentMethods).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertBillingHistorySchema = createInsertSchema(billingHistory).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Additional billing types\nexport type Invoice = typeof invoices.$inferSelect;\nexport type InsertInvoice = z.infer<typeof insertInvoiceSchema>;\nexport type PaymentMethod = typeof paymentMethods.$inferSelect;\nexport type InsertPaymentMethod = z.infer<typeof insertPaymentMethodSchema>;\nexport type BillingHistory = typeof billingHistory.$inferSelect;\nexport type InsertBillingHistory = z.infer<typeof insertBillingHistorySchema>;\n","size_bytes":16117},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Landing from \"@/pages/landing\";\nimport Auth from \"@/pages/auth\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Products from \"@/pages/products\";\nimport Profile from \"@/pages/profile\";\nimport Billing from \"@/pages/billing\";\nimport NotFound from \"@/pages/not-found\";\nimport OptimizedProducts from \"@/pages/optimized-products\";\nimport EmailPerformance from \"@/pages/email-performance\";\nimport SmsConversion from \"@/pages/sms-conversion\";\nimport SeoKeywordDensity from \"@/pages/seo-keyword-density\";\nimport ContentROI from \"@/pages/content-roi\";\nimport RevenueImpact from \"@/pages/revenue-impact\";\nimport SeoRankingTracker from \"@/pages/seo-ranking-tracker\";\nimport ABTestResults from \"@/pages/ab-test-results\";\nimport { useAuth } from \"@/lib/auth\";\n\nfunction Router() {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/\" component={user ? Dashboard : Landing} />\n      <Route path=\"/auth/:mode?\" component={Auth} />\n      <Route path=\"/dashboard\" component={user ? Dashboard : () => { window.location.href = \"/auth/login\"; return null; }} />\n      <Route path=\"/products\" component={user ? Products : () => { window.location.href = \"/auth/login\"; return null; }} />\n      <Route path=\"/profile\" component={user ? Profile : () => { window.location.href = \"/auth/login\"; return null; }} />\n      <Route path=\"/billing\" component={user ? Billing : () => { window.location.href = \"/auth/login\"; return null; }} />\n      <Route path=\"/analytics/optimized-products\" component={user ? OptimizedProducts : () => { window.location.href = \"/auth/login\"; return null; }} />\n      <Route path=\"/analytics/email-performance\" component={user ? EmailPerformance : () => { window.location.href = \"/auth/login\"; return null; }} />\n      <Route path=\"/analytics/sms-conversion\" component={user ? SmsConversion : () => { window.location.href = \"/auth/login\"; return null; }} />\n      <Route path=\"/analytics/seo-keyword-density\" component={user ? SeoKeywordDensity : () => { window.location.href = \"/auth/login\"; return null; }} />\n      <Route path=\"/analytics/content-roi\" component={user ? ContentROI : () => { window.location.href = \"/auth/login\"; return null; }} />\n      <Route path=\"/analytics/revenue-impact\" component={user ? RevenueImpact : () => { window.location.href = \"/auth/login\"; return null; }} />\n      <Route path=\"/analytics/seo-ranking-tracker\" component={user ? SeoRankingTracker : () => { window.location.href = \"/auth/login\"; return null; }} />\n      <Route path=\"/analytics/ab-test-results\" component={user ? ABTestResults : () => { window.location.href = \"/auth/login\"; return null; }} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3413},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(220, 40%, 2%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(220, 30%, 6%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(220, 30%, 6%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(200, 85%, 75%);\n  --primary-foreground: hsl(220, 40%, 2%);\n  --secondary: hsl(210, 30%, 35%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(220, 20%, 14%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(198, 100%, 88%);\n  --accent-foreground: hsl(220, 40%, 2%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(215, 25%, 20%);\n  --input: hsl(215, 25%, 20%);\n  --ring: hsl(200, 85%, 75%);\n  --chart-1: hsl(200, 85%, 75%);\n  --chart-2: hsl(210, 30%, 35%);\n  --chart-3: hsl(198, 100%, 88%);\n  --chart-4: hsl(220, 20%, 14%);\n  --chart-5: hsl(215, 20%, 65%);\n  --sidebar: hsl(220, 30%, 6%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(200, 85%, 75%);\n  --sidebar-primary-foreground: hsl(220, 40%, 2%);\n  --sidebar-accent: hsl(220, 20%, 14%);\n  --sidebar-accent-foreground: hsl(198, 100%, 88%);\n  --sidebar-border: hsl(215, 25%, 20%);\n  --sidebar-ring: hsl(200, 85%, 75%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 12px;\n}\n\n.dark {\n  --background: hsl(220, 40%, 2%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(220, 30%, 6%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(220, 30%, 6%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(200, 85%, 75%);\n  --primary-foreground: hsl(220, 40%, 2%);\n  --secondary: hsl(210, 30%, 35%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(220, 20%, 14%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(198, 100%, 88%);\n  --accent-foreground: hsl(220, 40%, 2%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(215, 25%, 20%);\n  --input: hsl(215, 25%, 20%);\n  --ring: hsl(200, 85%, 75%);\n  --chart-1: hsl(200, 85%, 75%);\n  --chart-2: hsl(210, 30%, 35%);\n  --chart-3: hsl(198, 100%, 88%);\n  --chart-4: hsl(220, 20%, 14%);\n  --chart-5: hsl(215, 20%, 65%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased text-foreground;\n    background: linear-gradient(135deg, #021024 0%, #052659 50%, #5483B3 100%);\n    min-height: 100vh;\n  }\n}\n\n@layer components {\n  .gradient-card {\n    background: linear-gradient(135deg, rgba(84, 131, 179, 0.1) 0%, rgba(125, 160, 202, 0.05) 100%);\n    border: 1px solid rgba(125, 160, 202, 0.2);\n    backdrop-filter: blur(10px);\n  }\n\n  .gradient-button {\n    background: linear-gradient(135deg, #7DA0CA 0%, #C1E8FF 100%);\n    color: #021024;\n    transition: all 0.3s ease;\n  }\n\n  .gradient-button:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 8px 25px rgba(193, 232, 255, 0.3);\n  }\n\n  .sidebar-gradient {\n    background: linear-gradient(180deg, rgba(2, 16, 36, 0.95) 0%, rgba(5, 38, 89, 0.9) 100%);\n    backdrop-filter: blur(10px);\n  }\n\n  .stat-card {\n    background: linear-gradient(135deg, rgba(125, 160, 202, 0.15) 0%, rgba(193, 232, 255, 0.05) 100%);\n    border: 1px solid rgba(125, 160, 202, 0.3);\n  }\n\n  .form-input {\n    background: rgba(5, 38, 89, 0.3);\n    border: 1px solid rgba(125, 160, 202, 0.3);\n    backdrop-filter: blur(5px);\n  }\n\n  .form-input:focus {\n    border-color: var(--primary);\n    box-shadow: 0 0 0 3px rgba(125, 160, 202, 0.1);\n  }\n\n  .active-tab {\n    background: linear-gradient(135deg, #7DA0CA 0%, #C1E8FF 100%);\n    color: #021024;\n  }\n\n  .pricing-card {\n    background: linear-gradient(135deg, rgba(125, 160, 202, 0.1) 0%, rgba(193, 232, 255, 0.05) 100%);\n    border: 2px solid rgba(125, 160, 202, 0.2);\n    transition: all 0.3s ease;\n  }\n\n  .pricing-card:hover {\n    border-color: rgba(125, 160, 202, 0.5);\n    transform: translateY(-5px);\n  }\n\n  .feature-highlight {\n    background: linear-gradient(135deg, rgba(193, 232, 255, 0.15) 0%, rgba(125, 160, 202, 0.1) 100%);\n  }\n}\n","size_bytes":4206},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/responsive-navbar.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Zap, Menu, X } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface NavItem {\n  label: string;\n  href?: string;\n  onClick?: () => void;\n  external?: boolean;\n}\n\ninterface ResponsiveNavbarProps {\n  logo?: {\n    icon?: React.ReactNode;\n    text: string;\n    href?: string;\n  };\n  navItems: NavItem[];\n  actionButton?: {\n    label: string;\n    href?: string;\n    onClick?: () => void;\n  };\n  className?: string;\n}\n\nexport default function ResponsiveNavbar({\n  logo = {\n    icon: <Zap className=\"w-6 h-6 text-primary-foreground\" />,\n    text: \"Zyra\",\n    href: \"/\"\n  },\n  navItems,\n  actionButton,\n  className\n}: ResponsiveNavbarProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const menuRef = useRef<HTMLDivElement>(null);\n  const buttonRef = useRef<HTMLButtonElement>(null);\n\n  // Close menu when clicking outside\n  useEffect(() => {\n    function handleClickOutside(event: MouseEvent) {\n      if (\n        menuRef.current &&\n        buttonRef.current &&\n        !menuRef.current.contains(event.target as Node) &&\n        !buttonRef.current.contains(event.target as Node)\n      ) {\n        setIsOpen(false);\n      }\n    }\n\n    if (isOpen) {\n      document.addEventListener(\"mousedown\", handleClickOutside);\n    }\n\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [isOpen]);\n\n  // Close menu on Escape key\n  useEffect(() => {\n    function handleEscape(event: KeyboardEvent) {\n      if (event.key === \"Escape\" && isOpen) {\n        setIsOpen(false);\n        buttonRef.current?.focus();\n      }\n    }\n\n    if (isOpen) {\n      document.addEventListener(\"keydown\", handleEscape);\n    }\n\n    return () => {\n      document.removeEventListener(\"keydown\", handleEscape);\n    };\n  }, [isOpen]);\n\n  // Lock body scroll when menu is open\n  useEffect(() => {\n    if (isOpen) {\n      document.body.style.overflow = \"hidden\";\n    } else {\n      document.body.style.overflow = \"unset\";\n    }\n\n    return () => {\n      document.body.style.overflow = \"unset\";\n    };\n  }, [isOpen]);\n\n  const toggleMenu = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const closeMenu = () => {\n    setIsOpen(false);\n  };\n\n  const handleNavItemClick = (item: NavItem) => {\n    if (item.onClick) {\n      item.onClick();\n    }\n    closeMenu();\n  };\n\n  const renderNavItem = (item: NavItem, index: number, isMobile: boolean = false) => {\n    const baseClassName = cn(\n      \"transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 rounded-md\",\n      isMobile\n        ? \"block w-full text-left px-4 py-3 text-lg font-medium text-foreground hover:text-primary hover:bg-muted\"\n        : \"text-muted-foreground hover:text-foreground px-2 py-1\"\n    );\n\n    if (item.href) {\n      if (item.external) {\n        return (\n          <a\n            key={index}\n            href={item.href}\n            className={baseClassName}\n            onClick={() => isMobile && closeMenu()}\n            data-testid={`nav-link-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}\n          >\n            {item.label}\n          </a>\n        );\n      } else {\n        return (\n          <Link\n            key={index}\n            href={item.href}\n            className={baseClassName}\n            onClick={() => isMobile && closeMenu()}\n            data-testid={`nav-link-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}\n          >\n            {item.label}\n          </Link>\n        );\n      }\n    }\n\n    return (\n      <button\n        key={index}\n        onClick={() => handleNavItemClick(item)}\n        className={baseClassName}\n        data-testid={`nav-button-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}\n      >\n        {item.label}\n      </button>\n    );\n  };\n\n  const renderActionButton = (isMobile: boolean = false) => {\n    if (!actionButton) return null;\n\n    if (actionButton.href) {\n      return (\n        <Button\n          asChild\n          className={cn(\n            \"gradient-button\",\n            isMobile ? \"w-full text-base sm:text-lg py-3\" : \"\"\n          )}\n          data-testid={`action-button-${actionButton.label.toLowerCase().replace(/\\s+/g, '-')}`}\n        >\n          <Link\n            href={actionButton.href}\n            onClick={() => isMobile && closeMenu()}\n          >\n            {actionButton.label}\n          </Link>\n        </Button>\n      );\n    }\n\n    return (\n      <Button\n        className={cn(\n          \"gradient-button\",\n          isMobile ? \"w-full text-base sm:text-lg py-3\" : \"\"\n        )}\n        onClick={() => {\n          if (actionButton.onClick) {\n            actionButton.onClick();\n          }\n          if (isMobile) {\n            closeMenu();\n          }\n        }}\n        data-testid={`action-button-${actionButton.label.toLowerCase().replace(/\\s+/g, '-')}`}\n      >\n        {actionButton.label}\n      </Button>\n    );\n  };\n\n  return (\n    <nav className={cn(\n      \"fixed top-0 w-full z-50 bg-black/20 backdrop-blur-md border-b border-border\",\n      className\n    )}>\n      <div className=\"container mx-auto px-4 sm:px-6 py-3 sm:py-4\">\n        <div className=\"flex items-center justify-between\">\n          {/* Logo */}\n          <div className=\"flex items-center space-x-2 sm:space-x-3\">\n            {logo.href ? (\n              <Link\n                href={logo.href}\n                className=\"flex items-center space-x-2 sm:space-x-3 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 rounded-md\"\n                data-testid=\"nav-logo\"\n              >\n                {logo.icon && (\n                  <div className=\"w-8 h-8 sm:w-10 sm:h-10 bg-gradient-to-br from-primary to-accent rounded-lg flex items-center justify-center\">\n                    {logo.icon}\n                  </div>\n                )}\n                <span className=\"text-xl sm:text-2xl font-bold text-foreground\">{logo.text}</span>\n              </Link>\n            ) : (\n              <div className=\"flex items-center space-x-2 sm:space-x-3\">\n                {logo.icon && (\n                  <div className=\"w-8 h-8 sm:w-10 sm:h-10 bg-gradient-to-br from-primary to-accent rounded-lg flex items-center justify-center\">\n                    {logo.icon}\n                  </div>\n                )}\n                <span className=\"text-xl sm:text-2xl font-bold text-foreground\">{logo.text}</span>\n              </div>\n            )}\n          </div>\n\n          {/* Desktop Navigation */}\n          <div className=\"hidden md:flex items-center space-x-6 lg:space-x-8\">\n            {navItems.map((item, index) => renderNavItem(item, index, false))}\n            {renderActionButton(false)}\n          </div>\n\n          {/* Mobile Menu Button */}\n          <button\n            ref={buttonRef}\n            onClick={toggleMenu}\n            className=\"md:hidden text-foreground p-2 hover:bg-muted rounded-md transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2\"\n            aria-label={isOpen ? \"Close menu\" : \"Open menu\"}\n            aria-expanded={isOpen}\n            aria-controls=\"mobile-menu\"\n            data-testid=\"button-mobile-menu\"\n          >\n            {isOpen ? (\n              <X className=\"w-6 h-6\" />\n            ) : (\n              <Menu className=\"w-6 h-6\" />\n            )}\n          </button>\n        </div>\n\n        {/* Mobile Menu */}\n        <div\n          ref={menuRef}\n          id=\"mobile-menu\"\n          className={cn(\n            \"md:hidden fixed left-0 right-0 top-full bg-background/95 dark:bg-background/95 backdrop-blur-md border-b border-border transition-all duration-300 ease-in-out\",\n            isOpen\n              ? \"opacity-100 visible translate-y-0\"\n              : \"opacity-0 invisible -translate-y-2\"\n          )}\n          role=\"menu\"\n          aria-labelledby=\"mobile-menu\"\n        >\n          <div className=\"container mx-auto px-4 sm:px-6 py-4 sm:py-6 space-y-2\">\n            {navItems.map((item, index) => (\n              <div key={index} role=\"menuitem\">\n                {renderNavItem(item, index, true)}\n              </div>\n            ))}\n            {actionButton && (\n              <div className=\"pt-4 border-t border-border\">\n                {renderActionButton(true)}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Mobile Menu Overlay */}\n      {isOpen && (\n        <div\n          className=\"md:hidden fixed inset-0 bg-black/20 backdrop-blur-sm z-[-1]\"\n          onClick={closeMenu}\n          aria-hidden=\"true\"\n        />\n      )}\n    </nav>\n  );\n}","size_bytes":8639},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useDashboard.ts":{"content":"import { useState, useEffect, useCallback, useRef } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n// Types for real-time dashboard data\nexport interface DashboardData {\n  user: any;\n  profile: any;\n  usageStats: UsageStats | null;\n  activityLogs: any[];\n  toolsAccess: any[];\n  realtimeMetrics: any[];\n}\n\nexport interface UsageStats {\n  totalRevenue: number;\n  totalOrders: number;\n  conversionRate: number;\n  cartRecoveryRate: number;\n  productsOptimized: number;\n  emailsSent: number;\n  smsSent: number;\n  aiGenerationsUsed: number;\n  seoOptimizationsUsed: number;\n  lastUpdated: string;\n}\n\n// Main dashboard hook with real-time capabilities\nexport function useDashboard() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [lastUpdate, setLastUpdate] = useState<number>(Date.now());\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const pollingIntervalRef = useRef<NodeJS.Timeout>();\n\n  // Fetch comprehensive dashboard data\n  const {\n    data: dashboardData,\n    isLoading,\n    error,\n    refetch\n  } = useQuery<DashboardData>({\n    queryKey: [\"/api/dashboard\"],\n    enabled: true,\n    staleTime: 30000, // Cache for 30 seconds\n    refetchInterval: 5000, // Poll every 5 seconds\n    refetchIntervalInBackground: true,\n    retry: 3,\n    retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),\n  });\n\n  // Initialize user real-time data\n  const initializeMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(\"POST\", \"/api/dashboard/initialize\");\n    },\n    onSuccess: () => {\n      setIsInitialized(true);\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n      toast({\n        title: \"Dashboard Ready\",\n        description: \"Real-time data has been initialized successfully\",\n      });\n    },\n    onError: (error: any) => {\n      console.error(\"Dashboard initialization failed:\", error);\n      toast({\n        title: \"Initialization Failed\",\n        description: \"Failed to initialize real-time data\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Track tool access with optimistic updates\n  const trackToolAccessMutation = useMutation({\n    mutationFn: async (toolName: string) => {\n      return apiRequest(\"POST\", \"/api/dashboard/track-tool-access\", {\n        toolName,\n      });\n    },\n    onMutate: async (toolName) => {\n      // Optimistic update\n      const queryKey = [\"/api/dashboard\"];\n      const previousData = queryClient.getQueryData<DashboardData>(queryKey);\n\n      if (previousData) {\n        queryClient.setQueryData<DashboardData>(queryKey, {\n          ...previousData,\n          toolsAccess: previousData.toolsAccess.map((tool) =>\n            tool.toolName === toolName\n              ? { ...tool, accessCount: tool.accessCount + 1, lastAccessed: new Date().toISOString() }\n              : tool\n          ),\n        });\n      }\n\n      return { previousData };\n    },\n    onError: (error, toolName, context) => {\n      // Revert optimistic update on error\n      if (context?.previousData) {\n        queryClient.setQueryData([\"/api/dashboard\"], context.previousData);\n      }\n      console.error(\"Tool access tracking failed:\", error);\n    },\n    onSuccess: () => {\n      // Refetch to get server state\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n    },\n  });\n\n  // Log activity\n  const logActivityMutation = useMutation({\n    mutationFn: async (activityData: {\n      action: string;\n      description: string;\n      toolUsed?: string;\n      metadata?: any;\n    }) => {\n      return apiRequest(\"POST\", \"/api/dashboard/log-activity\", activityData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n    },\n  });\n\n  // Update usage stats\n  const updateUsageMutation = useMutation({\n    mutationFn: async (data: { statField: string; increment?: number }) => {\n      return apiRequest(\"POST\", \"/api/dashboard/update-usage\", data);\n    },\n    onMutate: async ({ statField, increment = 1 }) => {\n      // Optimistic update\n      const queryKey = [\"/api/dashboard\"];\n      const previousData = queryClient.getQueryData<DashboardData>(queryKey);\n\n      if (previousData?.usageStats) {\n        const updatedStats = {\n          ...previousData.usageStats,\n          [statField]: ((previousData.usageStats as any)[statField] || 0) + increment,\n          lastUpdated: new Date().toISOString(),\n        };\n\n        queryClient.setQueryData<DashboardData>(queryKey, {\n          ...previousData,\n          usageStats: updatedStats,\n        });\n      }\n\n      return { previousData };\n    },\n    onError: (error, variables, context) => {\n      // Revert optimistic update on error\n      if (context?.previousData) {\n        queryClient.setQueryData([\"/api/dashboard\"], context.previousData);\n      }\n      console.error(\"Usage stats update failed:\", error);\n    },\n    onSuccess: () => {\n      setLastUpdate(Date.now());\n    },\n  });\n\n  // Refresh metrics (generate new sample data)\n  const refreshMetricsMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(\"POST\", \"/api/dashboard/refresh-metrics\");\n    },\n    onSuccess: (data: any) => {\n      if (data.dashboardData) {\n        queryClient.setQueryData([\"/api/dashboard\"], data.dashboardData);\n      }\n      toast({\n        title: \"Metrics Refreshed\",\n        description: \"Real-time metrics have been updated\",\n      });\n    },\n  });\n\n  // Initialize dashboard on first load\n  useEffect(() => {\n    if (!isInitialized && !initializeMutation.isPending) {\n      initializeMutation.mutate();\n    }\n  }, [isInitialized, initializeMutation]);\n\n  // Comprehensive refresh functionality with loading states and error handling\n  const refreshMutation = useMutation({\n    mutationFn: async () => {\n      // Force fresh data fetch by invalidating all cache\n      await queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n      await queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      await queryClient.invalidateQueries({ queryKey: [\"/api/analytics\"] });\n      \n      // Fetch fresh data\n      const response = await refetch();\n      return response.data;\n    },\n    onMutate: () => {\n      setIsRefreshing(true);\n    },\n    onSuccess: (data) => {\n      setLastUpdate(Date.now());\n      toast({\n        title: \"✅ Data refreshed successfully!\",\n        description: \"All dashboard data has been updated with the latest information.\",\n        duration: 3000,\n      });\n    },\n    onError: (error: any) => {\n      console.error(\"Refresh failed:\", error);\n      toast({\n        title: \"❌ Refresh failed, try again.\",\n        description: \"Unable to fetch fresh data. Please check your connection and try again.\",\n        variant: \"destructive\",\n        duration: 4000,\n      });\n    },\n    onSettled: () => {\n      setIsRefreshing(false);\n    }\n  });\n\n  // Manual refresh function with comprehensive functionality\n  const refreshDashboard = useCallback(() => {\n    refreshMutation.mutate();\n  }, [refreshMutation]);\n\n  // Track tool access with optimistic UI\n  const trackToolAccess = useCallback(\n    (toolName: string) => {\n      trackToolAccessMutation.mutate(toolName);\n    },\n    [trackToolAccessMutation]\n  );\n\n  // Log user activity\n  const logActivity = useCallback(\n    (action: string, description: string, toolUsed?: string, metadata?: any) => {\n      logActivityMutation.mutate({ action, description, toolUsed, metadata });\n    },\n    [logActivityMutation]\n  );\n\n  // Update usage statistics\n  const updateUsageStats = useCallback(\n    (statField: string, increment = 1) => {\n      updateUsageMutation.mutate({ statField, increment });\n    },\n    [updateUsageMutation]\n  );\n\n  // Generate formatted stats for display\n  const formattedStats = dashboardData?.usageStats\n    ? [\n        {\n          icon: \"TrendingUp\",\n          title: \"Total Revenue\",\n          value: `$${Math.floor((dashboardData.usageStats.totalRevenue || 0) / 100).toLocaleString()}`,\n          change: \"+12.5%\",\n          positive: true,\n        },\n        {\n          icon: \"ShoppingCart\",\n          title: \"Orders\",\n          value: (dashboardData.usageStats.totalOrders || 0).toLocaleString(),\n          change: \"+8.2%\",\n          positive: true,\n        },\n        {\n          icon: \"Eye\",\n          title: \"Conversion Rate\",\n          value: `${((dashboardData.usageStats.conversionRate || 0) / 100).toFixed(1)}%`,\n          change: \"+2.1%\",\n          positive: true,\n        },\n        {\n          icon: \"RotateCcw\",\n          title: \"Cart Recovery\",\n          value: `${Math.floor((dashboardData.usageStats.cartRecoveryRate || 0) / 100)}%`,\n          change: \"+15.3%\",\n          positive: true,\n        },\n      ]\n    : [];\n\n  return {\n    // Data\n    dashboardData,\n    formattedStats,\n    isLoading,\n    error,\n    isInitialized,\n    lastUpdate,\n\n    // Actions\n    refreshDashboard,\n    trackToolAccess,\n    logActivity,\n    updateUsageStats,\n    refreshMetrics: refreshMetricsMutation.mutate,\n\n    // Loading states\n    isInitializing: initializeMutation.isPending,\n    isTrackingTool: trackToolAccessMutation.isPending,\n    isLoggingActivity: logActivityMutation.isPending,\n    isUpdatingUsage: updateUsageMutation.isPending,\n    isRefreshingMetrics: refreshMetricsMutation.isPending,\n    isRefreshing,\n  };\n}\n\n// Hook for skeleton loading states\nexport function useSkeletonLoader(isLoading: boolean, delay = 300) {\n  const [showSkeleton, setShowSkeleton] = useState(false);\n\n  useEffect(() => {\n    let timer: NodeJS.Timeout;\n\n    if (isLoading) {\n      timer = setTimeout(() => {\n        setShowSkeleton(true);\n      }, delay);\n    } else {\n      setShowSkeleton(false);\n    }\n\n    return () => {\n      if (timer) {\n        clearTimeout(timer);\n      }\n    };\n  }, [isLoading, delay]);\n\n  return showSkeleton;\n}\n\n// Hook for optimistic UI updates\nexport function useOptimisticAction<T extends any[], R>(\n  action: (...args: T) => Promise<R>,\n  optimisticUpdate?: (...args: T) => void,\n  onError?: (error: any, ...args: T) => void\n) {\n  const [isPending, setIsPending] = useState(false);\n\n  const execute = useCallback(\n    async (...args: T): Promise<R | null> => {\n      setIsPending(true);\n\n      // Apply optimistic update immediately\n      if (optimisticUpdate) {\n        optimisticUpdate(...args);\n      }\n\n      try {\n        const result = await action(...args);\n        setIsPending(false);\n        return result;\n      } catch (error) {\n        setIsPending(false);\n        if (onError) {\n          onError(error, ...args);\n        }\n        return null;\n      }\n    },\n    [action, optimisticUpdate, onError]\n  );\n\n  return { execute, isPending };\n}\n\n// Hook for real-time data synchronization\nexport function useRealtimeSync(intervalMs = 5000) {\n  const queryClient = useQueryClient();\n  const [lastSync, setLastSync] = useState<Date>(new Date());\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      // Invalidate dashboard queries to trigger refetch\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n      setLastSync(new Date());\n    }, intervalMs);\n\n    return () => clearInterval(interval);\n  }, [queryClient, intervalMs]);\n\n  return { lastSync };\n}\n\n// Hook for connection status monitoring\nexport function useConnectionStatus() {\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n  const [lastOnline, setLastOnline] = useState<Date>(new Date());\n\n  useEffect(() => {\n    const handleOnline = () => {\n      setIsOnline(true);\n      setLastOnline(new Date());\n    };\n\n    const handleOffline = () => {\n      setIsOnline(false);\n    };\n\n    window.addEventListener(\"online\", handleOnline);\n    window.addEventListener(\"offline\", handleOffline);\n\n    return () => {\n      window.removeEventListener(\"online\", handleOnline);\n      window.removeEventListener(\"offline\", handleOffline);\n    };\n  }, []);\n\n  return { isOnline, lastOnline };\n}","size_bytes":12103},"client/src/lib/auth.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"./queryClient\";\n\nexport interface User {\n  id: string;\n  email: string;\n  fullName: string;\n  plan: string;\n  role: string;\n}\n\nexport function useAuth() {\n  const queryClient = useQueryClient();\n\n  const { data: user, isLoading, error } = useQuery({\n    queryKey: [\"/api/me\"],\n    retry: false,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: { email: string; password: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/login\", credentials);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/me\"] });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (userData: { email: string; password: string; fullName: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/register\", userData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/me\"] });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      queryClient.clear();\n    },\n  });\n\n  const isAuthenticated = !!user;\n  const isLoggingIn = loginMutation.isPending;\n  const isRegistering = registerMutation.isPending;\n  const isLoggingOut = logoutMutation.isPending;\n\n  return {\n    user: (user as any)?.user as User | undefined,\n    isLoading,\n    error,\n    isAuthenticated,\n    isLoggingIn,\n    isRegistering,\n    isLoggingOut,\n    login: loginMutation.mutateAsync,\n    register: registerMutation.mutateAsync,\n    logout: logoutMutation.mutateAsync,\n  };\n}\n\nexport function useRequireAuth() {\n  const { user, isLoading } = useAuth();\n  \n  if (!isLoading && !user) {\n    window.location.href = \"/auth/login\";\n    return null;\n  }\n  \n  return { user, isLoading };\n}\n","size_bytes":1999},"client/src/lib/exportUtils.ts":{"content":"import jsPDF from 'jspdf';\nimport 'jspdf-autotable';\n\n// Extend jsPDF interface to include autoTable\ndeclare module 'jspdf' {\n  interface jsPDF {\n    autoTable: (options: any) => jsPDF;\n    lastAutoTable?: {\n      finalY: number;\n    };\n  }\n}\n\nexport interface ExportData {\n  keyMetrics: Array<{\n    title: string;\n    value: string;\n    change: string;\n    positive: boolean;\n  }>;\n  products: Array<{\n    id: string;\n    name: string;\n    isOptimized: boolean;\n    price?: number;\n    category?: string;\n  }>;\n  emailPerformance: {\n    delivered: string;\n    opened: string;\n    clicked: string;\n    converted: string;\n  };\n  smsPerformance: {\n    sent: string;\n    delivered: string;\n    clicked: string;\n    recovered: string;\n  };\n  seoPerformance: {\n    optimizedProducts: number;\n    rankingImprovement: string;\n    organicTraffic: string;\n    keywordRankings: string;\n  };\n}\n\nexport function generateCSV(data: ExportData): string {\n  const currentDate = new Date().toISOString().split('T')[0];\n  \n  let csv = `Zyra Analytics Report - ${currentDate}\\n\\n`;\n  \n  // Key Metrics Section\n  csv += \"KEY METRICS\\n\";\n  csv += \"Metric,Value,Change,Trend\\n\";\n  data.keyMetrics.forEach(metric => {\n    csv += `\"${metric.title}\",\"${metric.value}\",\"${metric.change}\",\"${metric.positive ? 'Positive' : 'Negative'}\"\\n`;\n  });\n  \n  csv += \"\\nPRODUCT PERFORMANCE\\n\";\n  csv += \"Product Name,Status,Optimization,Performance\\n\";\n  data.products.forEach(product => {\n    const optimizationStatus = product.isOptimized ? \"Optimized\" : \"Not optimized\";\n    const performance = product.isOptimized ? \"+32%\" : \"--\";\n    csv += `\"${product.name}\",\"Active\",\"${optimizationStatus}\",\"${performance}\"\\n`;\n  });\n  \n  csv += \"\\nEMAIL CAMPAIGN PERFORMANCE\\n\";\n  csv += \"Metric,Value\\n\";\n  csv += `\"Delivered\",\"${data.emailPerformance.delivered}\"\\n`;\n  csv += `\"Opened\",\"${data.emailPerformance.opened}\"\\n`;\n  csv += `\"Clicked\",\"${data.emailPerformance.clicked}\"\\n`;\n  csv += `\"Converted\",\"${data.emailPerformance.converted}\"\\n`;\n  \n  csv += \"\\nSMS CAMPAIGN PERFORMANCE\\n\";\n  csv += \"Metric,Value\\n\";\n  csv += `\"Sent\",\"${data.smsPerformance.sent}\"\\n`;\n  csv += `\"Delivered\",\"${data.smsPerformance.delivered}\"\\n`;\n  csv += `\"Clicked\",\"${data.smsPerformance.clicked}\"\\n`;\n  csv += `\"Recovered\",\"${data.smsPerformance.recovered}\"\\n`;\n  \n  csv += \"\\nSEO PERFORMANCE\\n\";\n  csv += \"Metric,Value\\n\";\n  csv += `\"Optimized Products\",\"${data.seoPerformance.optimizedProducts}\"\\n`;\n  csv += `\"Avg. Ranking Improvement\",\"${data.seoPerformance.rankingImprovement}\"\\n`;\n  csv += `\"Organic Traffic\",\"${data.seoPerformance.organicTraffic}\"\\n`;\n  csv += `\"Keyword Rankings\",\"${data.seoPerformance.keywordRankings}\"\\n`;\n  \n  return csv;\n}\n\nexport function generatePDF(data: ExportData): jsPDF {\n  const doc = new jsPDF();\n  const currentDate = new Date().toLocaleDateString();\n  const currentTime = new Date().toLocaleTimeString();\n  \n  // Header\n  doc.setFontSize(20);\n  doc.setTextColor(40, 44, 52);\n  doc.text('Zyra Analytics Report', 20, 25);\n  \n  doc.setFontSize(12);\n  doc.setTextColor(100, 100, 100);\n  doc.text(`Generated on: ${currentDate} at ${currentTime}`, 20, 35);\n  \n  let yPosition = 50;\n  \n  try {\n    // Key Metrics Table\n    doc.setFontSize(16);\n    doc.setTextColor(40, 44, 52);\n    doc.text('Key Performance Metrics', 20, yPosition);\n    yPosition += 10;\n    \n    const keyMetricsData = data.keyMetrics.map(metric => [\n      metric.title,\n      metric.value,\n      metric.change,\n      metric.positive ? 'Positive' : 'Negative'\n    ]);\n    \n    doc.autoTable({\n      startY: yPosition,\n      head: [['Metric', 'Value', 'Change', 'Trend']],\n      body: keyMetricsData,\n      theme: 'grid',\n      headStyles: { fillColor: [59, 130, 246] },\n      styles: { fontSize: 10 },\n      margin: { left: 20, right: 20 }\n    });\n    \n    yPosition = doc.lastAutoTable?.finalY ? doc.lastAutoTable.finalY + 20 : yPosition + 80;\n    \n    // Product Performance Table\n    doc.setFontSize(16);\n    doc.setTextColor(40, 44, 52);\n    doc.text('Product Performance', 20, yPosition);\n    yPosition += 10;\n    \n    const productData = data.products.length > 0 ? data.products.map(product => [\n      product.name,\n      'Active',\n      product.isOptimized ? 'Optimized' : 'Not optimized',\n      product.isOptimized ? '+32%' : '--'\n    ]) : [['No products available', '--', '--', '--']];\n    \n    doc.autoTable({\n      startY: yPosition,\n      head: [['Product Name', 'Status', 'Optimization', 'Performance']],\n      body: productData,\n      theme: 'grid',\n      headStyles: { fillColor: [59, 130, 246] },\n      styles: { fontSize: 10 },\n      margin: { left: 20, right: 20 }\n    });\n    \n    yPosition = doc.lastAutoTable?.finalY ? doc.lastAutoTable.finalY + 20 : yPosition + 80;\n    \n    // Check if we need a new page\n    if (yPosition > 240) {\n      doc.addPage();\n      yPosition = 20;\n    }\n    \n    // Campaign Performance Section\n    doc.setFontSize(16);\n    doc.setTextColor(40, 44, 52);\n    doc.text('Campaign Performance', 20, yPosition);\n    yPosition += 10;\n    \n    // Email Performance\n    doc.setFontSize(14);\n    doc.text('Email Campaigns', 20, yPosition);\n    yPosition += 5;\n    \n    const emailData = [\n      ['Delivered', data.emailPerformance.delivered],\n      ['Opened', data.emailPerformance.opened],\n      ['Clicked', data.emailPerformance.clicked],\n      ['Converted', data.emailPerformance.converted]\n    ];\n    \n    doc.autoTable({\n      startY: yPosition,\n      head: [['Metric', 'Value']],\n      body: emailData,\n      theme: 'grid',\n      headStyles: { fillColor: [34, 197, 94] },\n      styles: { fontSize: 10 },\n      margin: { left: 20, right: 100 }\n    });\n    \n    yPosition = doc.lastAutoTable?.finalY ? doc.lastAutoTable.finalY + 15 : yPosition + 60;\n    \n    // SMS Performance\n    doc.setFontSize(14);\n    doc.text('SMS Campaigns', 20, yPosition);\n    yPosition += 5;\n    \n    const smsData = [\n      ['Sent', data.smsPerformance.sent],\n      ['Delivered', data.smsPerformance.delivered],\n      ['Clicked', data.smsPerformance.clicked],\n      ['Recovered', data.smsPerformance.recovered]\n    ];\n    \n    doc.autoTable({\n      startY: yPosition,\n      head: [['Metric', 'Value']],\n      body: smsData,\n      theme: 'grid',\n      headStyles: { fillColor: [168, 85, 247] },\n      styles: { fontSize: 10 },\n      margin: { left: 20, right: 100 }\n    });\n    \n    yPosition = doc.lastAutoTable?.finalY ? doc.lastAutoTable.finalY + 15 : yPosition + 60;\n    \n    // SEO Performance\n    doc.setFontSize(14);\n    doc.text('SEO Performance', 20, yPosition);\n    yPosition += 5;\n    \n    const seoData = [\n      ['Optimized Products', data.seoPerformance.optimizedProducts.toString()],\n      ['Avg. Ranking Improvement', data.seoPerformance.rankingImprovement],\n      ['Organic Traffic', data.seoPerformance.organicTraffic],\n      ['Keyword Rankings', data.seoPerformance.keywordRankings]\n    ];\n    \n    doc.autoTable({\n      startY: yPosition,\n      head: [['Metric', 'Value']],\n      body: seoData,\n      theme: 'grid',\n      headStyles: { fillColor: [249, 115, 22] },\n      styles: { fontSize: 10 },\n      margin: { left: 20, right: 100 }\n    });\n    \n  } catch (error) {\n    console.error('PDF generation error:', error);\n    // Add error message to PDF\n    doc.setFontSize(12);\n    doc.setTextColor(255, 0, 0);\n    doc.text('Error generating detailed report. Basic information included.', 20, yPosition);\n  }\n  \n  // Footer\n  const pageCount = doc.getNumberOfPages();\n  for (let i = 1; i <= pageCount; i++) {\n    doc.setPage(i);\n    doc.setFontSize(10);\n    doc.setTextColor(150, 150, 150);\n    doc.text(`Page ${i} of ${pageCount} | Zyra Analytics Report`, 20, doc.internal.pageSize.height - 10);\n  }\n  \n  return doc;\n}\n\nexport function downloadFile(content: string | jsPDF, filename: string, type: 'csv' | 'pdf'): void {\n  if (type === 'csv') {\n    const blob = new Blob([content as string], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', filename);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  } else if (type === 'pdf') {\n    (content as jsPDF).save(filename);\n  }\n}\n\nexport function getExportFilename(format: 'csv' | 'pdf'): string {\n  const currentDate = new Date().toISOString().split('T')[0].replace(/-/g, '');\n  return `Zyra_Report_${currentDate}.${format}`;\n}","size_bytes":8490},"client/src/lib/openai.ts":{"content":"import { apiRequest } from \"./queryClient\";\n\nexport interface ProductDescriptionRequest {\n  productName: string;\n  category: string;\n  features: string;\n  audience: string;\n  brandVoice: \"sales\" | \"seo\" | \"casual\";\n}\n\nexport interface SEOOptimizationRequest {\n  currentTitle: string;\n  keywords: string;\n  currentMeta: string;\n  category: string;\n}\n\nexport interface ProductDescriptionResponse {\n  description: string;\n}\n\nexport interface SEOOptimizationResponse {\n  optimizedTitle: string;\n  optimizedMeta: string;\n  keywords: string[];\n  seoScore: number;\n}\n\n/**\n * Generate AI-powered product descriptions using OpenAI GPT-5\n */\nexport async function generateProductDescription(\n  request: ProductDescriptionRequest\n): Promise<ProductDescriptionResponse> {\n  try {\n    const response = await apiRequest(\"POST\", \"/api/generate-description\", request);\n    const result = await response.json();\n    \n    if (!result.description) {\n      throw new Error(\"No description returned from AI service\");\n    }\n    \n    return result;\n  } catch (error) {\n    console.error(\"Failed to generate product description:\", error);\n    throw new Error(\"Failed to generate product description. Please try again.\");\n  }\n}\n\n/**\n * Optimize SEO using AI-powered analysis\n */\nexport async function optimizeSEO(\n  request: SEOOptimizationRequest\n): Promise<SEOOptimizationResponse> {\n  try {\n    const response = await apiRequest(\"POST\", \"/api/optimize-seo\", request);\n    const result = await response.json();\n    \n    if (!result.optimizedTitle || !result.optimizedMeta) {\n      throw new Error(\"Incomplete optimization result from AI service\");\n    }\n    \n    return result;\n  } catch (error) {\n    console.error(\"Failed to optimize SEO:\", error);\n    throw new Error(\"Failed to optimize SEO. Please try again.\");\n  }\n}\n\n/**\n * Generate AI-powered alt text for images\n */\nexport async function generateAltText(imageBase64: string): Promise<string> {\n  try {\n    // This would integrate with OpenAI's vision capabilities\n    // For now, return a placeholder implementation\n    throw new Error(\"Alt text generation not yet implemented\");\n  } catch (error) {\n    console.error(\"Failed to generate alt text:\", error);\n    throw new Error(\"Failed to generate alt text. Please try again.\");\n  }\n}\n\n/**\n * Analyze sentiment of product descriptions\n */\nexport async function analyzeSentiment(text: string): Promise<{\n  rating: number;\n  confidence: number;\n}> {\n  try {\n    // This would use OpenAI for sentiment analysis\n    // For now, return a placeholder implementation  \n    throw new Error(\"Sentiment analysis not yet implemented\");\n  } catch (error) {\n    console.error(\"Failed to analyze sentiment:\", error);\n    throw new Error(\"Failed to analyze sentiment. Please try again.\");\n  }\n}\n\n/**\n * Get AI-powered product optimization suggestions\n */\nexport async function getOptimizationSuggestions(productId: string): Promise<{\n  suggestions: string[];\n  priority: \"low\" | \"medium\" | \"high\";\n}> {\n  try {\n    // This would analyze the product and provide optimization suggestions\n    // For now, return a placeholder implementation\n    throw new Error(\"Optimization suggestions not yet implemented\");\n  } catch (error) {\n    console.error(\"Failed to get optimization suggestions:\", error);\n    throw new Error(\"Failed to get optimization suggestions. Please try again.\");\n  }\n}\n","size_bytes":3356},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/auth.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Zap } from \"lucide-react\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\nconst registerSchema = loginSchema.extend({\n  fullName: z.string().min(2, \"Full name must be at least 2 characters\"),\n  terms: z.boolean().refine(val => val, \"You must agree to the terms\"),\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\ntype RegisterForm = z.infer<typeof registerSchema>;\n\nexport default function Auth() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [mode, setMode] = useState<'login' | 'register'>('login');\n\n  const loginForm = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: { email: \"\", password: \"\" },\n  });\n\n  const registerForm = useForm<RegisterForm>({\n    resolver: zodResolver(registerSchema), \n    defaultValues: { email: \"\", password: \"\", fullName: \"\", terms: false },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginForm) => {\n      const response = await apiRequest(\"POST\", \"/api/login\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      // Immediately update the auth cache to prevent redirect issues\n      window.location.href = \"/dashboard\";\n      toast({ title: \"Welcome back!\", description: \"Successfully logged in.\" });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message || \"Invalid email or password\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: RegisterForm) => {\n      const { terms, ...registerData } = data;\n      const response = await apiRequest(\"POST\", \"/api/register\", registerData);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      // Immediately redirect to prevent auth timing issues\n      window.location.href = \"/dashboard\";\n      toast({ title: \"Welcome to Zyra!\", description: \"Your account has been created.\" });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message || \"Failed to create account\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onLoginSubmit = (data: LoginForm) => {\n    loginMutation.mutate(data);\n  };\n\n  const onRegisterSubmit = (data: RegisterForm) => {\n    registerMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center px-4 sm:px-6 py-8 sm:py-12\">\n      <div className=\"max-w-sm sm:max-w-md w-full\">\n        <Card className=\"gradient-card border-0\" data-testid=\"card-auth\">\n          <CardContent className=\"p-6 sm:p-8\">\n            <div className=\"text-center mb-6 sm:mb-8\">\n              <div className=\"w-12 h-12 sm:w-16 sm:h-16 bg-gradient-to-br from-primary to-accent rounded-lg flex items-center justify-center mx-auto mb-3 sm:mb-4\">\n                <Zap className=\"w-6 h-6 sm:w-8 sm:h-8 text-primary-foreground\" />\n              </div>\n              <h2 className=\"text-2xl sm:text-3xl font-bold\" data-testid=\"text-auth-title\">\n                {mode === 'login' ? 'Welcome Back' : 'Get Started'}\n              </h2>\n              <p className=\"text-sm sm:text-base text-muted-foreground\" data-testid=\"text-auth-subtitle\">\n                {mode === 'login' ? 'Sign in to your Zyra account' : 'Create your free Zyra account'}\n              </p>\n            </div>\n\n            {mode === 'login' ? (\n              <form onSubmit={loginForm.handleSubmit(onLoginSubmit)} className=\"space-y-4 sm:space-y-6\">\n                <div>\n                  <Label htmlFor=\"email\" className=\"text-sm sm:text-base\">Email</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    className=\"form-input mt-1 sm:mt-2 text-sm sm:text-base\"\n                    placeholder=\"Enter your email\"\n                    {...loginForm.register(\"email\")}\n                    data-testid=\"input-email\"\n                  />\n                  {loginForm.formState.errors.email && (\n                    <p className=\"text-destructive text-xs sm:text-sm mt-1\">{loginForm.formState.errors.email.message}</p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"password\" className=\"text-sm sm:text-base\">Password</Label>\n                  <Input\n                    id=\"password\"\n                    type=\"password\"\n                    className=\"form-input mt-1 sm:mt-2 text-sm sm:text-base\"\n                    placeholder=\"Enter your password\"\n                    {...loginForm.register(\"password\")}\n                    data-testid=\"input-password\"\n                  />\n                  {loginForm.formState.errors.password && (\n                    <p className=\"text-destructive text-xs sm:text-sm mt-1\">{loginForm.formState.errors.password.message}</p>\n                  )}\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox id=\"remember\" />\n                    <Label htmlFor=\"remember\" className=\"text-xs sm:text-sm text-muted-foreground\">Remember me</Label>\n                  </div>\n                  <button type=\"button\" className=\"text-xs sm:text-sm text-primary hover:underline\">\n                    Forgot password?\n                  </button>\n                </div>\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full gradient-button text-sm sm:text-base py-2 sm:py-3\"\n                  disabled={loginMutation.isPending}\n                  data-testid=\"button-login\"\n                >\n                  {loginMutation.isPending ? \"Signing In...\" : \"Sign In\"}\n                </Button>\n              </form>\n            ) : (\n              <form onSubmit={registerForm.handleSubmit(onRegisterSubmit)} className=\"space-y-4 sm:space-y-6\">\n                <div>\n                  <Label htmlFor=\"fullName\" className=\"text-sm sm:text-base\">Full Name</Label>\n                  <Input\n                    id=\"fullName\"\n                    type=\"text\"\n                    className=\"form-input mt-1 sm:mt-2 text-sm sm:text-base\"\n                    placeholder=\"Enter your full name\"\n                    {...registerForm.register(\"fullName\")}\n                    data-testid=\"input-fullname\"\n                  />\n                  {registerForm.formState.errors.fullName && (\n                    <p className=\"text-destructive text-xs sm:text-sm mt-1\">{registerForm.formState.errors.fullName.message}</p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"email\" className=\"text-sm sm:text-base\">Email</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    className=\"form-input mt-1 sm:mt-2 text-sm sm:text-base\"\n                    placeholder=\"Enter your email\"\n                    {...registerForm.register(\"email\")}\n                    data-testid=\"input-email\"\n                  />\n                  {registerForm.formState.errors.email && (\n                    <p className=\"text-destructive text-xs sm:text-sm mt-1\">{registerForm.formState.errors.email.message}</p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"password\" className=\"text-sm sm:text-base\">Password</Label>\n                  <Input\n                    id=\"password\"\n                    type=\"password\"\n                    className=\"form-input mt-1 sm:mt-2 text-sm sm:text-base\"\n                    placeholder=\"Create a password\"\n                    {...registerForm.register(\"password\")}\n                    data-testid=\"input-password\"\n                  />\n                  {registerForm.formState.errors.password && (\n                    <p className=\"text-destructive text-xs sm:text-sm mt-1\">{registerForm.formState.errors.password.message}</p>\n                  )}\n                </div>\n\n                <div className=\"flex items-start space-x-2\">\n                  <Controller\n                    name=\"terms\"\n                    control={registerForm.control}\n                    render={({ field }) => (\n                      <Checkbox \n                        id=\"terms\"\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        className=\"mt-0.5\"\n                        data-testid=\"checkbox-terms\"\n                      />\n                    )}\n                  />\n                  <Label htmlFor=\"terms\" className=\"text-xs sm:text-sm text-muted-foreground leading-relaxed\">\n                    I agree to the <button type=\"button\" className=\"text-primary hover:underline\">Terms of Service</button> and <button type=\"button\" className=\"text-primary hover:underline\">Privacy Policy</button>\n                  </Label>\n                </div>\n                {registerForm.formState.errors.terms && (\n                  <p className=\"text-destructive text-xs sm:text-sm\">{registerForm.formState.errors.terms.message}</p>\n                )}\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full gradient-button text-sm sm:text-base py-2 sm:py-3\"\n                  disabled={registerMutation.isPending}\n                  data-testid=\"button-register\"\n                >\n                  {registerMutation.isPending ? \"Creating Account...\" : \"Start Free Trial\"}\n                </Button>\n              </form>\n            )}\n\n            <div className=\"mt-4 sm:mt-6 text-center\">\n              <p className=\"text-xs sm:text-sm text-muted-foreground\">\n                {mode === 'login' ? \"Don't have an account? \" : \"Already have an account? \"}\n                <button \n                  onClick={() => setMode(mode === 'login' ? 'register' : 'login')}\n                  className=\"text-primary hover:underline\"\n                  data-testid=\"button-switch-mode\"\n                >\n                  {mode === 'login' ? 'Sign up' : 'Sign in'}\n                </button>\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10925},"client/src/pages/billing.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  CreditCard, \n  Calendar, \n  Download, \n  ChevronRight, \n  Check, \n  Crown, \n  Zap,\n  Globe,\n  Shield,\n  Star,\n  TrendingUp,\n  Building,\n  ArrowUp,\n  ArrowDown,\n  ExternalLink,\n  Plus\n} from \"lucide-react\";\n\ninterface SubscriptionPlan {\n  id: string;\n  planName: string;\n  price: number;\n  description: string;\n  features: string[];\n  limits: {\n    products: number;\n    emails: number;\n    sms: number;\n    aiGenerations: number;\n    seoOptimizations: number;\n  };\n  currency: string;\n  interval: string;\n}\n\ninterface UserSubscription {\n  id: string;\n  planId: string;\n  status: string;\n  currentPeriodStart: string;\n  currentPeriodEnd: string;\n  cancelAtPeriodEnd: boolean;\n}\n\ninterface Invoice {\n  id: string;\n  amount: number;\n  currency: string;\n  status: string;\n  invoiceNumber: string;\n  invoiceUrl: string;\n  pdfUrl: string;\n  createdAt: string;\n  paidAt: string;\n}\n\ninterface PaymentMethod {\n  id: string;\n  type: string;\n  cardBrand: string;\n  cardLast4: string;\n  cardExpMonth: number;\n  cardExpYear: number;\n  isDefault: boolean;\n}\n\ninterface UsageStats {\n  productsCount: number;\n  emailsSent: number;\n  emailsRemaining: number;\n  smsSent: number;\n  smsRemaining: number;\n  aiGenerationsUsed: number;\n  seoOptimizationsUsed: number;\n}\n\nconst planIcons = {\n  \"Forever Free\": <Zap className=\"w-6 h-6\" style={{ color: '#C1E8FF' }} />,\n  \"Starter\": <TrendingUp className=\"w-6 h-6\" style={{ color: '#C1E8FF' }} />,\n  \"Pro\": <Crown className=\"w-6 h-6\" style={{ color: '#C1E8FF' }} />,\n  \"Growth\": <Globe className=\"w-6 h-6\" style={{ color: '#C1E8FF' }} />,\n  \"Enterprise\": <Building className=\"w-6 h-6\" style={{ color: '#C1E8FF' }} />\n};\n\nexport default function BillingPage() {\n  const { toast } = useToast();\n  const [selectedPlan, setSelectedPlan] = useState<string | null>(null);\n\n  // Fetch subscription plans\n  const { data: plans = [], isLoading: plansLoading } = useQuery<SubscriptionPlan[]>({\n    queryKey: ['/api/subscription-plans'],\n  });\n\n  // Fetch current subscription\n  const { data: currentSubscription, isLoading: subscriptionLoading } = useQuery<UserSubscription>({\n    queryKey: ['/api/subscription/current'],\n  });\n\n  // Fetch usage stats\n  const { data: usageStats, isLoading: usageLoading } = useQuery<UsageStats>({\n    queryKey: ['/api/usage-stats'],\n  });\n\n  // Fetch invoices\n  const { data: invoices = [], isLoading: invoicesLoading } = useQuery<Invoice[]>({\n    queryKey: ['/api/invoices'],\n  });\n\n  // Fetch payment methods\n  const { data: paymentMethods = [], isLoading: paymentMethodsLoading } = useQuery<PaymentMethod[]>({\n    queryKey: ['/api/payment-methods'],\n  });\n\n  // Upgrade/downgrade mutation\n  const changePlanMutation = useMutation({\n    mutationFn: async (planId: string) => {\n      return apiRequest('/api/subscription/change-plan', 'POST', { planId });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/subscription/current'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/usage-stats'] });\n      toast({\n        title: \"Plan Updated\",\n        description: \"Your subscription plan has been successfully updated.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update subscription plan.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Add payment method mutation\n  const addPaymentMethodMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest('/api/payment-methods/add', 'POST');\n    },\n    onSuccess: (data: any) => {\n      // Redirect to Stripe setup page\n      if (data.setupUrl) {\n        window.location.href = data.setupUrl;\n      } else {\n        queryClient.invalidateQueries({ queryKey: ['/api/payment-methods'] });\n        toast({\n          title: \"Success\",\n          description: \"Payment method added successfully.\",\n        });\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to add payment method.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const currentPlan = plans.find((plan: SubscriptionPlan) => \n    plan.id === currentSubscription?.planId\n  );\n\n  const getUsagePercentage = (used: number, limit: number) => {\n    if (limit === -1) return 0; // Unlimited\n    return Math.min((used / limit) * 100, 100);\n  };\n\n  const formatPrice = (price: number, currency: string = 'USD') => {\n    // Convert cents to dollars\n    const priceInDollars = price / 100;\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency,\n    }).format(priceInDollars);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n    });\n  };\n\n  if (plansLoading || subscriptionLoading || usageLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-[#C1E8FF] mx-auto\"></div>\n          <p className=\"mt-4 text-slate-300\">Loading billing information...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen p-6\" style={{ background: 'linear-gradient(135deg, #021024 0%, #052659 50%, #5483B3 100%)' }}>\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        {/* Header */}\n        <div className=\"text-center space-y-4\">\n          <h1 className=\"text-4xl font-bold text-white\">\n            Subscription & Billing\n          </h1>\n          <p className=\"text-xl text-slate-300 max-w-2xl mx-auto\">\n            Manage your subscription, billing history, and payment methods\n          </p>\n        </div>\n\n        {/* Current Plan Overview */}\n        {currentPlan && (\n          <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700/50\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  {planIcons[currentPlan.planName as keyof typeof planIcons]}\n                  <div>\n                    <CardTitle className=\"text-white text-2xl\" data-testid=\"text-current-plan\">\n                      {currentPlan.planName}\n                    </CardTitle>\n                    <CardDescription className=\"text-slate-300\">\n                      {currentPlan.description}\n                    </CardDescription>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"text-3xl font-bold text-white\" data-testid=\"text-current-price\">\n                    {formatPrice(currentPlan.price)}\n                    <span className=\"text-lg text-slate-300\">/{currentPlan.interval}</span>\n                  </div>\n                  {currentSubscription?.status && (\n                    <Badge \n                      variant={currentSubscription.status === 'active' ? 'default' : 'secondary'}\n                      className=\"capitalize mt-2\"\n                      data-testid=\"badge-subscription-status\"\n                    >\n                      {currentSubscription.status}\n                    </Badge>\n                  )}\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {usageStats && (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-slate-300\">Products</span>\n                      <span className=\"text-white\" data-testid=\"text-products-usage\">\n                        {usageStats.productsCount}\n                        {currentPlan.limits.products !== -1 && `/${currentPlan.limits.products}`}\n                      </span>\n                    </div>\n                    <Progress \n                      value={getUsagePercentage(usageStats.productsCount, currentPlan.limits.products)} \n                      className=\"h-2\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-slate-300\">Emails</span>\n                      <span className=\"text-white\" data-testid=\"text-emails-usage\">\n                        {usageStats.emailsSent}\n                        {currentPlan.limits.emails !== -1 && `/${currentPlan.limits.emails}`}\n                      </span>\n                    </div>\n                    <Progress \n                      value={getUsagePercentage(usageStats.emailsSent, currentPlan.limits.emails)} \n                      className=\"h-2\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-slate-300\">SMS</span>\n                      <span className=\"text-white\" data-testid=\"text-sms-usage\">\n                        {usageStats.smsSent}\n                        {currentPlan.limits.sms !== -1 && `/${currentPlan.limits.sms}`}\n                      </span>\n                    </div>\n                    <Progress \n                      value={getUsagePercentage(usageStats.smsSent, currentPlan.limits.sms)} \n                      className=\"h-2\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-slate-300\">AI Generations</span>\n                      <span className=\"text-white\" data-testid=\"text-ai-usage\">\n                        {usageStats.aiGenerationsUsed}\n                        {currentPlan.limits.aiGenerations !== -1 && `/${currentPlan.limits.aiGenerations}`}\n                      </span>\n                    </div>\n                    <Progress \n                      value={getUsagePercentage(usageStats.aiGenerationsUsed, currentPlan.limits.aiGenerations)} \n                      className=\"h-2\"\n                    />\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Tabs for different sections */}\n        <Tabs defaultValue=\"plans\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-4 bg-[#041b3e]\">\n            <TabsTrigger value=\"plans\" data-testid=\"tab-plans\">Plans</TabsTrigger>\n            <TabsTrigger value=\"billing\" data-testid=\"tab-billing\">Billing History</TabsTrigger>\n            <TabsTrigger value=\"payment\" data-testid=\"tab-payment\">Payment Methods</TabsTrigger>\n            <TabsTrigger value=\"settings\" data-testid=\"tab-settings\">Settings</TabsTrigger>\n          </TabsList>\n\n          {/* Plan Selection */}\n          <TabsContent value=\"plans\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {plans.map((plan: SubscriptionPlan) => {\n                const isCurrentPlan = plan.id === currentSubscription?.planId;\n                const isUpgrade = plan.price > (currentPlan?.price || 0);\n                const isDowngrade = plan.price < (currentPlan?.price || 0);\n                \n                return (\n                  <Card \n                    key={plan.id} \n                    className={`relative bg-gradient-to-br from-[#021024] to-[#052659] rounded-2xl transition-all duration-300 hover:scale-105 border-slate-700/50 hover:shadow-cyan-500/30 ${\n                      isCurrentPlan \n                        ? 'border-[#C1E8FF] shadow-cyan-500/50'\n                        : ''\n                    }`}\n                    data-testid={`card-plan-${plan.planName.toLowerCase().replace(' ', '-')}`}\n                  >\n                    {isCurrentPlan && (\n                      <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\n                        <Badge className=\"bg-[#C1E8FF] text-indigo-900\">Current Plan</Badge>\n                      </div>\n                    )}\n                    <CardHeader>\n                      <div className=\"flex items-center space-x-3\">\n                        {planIcons[plan.planName as keyof typeof planIcons]}\n                        <div>\n                          <CardTitle className=\"text-white\" data-testid={`text-plan-name-${plan.planName.toLowerCase().replace(' ', '-')}`}>\n                            {plan.planName}\n                          </CardTitle>\n                          <CardDescription className=\"text-slate-300\">\n                            {plan.description}\n                          </CardDescription>\n                        </div>\n                      </div>\n                      <div className=\"text-3xl font-bold text-white\" data-testid={`text-plan-price-${plan.planName.toLowerCase().replace(' ', '-')}`}>\n                        {formatPrice(plan.price)}\n                        <span className=\"text-lg text-slate-300\">/{plan.interval}</span>\n                      </div>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div className=\"space-y-2\">\n                        {plan.features.map((feature, index) => (\n                          <div key={index} className=\"flex items-center space-x-2 text-sm text-slate-300\">\n                            <Check className=\"w-4 h-4 text-green-400 flex-shrink-0\" />\n                            <span>{feature}</span>\n                          </div>\n                        ))}\n                      </div>\n                      \n                      {!isCurrentPlan && (\n                        <Button\n                          onClick={() => changePlanMutation.mutate(plan.id)}\n                          disabled={changePlanMutation.isPending}\n                          className=\"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 h-10 px-4 py-2 w-full font-medium transition-all duration-300 hover:scale-105 hover:bg-green-700 text-[#000000] bg-[#b5e1fe]\"\n                          data-testid={`button-change-plan-${plan.planName.toLowerCase().replace(' ', '-')}`}\n                        >\n                          {isUpgrade && <ArrowUp className=\"w-4 h-4 mr-2\" />}\n                          {isDowngrade && <ArrowDown className=\"w-4 h-4 mr-2\" />}\n                          {changePlanMutation.isPending ? \"Processing...\" : \n                           isUpgrade ? \"Upgrade\" : isDowngrade ? \"Downgrade\" : \"Select Plan\"}\n                        </Button>\n                      )}\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          </TabsContent>\n\n          {/* Billing History */}\n          <TabsContent value=\"billing\" className=\"space-y-6\">\n            <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700/50\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center\">\n                  <Calendar className=\"w-5 h-5 mr-2\" style={{ color: '#C1E8FF' }} />\n                  Billing History\n                </CardTitle>\n                <CardDescription className=\"text-slate-300\">\n                  View and download your invoices and receipts\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {invoicesLoading ? (\n                  <div className=\"text-center py-8\">\n                    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-[#C1E8FF] mx-auto\"></div>\n                    <p className=\"mt-2 text-slate-300\">Loading invoices...</p>\n                  </div>\n                ) : invoices.length === 0 ? (\n                  <div className=\"text-center py-8 text-slate-300\">\n                    <Calendar className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                    <p>No invoices yet</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {invoices.map((invoice) => (\n                      <div \n                        key={invoice.id} \n                        className=\"flex items-center justify-between p-4 bg-slate-800/30 rounded-lg\"\n                        data-testid={`invoice-${invoice.id}`}\n                      >\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"w-10 h-10 bg-slate-700 rounded-full flex items-center justify-center\">\n                            <CreditCard className=\"w-5 h-5\" style={{ color: '#C1E8FF' }} />\n                          </div>\n                          <div>\n                            <p className=\"text-white font-medium\" data-testid={`text-invoice-number-${invoice.id}`}>\n                              Invoice #{invoice.invoiceNumber}\n                            </p>\n                            <p className=\"text-sm text-slate-300\" data-testid={`text-invoice-date-${invoice.id}`}>\n                              {formatDate(invoice.createdAt)}\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"text-right\">\n                            <p className=\"text-white font-medium\" data-testid={`text-invoice-amount-${invoice.id}`}>\n                              {formatPrice(invoice.amount, invoice.currency)}\n                            </p>\n                            <Badge \n                              variant={invoice.status === 'paid' ? 'default' : 'secondary'}\n                              className=\"capitalize\"\n                              data-testid={`badge-invoice-status-${invoice.id}`}\n                            >\n                              {invoice.status}\n                            </Badge>\n                          </div>\n                          {invoice.pdfUrl && (\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => window.open(invoice.pdfUrl, '_blank')}\n                              data-testid={`button-download-invoice-${invoice.id}`}\n                            >\n                              <Download className=\"w-4 h-4 mr-2\" />\n                              PDF\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Payment Methods */}\n          <TabsContent value=\"payment\" className=\"space-y-6\">\n            <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700/50\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <CardTitle className=\"text-white flex items-center\">\n                      <CreditCard className=\"w-5 h-5 mr-2\" style={{ color: '#C1E8FF' }} />\n                      Payment Methods\n                    </CardTitle>\n                    <CardDescription className=\"text-slate-300\">\n                      Manage your payment methods and billing information\n                    </CardDescription>\n                  </div>\n                  <Button\n                    onClick={() => addPaymentMethodMutation.mutate()}\n                    disabled={addPaymentMethodMutation.isPending}\n                    className=\"bg-[#C1E8FF] hover:bg-[#A5D8FF] text-indigo-900\"\n                    data-testid=\"button-add-payment-method\"\n                  >\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Add Payment Method\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {paymentMethodsLoading ? (\n                  <div className=\"text-center py-8\">\n                    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-[#C1E8FF] mx-auto\"></div>\n                    <p className=\"mt-2 text-slate-300\">Loading payment methods...</p>\n                  </div>\n                ) : paymentMethods.length === 0 ? (\n                  <div className=\"text-center py-8 text-slate-300\">\n                    <CreditCard className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                    <p>No payment methods added</p>\n                    <p className=\"text-sm mt-2\">Add a payment method to start using paid features</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {paymentMethods.map((method) => (\n                      <div \n                        key={method.id} \n                        className=\"flex items-center justify-between p-4 bg-slate-800/30 rounded-lg\"\n                        data-testid={`payment-method-${method.id}`}\n                      >\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"w-10 h-10 bg-slate-700 rounded-full flex items-center justify-center\">\n                            <CreditCard className=\"w-5 h-5\" style={{ color: '#C1E8FF' }} />\n                          </div>\n                          <div>\n                            <p className=\"text-white font-medium capitalize\" data-testid={`text-card-brand-${method.id}`}>\n                              {method.cardBrand} •••• {method.cardLast4}\n                            </p>\n                            <p className=\"text-sm text-slate-300\" data-testid={`text-card-expiry-${method.id}`}>\n                              Expires {method.cardExpMonth.toString().padStart(2, '0')}/{method.cardExpYear}\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          {method.isDefault && (\n                            <Badge className=\"bg-green-600\" data-testid={`badge-default-${method.id}`}>\n                              Default\n                            </Badge>\n                          )}\n                          <Button variant=\"outline\" size=\"sm\" data-testid={`button-manage-payment-${method.id}`}>\n                            Manage\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Settings */}\n          <TabsContent value=\"settings\" className=\"space-y-6\">\n            <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700/50\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center\">\n                  <Shield className=\"w-5 h-5 mr-2\" style={{ color: '#C1E8FF' }} />\n                  Subscription Settings\n                </CardTitle>\n                <CardDescription className=\"text-slate-300\">\n                  Manage your subscription preferences and billing settings\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {currentSubscription && (\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between p-4 bg-slate-800/30 rounded-lg\">\n                      <div>\n                        <p className=\"text-white font-medium\">Billing Cycle</p>\n                        <p className=\"text-sm text-slate-300\">\n                          Next billing date: {formatDate(currentSubscription.currentPeriodEnd)}\n                        </p>\n                      </div>\n                      <Badge variant=\"outline\">\n                        {currentPlan?.interval || 'monthly'}\n                      </Badge>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between p-4 bg-slate-800/30 rounded-lg\">\n                      <div>\n                        <p className=\"text-white font-medium\">Auto-renewal</p>\n                        <p className=\"text-sm text-slate-300\">\n                          {currentSubscription.cancelAtPeriodEnd \n                            ? 'Your subscription will not renew' \n                            : 'Your subscription will automatically renew'\n                          }\n                        </p>\n                      </div>\n                      <Button variant=\"outline\" size=\"sm\" data-testid=\"button-manage-renewal\">\n                        {currentSubscription.cancelAtPeriodEnd ? 'Resume' : 'Cancel'} Subscription\n                      </Button>\n                    </div>\n                  </div>\n                )}\n                \n                <div className=\"pt-6 border-t border-slate-700\">\n                  <h3 className=\"text-white font-medium mb-4\">Need Help?</h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <Button variant=\"outline\" className=\"justify-start\" data-testid=\"button-contact-support\">\n                      <ExternalLink className=\"w-4 h-4 mr-2\" />\n                      Contact Support\n                    </Button>\n                    <Button variant=\"outline\" className=\"justify-start\" data-testid=\"button-billing-portal\">\n                      <ExternalLink className=\"w-4 h-4 mr-2\" />\n                      Billing Portal\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":26818},"client/src/pages/dashboard.tsx":{"content":"import { useState, useEffect, useCallback, useRef } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { DashboardContentSkeleton } from \"@/components/ui/skeleton\";\nimport Sidebar from \"@/components/dashboard/sidebar\";\nimport AITools from \"@/components/dashboard/ai-tools\";\nimport AutomationTools from \"@/components/dashboard/automation-tools\";\nimport Campaigns from \"@/components/dashboard/campaigns\";\nimport GrowthDashboard from \"@/components/dashboard/growth-dashboard\";\nimport Settings from \"@/components/dashboard/settings\";\nimport Profile from \"@/components/dashboard/profile\";\nimport NotificationCenter from \"@/components/dashboard/notification-center\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useDashboard, useSkeletonLoader, useConnectionStatus } from \"@/hooks/useDashboard\";\nimport { useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Zap, TrendingUp, ShoppingCart, Eye, RotateCcw, Plus, Menu, User, LogOut, Settings as SettingsIcon } from \"lucide-react\";\n\nexport default function Dashboard() {\n  const { user, logout } = useAuth();\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  const [sidebarOpen, setSidebarOpen] = useState(true);\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Handle logout\n  const handleLogout = () => {\n    logout();\n    setLocation(\"/auth\");\n  };\n\n  \n\n  // Real-time dashboard data\n  const {\n    dashboardData,\n    formattedStats,\n    isLoading,\n    isInitialized,\n    trackToolAccess,\n    logActivity,\n    updateUsageStats,\n    lastUpdate,\n    isTrackingTool,\n  } = useDashboard();\n\n  // Skeleton loader with delay\n  const showSkeleton = useSkeletonLoader(isLoading, 300);\n\n  // Connection status monitoring\n  const { isOnline } = useConnectionStatus();\n\n  \n\n\n  // Handle responsive behavior - close sidebar on mobile by default\n  useEffect(() => {\n    const handleResize = () => {\n      if (window.innerWidth < 1024) {\n        setSidebarOpen(false);\n      } else {\n        setSidebarOpen(true);\n      }\n    };\n\n    handleResize(); // Check initial size\n    window.addEventListener('resize', handleResize);\n    \n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  // Generate stats from real-time data with icons\n  const stats = formattedStats.map((stat, index) => {\n    const iconMap = {\n      TrendingUp: <TrendingUp className=\"w-6 h-6\" />,\n      ShoppingCart: <ShoppingCart className=\"w-6 h-6\" />,\n      Eye: <Eye className=\"w-6 h-6\" />,\n      RotateCcw: <RotateCcw className=\"w-6 h-6\" />,\n    };\n    return {\n      ...stat,\n      icon: iconMap[stat.icon as keyof typeof iconMap] || <TrendingUp className=\"w-6 h-6\" />,\n    };\n  });\n\n  // Quick actions with optimistic UI updates\n  const handleToolNavigation = async (toolName: string, displayName: string) => {\n    // Optimistic UI update - navigate immediately\n    setActiveTab(toolName);\n    \n    // Track tool access in the background\n    trackToolAccess(toolName);\n    \n    // Log activity\n    logActivity(\n      \"tool_navigation\",\n      `Navigated to ${displayName}`,\n      toolName,\n      { timestamp: new Date().toISOString(), optimistic: true }\n    );\n    \n    // Update usage stats based on tool type\n    if (toolName === \"ai-tools\") {\n      updateUsageStats(\"aiGenerationsUsed\", 0); // Just tracking access, not usage\n    } else if (toolName === \"automate\") {\n      updateUsageStats(\"automationActionsUsed\", 0);\n    } else if (toolName === \"campaigns\") {\n      updateUsageStats(\"campaignsUsed\", 0);\n    }\n  };\n\n  const quickActions = [\n    {\n      icon: <Zap className=\"w-5 h-5\" />,\n      title: \"AI Product Generator\",\n      description: \"Generate compelling product descriptions in seconds\",\n      action: () => handleToolNavigation(\"ai-tools\", \"AI Tools\"),\n      primary: true,\n      toolName: \"ai-tools\",\n    },\n    {\n      icon: <TrendingUp className=\"w-5 h-5\" />,\n      title: \"Automation Tools\", \n      description: \"Streamline bulk operations and intelligent optimizations\",\n      action: () => handleToolNavigation(\"automate\", \"Automation Tools\"),\n      primary: false,\n      toolName: \"automate\",\n    },\n    {\n      icon: <ShoppingCart className=\"w-5 h-5\" />,\n      title: \"AI Campaigns\",\n      description: \"Automated email & SMS growth engine with AI targeting\",\n      action: () => handleToolNavigation(\"campaigns\", \"AI Campaigns\"),\n      primary: false,\n      toolName: \"campaigns\",\n    },\n  ];\n\n  // Format real-time activities\n  const activities = dashboardData?.activityLogs?.map((log) => {\n    const iconMap = {\n      \"tool_accessed\": <Zap className=\"w-5 h-5 text-primary\" />,\n      \"tool_navigation\": <TrendingUp className=\"w-5 h-5 text-chart-2\" />,\n      \"user_login\": <ShoppingCart className=\"w-5 h-5 text-chart-3\" />,\n      \"generated_product\": <Zap className=\"w-5 h-5 text-primary\" />,\n      \"optimized_seo\": <TrendingUp className=\"w-5 h-5 text-chart-2\" />,\n      \"sent_campaign\": <ShoppingCart className=\"w-5 h-5 text-chart-3\" />,\n    };\n\n    // Format time ago\n    const timeAgo = (dateString: string) => {\n      const now = new Date();\n      const activityTime = new Date(dateString);\n      const diffMs = now.getTime() - activityTime.getTime();\n      const diffMins = Math.floor(diffMs / (1000 * 60));\n      \n      if (diffMins < 1) return \"Just now\";\n      if (diffMins < 60) return `${diffMins} minutes ago`;\n      const diffHours = Math.floor(diffMins / 60);\n      if (diffHours < 24) return `${diffHours} hours ago`;\n      const diffDays = Math.floor(diffHours / 24);\n      return `${diffDays} days ago`;\n    };\n\n    return {\n      icon: iconMap[log.action as keyof typeof iconMap] || <Zap className=\"w-5 h-5 text-primary\" />,\n      description: log.description,\n      time: timeAgo(log.createdAt),\n      id: log.id,\n    };\n  }) || [\n    // Fallback activities if no real data\n    {\n      icon: <Zap className=\"w-5 h-5 text-primary\" />,\n      description: \"Dashboard initialized with real-time data\",\n      time: \"Just now\",\n      id: \"fallback-1\",\n    },\n  ];\n\n  const getPageTitle = () => {\n    const titles = {\n      overview: { title: \"Dashboard\", subtitle: \"Welcome back! Here's your store overview.\" },\n      \"ai-tools\": { title: \"AI Tools\", subtitle: \"AI-powered content generation and optimization hub\" },\n      \"automate\": { title: \"Automation Tools\", subtitle: \"Streamline your workflow with powerful automation features\" },\n      campaigns: { title: \"AI Email & SMS Growth Engine\", subtitle: \"Automate customer communications with intelligent campaigns\" },\n      products: { title: \"Products\", subtitle: \"Manage your product catalog\" },\n      profile: { title: \"Profile\", subtitle: \"Manage your account and subscription\" },\n      settings: { title: \"Settings\", subtitle: \"Configure your account and integrations\" },\n    };\n    return titles[activeTab as keyof typeof titles] || titles.overview;\n  };\n\n  const renderTabContent = () => {\n    switch (activeTab) {\n      case \"ai-tools\":\n        return <AITools />;\n      case \"automate\":\n        return <AutomationTools />;\n      case \"campaigns\":\n        return <Campaigns />;\n      case \"products\":\n        return (\n          <div className=\"text-center py-16\">\n            <ShoppingCart className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-2xl font-bold mb-2\" data-testid=\"text-products-title\">Product Management</h3>\n            <p className=\"text-muted-foreground mb-6\">Manage and optimize your product catalog</p>\n            <Button className=\"gradient-button\" data-testid=\"button-sync-shopify\">\n              <RotateCcw className=\"w-4 h-4 mr-2\" />\n              Sync from Shopify\n            </Button>\n          </div>\n        );\n      case \"profile\":\n        return <Profile />;\n      case \"settings\":\n        return <Settings />;\n      default:\n        return <GrowthDashboard />;\n    }\n  };\n\n  const pageTitle = getPageTitle();\n\n  return (\n    <div className=\"min-h-screen flex\">\n      <Sidebar \n        activeTab={activeTab} \n        onTabChange={setActiveTab} \n        user={user} \n        isOpen={sidebarOpen}\n        onClose={() => setSidebarOpen(false)}\n      />\n\n      {/* Main Content */}\n      <div className={`flex-1 transition-all duration-300 ease-in-out ${\n        sidebarOpen ? 'lg:ml-64' : 'ml-0'\n      }`}>\n        {/* Top Bar */}\n        <header className=\"bg-gradient-to-br from-[#021024] to-[#052659] backdrop-blur-sm border-b border-border px-4 sm:px-6 py-3 sm:py-4\">\n          <div className=\"flex items-center\">\n            {/* Left Section - Hamburger + Title */}\n            <div className=\"flex items-center space-x-2 sm:space-x-4 min-w-0 flex-1\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setSidebarOpen(!sidebarOpen)}\n                className=\"text-slate-200 hover:text-[#C1E8FF] hover:bg-white/10 transition-all duration-300 ease-in-out flex-shrink-0\"\n                data-testid=\"button-toggle-sidebar\"\n              >\n                <Menu className=\"w-4 h-4 sm:w-5 sm:h-5\" />\n              </Button>\n              <div className=\"min-w-0 flex-1\">\n                <h1 className=\"font-bold text-white text-base sm:text-lg lg:text-xl xl:text-2xl truncate\" data-testid=\"text-page-title\">{pageTitle.title}</h1>\n                <p className=\"text-slate-300 text-xs sm:text-sm lg:text-base truncate\" data-testid=\"text-page-subtitle\">{pageTitle.subtitle}</p>\n              </div>\n            </div>\n\n            \n\n            {/* Right Section - Notifications + Profile */}\n            <div className=\"flex items-center justify-end space-x-2 sm:space-x-4 flex-shrink-0\">\n              <NotificationCenter />\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button\n                    variant=\"ghost\"\n                    className=\"relative h-10 w-10 rounded-full text-slate-200 hover:text-[#C1E8FF] transition-all duration-300 ease-in-out\"\n                    data-testid=\"avatar-menu-trigger\"\n                  >\n                    <Avatar className=\"h-8 w-8\">\n                      <AvatarImage src=\"\" alt={user?.fullName || \"User\"} />\n                    </Avatar>\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent className=\"w-56 bg-gradient-to-br from-[#021024] to-[#052659] border-border/50 text-white\" align=\"end\" forceMount>\n                  <div className=\"flex items-center justify-start gap-2 p-2\">\n                    <div className=\"flex flex-col space-y-1 leading-none\">\n                      <p className=\"font-bold text-white text-sm\">{user?.fullName || \"User\"}</p>\n                      <p className=\"text-xs text-slate-300\">{user?.email}</p>\n                    </div>\n                  </div>\n                  <DropdownMenuSeparator className=\"bg-border/30\" />\n                  <DropdownMenuItem\n                    className=\"text-slate-200 hover:text-white hover:bg-white/10 focus:text-white focus:bg-white/10 cursor-pointer\"\n                    onClick={() => setActiveTab(\"profile\")}\n                    data-testid=\"menuitem-profile\"\n                  >\n                    <User className=\"mr-2 h-4 w-4\" />\n                    Profile\n                  </DropdownMenuItem>\n                  <DropdownMenuItem\n                    className=\"text-slate-200 hover:text-white hover:bg-white/10 focus:text-white focus:bg-white/10 cursor-pointer\"\n                    onClick={() => setActiveTab(\"settings\")}\n                    data-testid=\"menuitem-settings\"\n                  >\n                    <SettingsIcon className=\"mr-2 h-4 w-4\" />\n                    Settings\n                  </DropdownMenuItem>\n                  <DropdownMenuSeparator className=\"bg-border/30\" />\n                  <DropdownMenuItem\n                    className=\"text-red-300 hover:text-red-200 hover:bg-red-500/20 focus:text-red-200 focus:bg-red-500/20 cursor-pointer\"\n                    onClick={handleLogout}\n                    data-testid=\"menuitem-logout\"\n                  >\n                    <LogOut className=\"mr-2 h-4 w-4\" />\n                    Logout\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </div>\n          </div>\n        </header>\n\n        {/* Dashboard Content */}\n        <div className=\"p-4 sm:p-6\">\n          {showSkeleton && activeTab === \"overview\" ? (\n            <DashboardContentSkeleton />\n          ) : (\n            renderTabContent()\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":13056},"client/src/pages/landing.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Zap, Star, TrendingUp, ShoppingCart, Mail, Search, BarChart3, Cog, ArrowRight, Play, Check, Gift, Crown, Award } from \"lucide-react\";\nimport ResponsiveNavbar from \"@/components/responsive-navbar\";\n\nexport default function Landing() {\n  const features = [\n    {\n      icon: <Zap className=\"w-6 h-6\" />,\n      title: \"AI Product Descriptions\",\n      description: \"Generate compelling product descriptions in Sales, SEO, and Casual styles with one click.\"\n    },\n    {\n      icon: <Search className=\"w-6 h-6\" />,\n      title: \"SEO Optimization\", \n      description: \"Auto-generate SEO titles, meta descriptions, and keyword-rich tags for better rankings.\"\n    },\n    {\n      icon: <ShoppingCart className=\"w-6 h-6\" />,\n      title: \"Cart Recovery\",\n      description: \"AI-powered SMS and email campaigns to recover abandoned carts automatically.\"\n    },\n    {\n      icon: <Mail className=\"w-6 h-6\" />,\n      title: \"Upsell Emails\",\n      description: \"Branded receipt emails with intelligent product recommendations and upsells.\"\n    },\n    {\n      icon: <BarChart3 className=\"w-6 h-6\" />,\n      title: \"Analytics Dashboard\",\n      description: \"Track performance, conversions, and ROI with detailed analytics and insights.\"\n    },\n    {\n      icon: <Cog className=\"w-6 h-6\" />,\n      title: \"Bulk Optimization\",\n      description: \"Optimize hundreds of products at once with CSV import/export and batch processing.\"\n    }\n  ];\n\n  const plans = [\n    {\n      name: \"Free Trial\",\n      price: \"$0\",\n      period: \"7 days\",\n      icon: <Gift className=\"w-8 h-8\" />,\n      description: \"Try all premium features free for 7 days.\",\n      whoItsFor: \"\",\n      features: [\n        \"Try all premium features free for 7 days\",\n        \"No credit card required (optional)\",\n        \"Cancel anytime before trial ends\",\n        \"Perfect for testing Zyra on your own store before upgrading\"\n      ],\n      popular: false\n    },\n    {\n      name: \"Starter\",\n      price: \"$15\",\n      period: \"per month\",\n      icon: <Zap className=\"w-8 h-8\" />,\n      description: \"Small Shopify stores just getting started with AI.\",\n      whoItsFor: \"Small Shopify stores just getting started with AI.\",\n      features: [\n        \"Optimize up to 100 products with AI-generated descriptions\",\n        \"Send up to 500 AI-crafted emails per month (upsells, receipts)\",\n        \"Access to SEO title + meta tag generator\",\n        \"AI image alt-text generator for accessibility + SEO boost\",\n        \"Basic analytics dashboard (track optimized products + email open rates)\"\n      ],\n      popular: false\n    },\n    {\n      name: \"Pro\",\n      price: \"$25\", \n      period: \"per month\",\n      icon: <Crown className=\"w-8 h-8\" />,\n      description: \"Established stores with medium traffic looking to grow faster.\",\n      whoItsFor: \"Established stores with medium traffic looking to grow faster.\",\n      features: [\n        \"Unlimited product optimizations (no limits on AI copy)\",\n        \"Send up to 2,000 AI-crafted emails per month\",\n        \"Recover abandoned carts with 500 SMS reminders per month\",\n        \"Advanced analytics dashboard (email CTR, SMS conversion, keyword density)\",\n        \"Priority AI processing → faster response + reduced wait times\"\n      ],\n      popular: true\n    },\n    {\n      name: \"Growth\",\n      price: \"$49\",\n      period: \"per month\",\n      icon: <Award className=\"w-8 h-8\" />,\n      description: \"High-volume stores that want maximum automation and advanced growth tools.\",\n      whoItsFor: \"High-volume stores that want maximum automation and advanced growth tools.\",\n      features: [\n        \"Unlimited everything → products, emails, and SMS recovery\",\n        \"Full analytics suite → keyword insights, revenue from emails/SMS, product optimization impact\",\n        \"A/B testing for AI-generated content → test multiple product descriptions, email subjects, and SMS messages\",\n        \"Premium template library → advanced email & SMS layouts designed to convert\",\n        \"Early access to new AI tools (before Starter/Pro users)\",\n        \"Priority support for faster help\"\n      ],\n      popular: false\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen\">\n      {/* Navigation */}\n      <ResponsiveNavbar\n        navItems={[\n          { label: \"Features\", href: \"#features\", external: true },\n          { label: \"Pricing\", href: \"#pricing\", external: true },\n          { label: \"Login\", href: \"/auth/login\" }\n        ]}\n        actionButton={{\n          label: \"Get Started\",\n          href: \"/auth/register\"\n        }}\n      />\n\n      {/* Hero Section */}\n      <section className=\"pt-20 sm:pt-24 pb-12 sm:pb-16 px-4 sm:px-6\">\n        <div className=\"container mx-auto text-center max-w-4xl\">\n          <h1 className=\"text-3xl sm:text-4xl md:text-5xl lg:text-6xl xl:text-7xl font-bold mb-4 sm:mb-6 bg-gradient-to-r from-accent to-primary bg-clip-text text-transparent\" data-testid=\"text-hero-title\">\n            Smarter Sales, Faster Growth\n          </h1>\n          <p className=\"text-base sm:text-lg md:text-xl lg:text-2xl text-muted-foreground mb-6 sm:mb-8 leading-relaxed px-2 sm:px-0\" data-testid=\"text-hero-subtitle\">\n            AI-powered Shopify optimization that boosts sales, recovers carts, and automates your growth with intelligent product descriptions and SEO.\n          </p>\n          \n          <div className=\"flex flex-col sm:flex-row gap-3 sm:gap-4 justify-center items-center mb-8 sm:mb-12 px-4 sm:px-0\">\n            <Button asChild className=\"gradient-button w-full sm:w-auto px-6 sm:px-8 py-3 sm:py-4 text-base sm:text-lg font-semibold\" data-testid=\"button-start-trial\">\n              <Link href=\"/auth/register\">\n                Start 7-Day Free Trial\n              </Link>\n            </Button>\n            <Button variant=\"outline\" className=\"w-full sm:w-auto px-6 sm:px-8 py-3 sm:py-4 text-base sm:text-lg font-semibold\" data-testid=\"button-watch-demo\">\n              <Play className=\"w-4 h-4 mr-2\" />\n              Watch Demo\n            </Button>\n          </div>\n\n          <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4 sm:gap-6 lg:gap-8 max-w-2xl mx-auto\">\n            <div className=\"text-center p-4 sm:p-0\">\n              <div className=\"text-2xl sm:text-3xl lg:text-4xl font-bold text-primary\" data-testid=\"text-stat-sales\">300%</div>\n              <div className=\"text-xs sm:text-sm text-muted-foreground\">Sales Increase</div>\n            </div>\n            <div className=\"text-center p-4 sm:p-0\">\n              <div className=\"text-2xl sm:text-3xl lg:text-4xl font-bold text-primary\" data-testid=\"text-stat-recovery\">85%</div>\n              <div className=\"text-xs sm:text-sm text-muted-foreground\">Cart Recovery</div>\n            </div>\n            <div className=\"text-center p-4 sm:p-0\">\n              <div className=\"text-2xl sm:text-3xl lg:text-4xl font-bold text-primary\" data-testid=\"text-stat-setup\">10min</div>\n              <div className=\"text-xs sm:text-sm text-muted-foreground\">Setup Time</div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section id=\"features\" className=\"py-12 sm:py-16 px-4 sm:px-6\">\n        <div className=\"container mx-auto\">\n          <div className=\"text-center mb-8 sm:mb-12\">\n            <h2 className=\"text-2xl sm:text-3xl lg:text-4xl xl:text-5xl font-bold mb-3 sm:mb-4\" data-testid=\"text-features-title\">Powerful AI Features</h2>\n            <p className=\"text-base sm:text-lg lg:text-xl text-muted-foreground px-4 sm:px-0\">Everything you need to optimize your Shopify store</p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6 sm:gap-8\">\n            {features.map((feature, index) => (\n              <Card key={index} className=\"gradient-card border-0 h-full\" data-testid={`card-feature-${index}`}>\n                <CardContent className=\"p-4 sm:p-6 h-full flex flex-col\">\n                  <div className=\"w-10 h-10 sm:w-12 sm:h-12 bg-primary/20 rounded-lg flex items-center justify-center mb-3 sm:mb-4 text-primary flex-shrink-0\">\n                    {feature.icon}\n                  </div>\n                  <h3 className=\"text-lg sm:text-xl font-semibold mb-2 sm:mb-3\" data-testid={`text-feature-title-${index}`}>{feature.title}</h3>\n                  <p className=\"text-sm sm:text-base text-muted-foreground flex-grow\" data-testid={`text-feature-description-${index}`}>{feature.description}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Pricing Section */}\n      <section id=\"pricing\" className=\"py-12 sm:py-16 px-4 sm:px-6\">\n        <div className=\"container mx-auto\">\n          <div className=\"text-center mb-8 sm:mb-12\">\n            <h2 className=\"text-2xl sm:text-3xl lg:text-4xl xl:text-5xl font-bold mb-3 sm:mb-4\" data-testid=\"text-pricing-title\">Choose Your Plan</h2>\n            <p className=\"text-base sm:text-lg lg:text-xl text-muted-foreground px-4 sm:px-0\">Start with a 7-day free trial, upgrade anytime</p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 sm:gap-6 max-w-7xl mx-auto mb-12 sm:mb-16\">\n            {plans.map((plan, index) => (\n              <Card \n                key={index} \n                className={`pricing-card border-0 relative h-full ${plan.popular ? 'border-primary/50 lg:scale-105' : ''}`}\n                data-testid={`card-plan-${index}`}\n              >\n                {plan.popular && (\n                  <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\n                    <Badge className=\"bg-primary text-primary-foreground\">Popular</Badge>\n                  </div>\n                )}\n                <CardContent className=\"p-4 sm:p-6 h-full flex flex-col\">\n                  <div className=\"text-center mb-4 sm:mb-6\">\n                    <div className=\"flex justify-center text-primary mb-2\">{plan.icon}</div>\n                    <h3 className=\"text-lg sm:text-xl font-semibold mb-2\" data-testid={`text-plan-name-${index}`}>{plan.name}</h3>\n                    <div className=\"text-2xl sm:text-3xl font-bold\" data-testid={`text-plan-price-${index}`}>{plan.price}</div>\n                    <div className=\"text-xs sm:text-sm text-muted-foreground mb-2 sm:mb-3\" data-testid={`text-plan-period-${index}`}>{plan.period}</div>\n                    {plan.whoItsFor && (\n                      <p className=\"text-xs sm:text-sm text-primary/80 font-medium px-2 sm:px-0\" data-testid={`text-plan-target-${index}`}>\n                        Who it's for: {plan.whoItsFor}\n                      </p>\n                    )}\n                  </div>\n                  <div className=\"flex-1\">\n                    <ul className=\"space-y-2 sm:space-y-3 mb-4 sm:mb-6\">\n                      {plan.features.map((feature, featureIndex) => (\n                        <li key={featureIndex} className=\"flex items-start text-xs sm:text-sm\" data-testid={`text-plan-feature-${index}-${featureIndex}`}>\n                          <Check className=\"w-3 h-3 sm:w-4 sm:h-4 text-primary mr-2 mt-0.5 flex-shrink-0\" />\n                          <span>{feature}</span>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                  <Button \n                    asChild\n                    className={`w-full ${plan.popular ? 'gradient-button' : 'border border-border hover:bg-muted'}`}\n                    variant={plan.popular ? \"default\" : \"outline\"}\n                    data-testid={`button-choose-plan-${index}`}\n                  >\n                    <Link href=\"/auth/register\">\n                      {index === 0 ? \"Start Trial\" : \"Choose Plan\"}\n                    </Link>\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {/* Comparison Table */}\n          <div className=\"max-w-6xl mx-auto px-2 sm:px-4\">\n            <h3 className=\"text-xl sm:text-2xl lg:text-3xl font-bold text-center mb-6 sm:mb-8\" data-testid=\"text-comparison-title\">Feature Comparison</h3>\n            <Card className=\"gradient-card border-0\">\n              <CardContent className=\"p-0\">\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full min-w-[600px]\">\n                    <thead>\n                      <tr className=\"border-b border-border\">\n                        <th className=\"text-left p-2 sm:p-3 lg:p-4 text-xs sm:text-sm font-semibold\">Features</th>\n                        <th className=\"text-center p-2 sm:p-3 lg:p-4 text-xs sm:text-sm font-semibold\">Free Trial</th>\n                        <th className=\"text-center p-2 sm:p-3 lg:p-4 text-xs sm:text-sm font-semibold\">Starter</th>\n                        <th className=\"text-center p-2 sm:p-3 lg:p-4 text-xs sm:text-sm font-semibold bg-primary/10\">Pro</th>\n                        <th className=\"text-center p-2 sm:p-3 lg:p-4 text-xs sm:text-sm font-semibold\">Growth</th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"text-xs sm:text-sm\">\n                      <tr className=\"border-b border-border\">\n                        <td className=\"p-2 sm:p-3 lg:p-4 font-medium\">Product Optimization</td>\n                        <td className=\"text-center p-2 sm:p-3 lg:p-4\">Unlimited (7 days)</td>\n                        <td className=\"text-center p-2 sm:p-3 lg:p-4\">100 products</td>\n                        <td className=\"text-center p-2 sm:p-3 lg:p-4 bg-primary/5\">Unlimited</td>\n                        <td className=\"text-center p-2 sm:p-3 lg:p-4\">Unlimited</td>\n                      </tr>\n                      <tr className=\"border-b border-border\">\n                        <td className=\"p-2 sm:p-3 lg:p-4 font-medium\">AI Emails per Month</td>\n                        <td className=\"text-center p-2 sm:p-3 lg:p-4\">Unlimited (7 days)</td>\n                        <td className=\"text-center p-2 sm:p-3 lg:p-4\">500</td>\n                        <td className=\"text-center p-2 sm:p-3 lg:p-4 bg-primary/5\">2,000</td>\n                        <td className=\"text-center p-2 sm:p-3 lg:p-4\">Unlimited</td>\n                      </tr>\n                      <tr className=\"border-b border-border\">\n                        <td className=\"p-2 sm:p-3 lg:p-4 font-medium\">SMS Recovery</td>\n                        <td className=\"text-center p-2 sm:p-3 lg:p-4\">✓</td>\n                        <td className=\"text-center p-2 sm:p-3 lg:p-4\">—</td>\n                        <td className=\"text-center p-2 sm:p-3 lg:p-4 bg-primary/5\">500/month</td>\n                        <td className=\"text-center p-2 sm:p-3 lg:p-4\">Unlimited</td>\n                      </tr>\n                      <tr className=\"border-b border-border\">\n                        <td className=\"p-2 sm:p-3 lg:p-4 font-medium\">Analytics</td>\n                        <td className=\"text-center p-2 sm:p-3 lg:p-4\">Full access</td>\n                        <td className=\"text-center p-2 sm:p-3 lg:p-4\">Basic</td>\n                        <td className=\"text-center p-2 sm:p-3 lg:p-4 bg-primary/5\">Advanced</td>\n                        <td className=\"text-center p-2 sm:p-3 lg:p-4\">Full suite</td>\n                      </tr>\n                      <tr className=\"border-b border-border\">\n                        <td className=\"p-2 sm:p-3 lg:p-4 font-medium\">AI Processing</td>\n                        <td className=\"text-center p-2 sm:p-3 lg:p-4\">Standard</td>\n                        <td className=\"text-center p-2 sm:p-3 lg:p-4\">Standard</td>\n                        <td className=\"text-center p-2 sm:p-3 lg:p-4 bg-primary/5\">Priority</td>\n                        <td className=\"text-center p-2 sm:p-3 lg:p-4\">Priority</td>\n                      </tr>\n                      <tr className=\"border-b border-border\">\n                        <td className=\"p-2 sm:p-3 lg:p-4 font-medium\">A/B Testing</td>\n                        <td className=\"text-center p-2 sm:p-3 lg:p-4\">—</td>\n                        <td className=\"text-center p-2 sm:p-3 lg:p-4\">—</td>\n                        <td className=\"text-center p-2 sm:p-3 lg:p-4 bg-primary/5\">—</td>\n                        <td className=\"text-center p-2 sm:p-3 lg:p-4\">✓</td>\n                      </tr>\n                      <tr className=\"border-b border-border\">\n                        <td className=\"p-2 sm:p-3 lg:p-4 font-medium\">Premium Templates</td>\n                        <td className=\"text-center p-2 sm:p-3 lg:p-4\">—</td>\n                        <td className=\"text-center p-2 sm:p-3 lg:p-4\">—</td>\n                        <td className=\"text-center p-2 sm:p-3 lg:p-4 bg-primary/5\">—</td>\n                        <td className=\"text-center p-2 sm:p-3 lg:p-4\">✓</td>\n                      </tr>\n                      <tr className=\"border-b border-border\">\n                        <td className=\"p-2 sm:p-3 lg:p-4 font-medium\">Early Access to New AI Tools</td>\n                        <td className=\"text-center p-2 sm:p-3 lg:p-4\">—</td>\n                        <td className=\"text-center p-2 sm:p-3 lg:p-4\">—</td>\n                        <td className=\"text-center p-2 sm:p-3 lg:p-4 bg-primary/5\">—</td>\n                        <td className=\"text-center p-2 sm:p-3 lg:p-4\">✓</td>\n                      </tr>\n                      <tr>\n                        <td className=\"p-2 sm:p-3 lg:p-4 font-medium\">Support</td>\n                        <td className=\"text-center p-2 sm:p-3 lg:p-4\">Standard</td>\n                        <td className=\"text-center p-2 sm:p-3 lg:p-4\">Standard</td>\n                        <td className=\"text-center p-2 sm:p-3 lg:p-4 bg-primary/5\">Standard</td>\n                        <td className=\"text-center p-2 sm:p-3 lg:p-4\">Priority</td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-12 sm:py-16 px-4 sm:px-6 bg-gradient-to-r from-primary/10 to-accent/10\">\n        <div className=\"container mx-auto text-center\">\n          <h2 className=\"text-2xl sm:text-3xl lg:text-4xl font-bold mb-3 sm:mb-4\" data-testid=\"text-cta-title\">Ready to Transform Your Shopify Store?</h2>\n          <p className=\"text-base sm:text-lg lg:text-xl text-muted-foreground mb-6 sm:mb-8 px-4 sm:px-0\">Join thousands of merchants already using Zyra to boost their sales</p>\n          <Button asChild className=\"gradient-button w-full sm:w-auto px-6 sm:px-8 py-3 sm:py-4 text-base sm:text-lg font-semibold\" data-testid=\"button-cta-start\">\n            <Link href=\"/auth/register\">\n              Start Your Free Trial Today\n              <ArrowRight className=\"w-4 h-4 sm:w-5 sm:h-5 ml-2\" />\n            </Link>\n          </Button>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"py-6 sm:py-8 px-4 sm:px-6 border-t border-border\">\n        <div className=\"container mx-auto text-center\">\n          <div className=\"flex items-center justify-center space-x-3 mb-3 sm:mb-4\">\n            <div className=\"w-6 h-6 sm:w-8 sm:h-8 bg-gradient-to-br from-primary to-accent rounded-lg flex items-center justify-center\">\n              <Zap className=\"w-3 h-3 sm:w-4 sm:h-4 text-primary-foreground\" />\n            </div>\n            <span className=\"text-lg sm:text-xl font-bold\">Zyra</span>\n          </div>\n          <p className=\"text-muted-foreground text-xs sm:text-sm\">© 2024 Zyra. All rights reserved.</p>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":19800},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/products.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Plus, Edit2, Trash2, Package, DollarSign, Archive, Image as ImageIcon, Menu } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertProductSchema } from \"@shared/schema\";\nimport type { Product, InsertProduct } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport Sidebar from \"@/components/dashboard/sidebar\";\nimport { useAuth } from \"@/lib/auth\";\n\n// Product categories - you can expand this list\nconst PRODUCT_CATEGORIES = [\n  \"Electronics\",\n  \"Clothing\",\n  \"Home & Garden\",\n  \"Books\",\n  \"Sports\",\n  \"Beauty\",\n  \"Food\",\n  \"Toys\",\n  \"Automotive\",\n  \"Health\",\n  \"Other\"\n];\n\n// Form validation schema for frontend\nconst productFormSchema = z.object({\n  name: z.string().min(1, \"Product name is required\"),\n  description: z.string().optional(),\n  price: z.string().min(1, \"Price is required\").refine((val) => !isNaN(parseFloat(val)) && parseFloat(val) > 0, \"Price must be a positive number\"),\n  category: z.string().min(1, \"Category is required\"),\n  stock: z.string().min(1, \"Stock is required\").refine((val) => !isNaN(parseInt(val)) && parseInt(val) >= 0, \"Stock must be 0 or greater\"),\n  image: z.string().url(\"Please enter a valid URL\").optional().or(z.literal(\"\"))\n});\n\ntype ProductFormData = z.infer<typeof productFormSchema>;\n\nfunction ProductCard({ product, onEdit, onDelete }: { product: Product; onEdit: (product: Product) => void; onDelete: (id: string) => void }) {\n  const [imageLoading, setImageLoading] = useState(true);\n  const [imageError, setImageError] = useState(false);\n\n  return (\n    <Card className=\"group hover:shadow-lg transition-shadow duration-200\" data-testid={`card-product-${product.id}`}>\n      <CardContent className=\"p-4\">\n        <div className=\"aspect-square bg-muted rounded-lg mb-4 overflow-hidden\">\n          {product.image && !imageError ? (\n            <img \n              src={product.image} \n              alt={product.name}\n              className={`w-full h-full object-cover transition-opacity duration-200 ${imageLoading ? 'opacity-0' : 'opacity-100'}`}\n              onLoad={() => setImageLoading(false)}\n              onError={() => {\n                setImageError(true);\n                setImageLoading(false);\n              }}\n              loading=\"lazy\"\n              data-testid={`img-product-${product.id}`}\n            />\n          ) : (\n            <div className=\"w-full h-full flex items-center justify-center bg-muted\">\n              <ImageIcon className=\"w-12 h-12 text-muted-foreground\" />\n            </div>\n          )}\n          {imageLoading && product.image && (\n            <Skeleton className=\"w-full h-full\" />\n          )}\n        </div>\n        \n        <div className=\"space-y-2\">\n          <h3 className=\"font-semibold text-lg truncate\" data-testid={`text-product-name-${product.id}`}>\n            {product.name}\n          </h3>\n          \n          {product.description && (\n            <p className=\"text-sm text-muted-foreground line-clamp-2\" data-testid={`text-product-description-${product.id}`}>\n              {product.description}\n            </p>\n          )}\n          \n          <div className=\"flex items-center justify-between text-sm\">\n            <div className=\"flex items-center gap-1\">\n              <DollarSign className=\"w-4 h-4\" />\n              <span className=\"font-medium\" data-testid={`text-product-price-${product.id}`}>\n                ${parseFloat(product.price).toFixed(2)}\n              </span>\n            </div>\n            \n            <div className=\"flex items-center gap-1\">\n              <Archive className=\"w-4 h-4\" />\n              <span data-testid={`text-product-stock-${product.id}`}>\n                {product.stock} in stock\n              </span>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-xs text-muted-foreground bg-muted px-2 py-1 rounded\">\n              {product.category}\n            </span>\n            \n            <div className=\"flex gap-2 opacity-0 group-hover:opacity-100 transition-opacity\">\n              <Button \n                size=\"sm\" \n                variant=\"outline\" \n                onClick={() => onEdit(product)}\n                data-testid={`button-edit-product-${product.id}`}\n              >\n                <Edit2 className=\"w-3 h-3\" />\n              </Button>\n              <Button \n                size=\"sm\" \n                variant=\"outline\" \n                onClick={() => onDelete(product.id)}\n                data-testid={`button-delete-product-${product.id}`}\n              >\n                <Trash2 className=\"w-3 h-3\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction ProductGrid({ products, isLoading, onEdit, onDelete }: { \n  products: Product[]; \n  isLoading: boolean; \n  onEdit: (product: Product) => void; \n  onDelete: (id: string) => void; \n}) {\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n        {Array.from({ length: 8 }).map((_, i) => (\n          <Card key={i}>\n            <CardContent className=\"p-4\">\n              <Skeleton className=\"aspect-square mb-4\" />\n              <Skeleton className=\"h-5 mb-2\" />\n              <Skeleton className=\"h-4 w-2/3 mb-3\" />\n              <div className=\"flex justify-between\">\n                <Skeleton className=\"h-4 w-16\" />\n                <Skeleton className=\"h-4 w-20\" />\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  if (products.length === 0) {\n    return (\n      <div className=\"text-center py-12\">\n        <Package className=\"w-16 h-16 mx-auto text-muted-foreground mb-4\" />\n        <h3 className=\"text-xl font-semibold mb-2\">No products yet</h3>\n        <p className=\"text-muted-foreground mb-6\">Add your first product to get started</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n      {products.map((product) => (\n        <ProductCard \n          key={product.id} \n          product={product} \n          onEdit={onEdit}\n          onDelete={onDelete}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default function ProductsPage() {\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [editingProduct, setEditingProduct] = useState<Product | null>(null);\n  const [sidebarOpen, setSidebarOpen] = useState(true);\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n\n  // Form setup\n  const form = useForm<ProductFormData>({\n    resolver: zodResolver(productFormSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      price: \"\",\n      category: \"\",\n      stock: \"\",\n      image: \"\",\n    },\n  });\n\n  // Fetch products with real-time updates\n  const { data: products = [], isLoading } = useQuery<Product[]>({\n    queryKey: ['/api/products'],\n    refetchInterval: 10000, // Auto-refresh every 10 seconds\n  });\n\n  // Create product mutation\n  const createMutation = useMutation({\n    mutationFn: async (data: ProductFormData) => {\n      const payload = {\n        name: data.name,\n        description: data.description || null,\n        price: data.price,\n        category: data.category,\n        stock: parseInt(data.stock),\n        image: data.image || null,\n      };\n      const response = await apiRequest(\"POST\", \"/api/products\", payload);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n      setIsAddDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Product added!\",\n        description: \"Your product has been created successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create product\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update product mutation\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<ProductFormData> }) => {\n      const payload: any = {};\n      if (data.name) payload.name = data.name;\n      if (data.description !== undefined) payload.description = data.description || null;\n      if (data.price) payload.price = data.price;\n      if (data.category) payload.category = data.category;\n      if (data.stock) payload.stock = parseInt(data.stock);\n      if (data.image !== undefined) payload.image = data.image || null;\n      \n      const response = await apiRequest(\"PATCH\", `/api/products/${id}`, payload);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n      setEditingProduct(null);\n      form.reset();\n      toast({\n        title: \"Product updated!\",\n        description: \"Your product has been updated successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update product\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete product mutation\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/products/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n      toast({\n        title: \"Product deleted!\",\n        description: \"Your product has been deleted successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\", \n        description: error.message || \"Failed to delete product\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ProductFormData) => {\n    if (editingProduct) {\n      updateMutation.mutate({ id: editingProduct.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (product: Product) => {\n    setEditingProduct(product);\n    form.reset({\n      name: product.name,\n      description: product.description || \"\",\n      price: product.price,\n      category: product.category,\n      stock: product.stock.toString(),\n      image: product.image || \"\",\n    });\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this product?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const resetForm = () => {\n    form.reset();\n    setEditingProduct(null);\n    setIsAddDialogOpen(false);\n  };\n\n  return (\n    <div className=\"min-h-screen flex\">\n      <Sidebar \n        activeTab=\"products\" \n        onTabChange={() => {}} \n        user={user} \n        isOpen={sidebarOpen}\n        onClose={() => setSidebarOpen(false)}\n      />\n\n      {/* Main Content */}\n      <div className={`flex-1 transition-all duration-300 ease-in-out ${\n        sidebarOpen ? 'lg:ml-64' : 'ml-0'\n      }`}>\n        {/* Top Bar */}\n        <header className=\"bg-card/50 backdrop-blur-sm border-b border-border px-4 sm:px-6 py-3 sm:py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2 sm:space-x-4 min-w-0 flex-1\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setSidebarOpen(!sidebarOpen)}\n                className=\"hover:bg-muted flex-shrink-0\"\n                data-testid=\"button-toggle-sidebar\"\n              >\n                <Menu className=\"w-4 h-4 sm:w-5 sm:h-5\" />\n              </Button>\n              <div className=\"min-w-0 flex-1\">\n                <h1 className=\"text-lg sm:text-xl lg:text-2xl font-bold truncate\">Products</h1>\n                <p className=\"text-xs sm:text-sm text-muted-foreground truncate\">Manage your product catalog</p>\n              </div>\n            </div>\n          </div>\n        </header>\n\n        {/* Products Content */}\n        <div className=\"container mx-auto px-4 py-8 max-w-7xl\">\n          {/* Products Header */}\n          <div className=\"flex items-center justify-between mb-8\">\n            <div>\n              <h2 className=\"text-2xl font-bold tracking-tight\">Product Catalog</h2>\n              <p className=\"text-muted-foreground\">\n                Add and manage your product inventory\n              </p>\n            </div>\n            \n            <Dialog open={isAddDialogOpen || !!editingProduct} onOpenChange={(open) => {\n              if (!open) resetForm();\n              else setIsAddDialogOpen(true);\n            }}>\n              <DialogTrigger asChild>\n                <Button data-testid=\"button-add-product-main\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Product\n                </Button>\n              </DialogTrigger>\n          \n          <DialogContent className=\"sm:max-w-[600px] max-h-[80vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingProduct ? \"Edit Product\" : \"Add New Product\"}\n              </DialogTitle>\n              <DialogDescription>\n                {editingProduct \n                  ? \"Update your product information below.\"\n                  : \"Fill out the form below to add a new product to your catalog.\"\n                }\n              </DialogDescription>\n            </DialogHeader>\n            \n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Product Name</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"Enter product name\" \n                            {...field} \n                            data-testid=\"input-product-name\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"category\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Category</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-product-category\">\n                              <SelectValue placeholder=\"Select category\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {PRODUCT_CATEGORIES.map((category) => (\n                              <SelectItem key={category} value={category}>\n                                {category}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                \n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Enter product description\" \n                          className=\"min-h-[100px]\"\n                          {...field}\n                          value={field.value || \"\"} \n                          data-testid=\"textarea-product-description\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"price\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Price ($)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            step=\"0.01\"\n                            placeholder=\"0.00\" \n                            {...field} \n                            data-testid=\"input-product-price\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"stock\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Stock Quantity</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            placeholder=\"0\" \n                            {...field} \n                            data-testid=\"input-product-stock\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                \n                <FormField\n                  control={form.control}\n                  name=\"image\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Image URL (optional)</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"url\"\n                          placeholder=\"https://example.com/image.jpg\" \n                          {...field} \n                          data-testid=\"input-product-image\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <div className=\"flex justify-end gap-3 pt-4\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={resetForm}\n                    data-testid=\"button-cancel-product\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\"\n                    onClick={() => form.reset()}\n                    data-testid=\"button-reset-product\"\n                  >\n                    Reset\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createMutation.isPending || updateMutation.isPending}\n                    data-testid=\"button-save-product\"\n                  >\n                    {createMutation.isPending || updateMutation.isPending \n                      ? \"Saving...\" \n                      : editingProduct \n                        ? \"Update Product\" \n                        : \"Add Product\"\n                    }\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n            </Dialog>\n          </div>\n\n          {/* Products Grid */}\n          <ProductGrid \n            products={products}\n            isLoading={isLoading}\n            onEdit={handleEdit}\n            onDelete={handleDelete}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":20797},"client/src/pages/profile.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { \n  User, \n  Lock, \n  Store, \n  Globe, \n  Camera, \n  Settings, \n  Eye, \n  EyeOff,\n  CheckCircle,\n  AlertCircle,\n  Trash2\n} from \"lucide-react\";\n\nconst updateProfileSchema = z.object({\n  fullName: z.string().min(1, \"Full name is required\"),\n  email: z.string().email(\"Invalid email address\"),\n});\n\nconst changePasswordSchema = z.object({\n  currentPassword: z.string().min(1, \"Current password is required\"),\n  newPassword: z.string().min(8, \"Password must be at least 8 characters\"),\n  confirmPassword: z.string().min(1, \"Please confirm your password\"),\n}).refine((data) => data.newPassword === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\nconst connectStoreSchema = z.object({\n  platform: z.enum([\"shopify\", \"woocommerce\"]),\n  storeName: z.string().min(1, \"Store name is required\"),\n  storeUrl: z.string().url(\"Invalid store URL\"),\n  accessToken: z.string().min(1, \"Access token is required\"),\n});\n\nexport default function ProfilePage() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [showCurrentPassword, setShowCurrentPassword] = useState(false);\n  const [showNewPassword, setShowNewPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n  // Fetch current user data\n  const { data: user } = useQuery<any>({\n    queryKey: [\"/api/me\"],\n  });\n\n  // Fetch store connections\n  const { data: storeConnections = [] } = useQuery<any[]>({\n    queryKey: [\"/api/store-connections\"],\n  });\n\n  // Profile update form\n  const profileForm = useForm({\n    resolver: zodResolver(updateProfileSchema),\n    defaultValues: {\n      fullName: user?.fullName || \"\",\n      email: user?.email || \"\",\n    },\n    values: {\n      fullName: user?.fullName || \"\",\n      email: user?.email || \"\",\n    },\n  });\n\n  // Password change form\n  const passwordForm = useForm({\n    resolver: zodResolver(changePasswordSchema),\n    defaultValues: {\n      currentPassword: \"\",\n      newPassword: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  // Store connection form\n  const storeForm = useForm({\n    resolver: zodResolver(connectStoreSchema),\n    defaultValues: {\n      platform: \"shopify\" as const,\n      storeName: \"\",\n      storeUrl: \"\",\n      accessToken: \"\",\n    },\n  });\n\n  // Profile update mutation\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"PUT\", \"/api/profile\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/me\"] });\n      toast({ title: \"Success\", description: \"Profile updated successfully\" });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update profile\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Password change mutation\n  const changePasswordMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"PUT\", \"/api/change-password\", data);\n    },\n    onSuccess: () => {\n      passwordForm.reset();\n      toast({ title: \"Success\", description: \"Password changed successfully\" });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to change password\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Store connection mutation\n  const connectStoreMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"POST\", \"/api/store-connections\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/store-connections\"] });\n      storeForm.reset();\n      toast({ title: \"Success\", description: \"Store connected successfully\" });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to connect store\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Language update mutation\n  const updateLanguageMutation = useMutation({\n    mutationFn: async (language: string) => {\n      return await apiRequest(\"PUT\", \"/api/language\", { preferredLanguage: language });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/me\"] });\n      toast({ title: \"Success\", description: \"Language preference updated\" });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update language\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Profile image upload mutation\n  const uploadImageMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append(\"image\", file);\n      return await apiRequest(\"POST\", \"/api/upload-profile-image\", formData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/me\"] });\n      toast({ title: \"Success\", description: \"Profile image updated successfully\" });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to upload image\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Disconnect store mutation\n  const disconnectStoreMutation = useMutation({\n    mutationFn: async (storeId: string) => {\n      return await apiRequest(\"DELETE\", `/api/store-connections/${storeId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/store-connections\"] });\n      toast({ title: \"Success\", description: \"Store disconnected successfully\" });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to disconnect store\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      if (file.size > 5 * 1024 * 1024) { // 5MB limit\n        toast({\n          title: \"Error\",\n          description: \"Image size must be less than 5MB\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      uploadImageMutation.mutate(file);\n    }\n  };\n\n  const languages = [\n    { code: \"en\", name: \"English\" },\n    { code: \"es\", name: \"Spanish\" },\n    { code: \"fr\", name: \"French\" },\n    { code: \"de\", name: \"German\" },\n    { code: \"pt\", name: \"Portuguese\" },\n    { code: \"zh\", name: \"Chinese\" },\n    { code: \"ja\", name: \"Japanese\" },\n    { code: \"ko\", name: \"Korean\" },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-[#021024] to-[#052659] p-4 sm:p-6\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"space-y-6\">\n          {/* Header */}\n          <div className=\"space-y-2\">\n            <h1 className=\"text-2xl sm:text-3xl lg:text-4xl font-bold text-white tracking-tight\">\n              Profile Settings\n            </h1>\n            <p className=\"text-slate-300 text-sm sm:text-base\">\n              Manage your account information, connected stores, and preferences\n            </p>\n          </div>\n\n          <Tabs defaultValue=\"general\" className=\"space-y-6\">\n            <TabsList className=\"grid w-full grid-cols-4 bg-[#031a3c] border border-slate-700\">\n              <TabsTrigger value=\"general\" className=\"flex items-center space-x-2 data-[state=active]:bg-slate-700 bg-[#c1e8ff] text-[#000000]\">\n                <User className=\"w-4 h-4\" />\n                <span className=\"hidden sm:inline\">General</span>\n              </TabsTrigger>\n              <TabsTrigger value=\"password\" className=\"flex items-center space-x-2 data-[state=active]:bg-slate-700\">\n                <Lock className=\"w-4 h-4\" />\n                <span className=\"hidden sm:inline\">Password</span>\n              </TabsTrigger>\n              <TabsTrigger value=\"stores\" className=\"flex items-center space-x-2 data-[state=active]:bg-slate-700\">\n                <Store className=\"w-4 h-4\" />\n                <span className=\"hidden sm:inline\">Stores</span>\n              </TabsTrigger>\n              <TabsTrigger value=\"language\" className=\"flex items-center space-x-2 data-[state=active]:bg-slate-700\">\n                <Globe className=\"w-4 h-4\" />\n                <span className=\"hidden sm:inline\">Language</span>\n              </TabsTrigger>\n            </TabsList>\n\n            {/* General Info Tab */}\n            <TabsContent value=\"general\">\n              <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700\">\n                <CardHeader>\n                  <CardTitle className=\"text-white flex items-center space-x-2\">\n                    <User className=\"w-5 h-5\" />\n                    <span>General Information</span>\n                  </CardTitle>\n                  <CardDescription className=\"text-slate-300\">\n                    Update your personal information and profile image\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  {/* Profile Image */}\n                  <div className=\"flex items-center space-x-4\">\n                    <Avatar className=\"w-20 h-20\">\n                      <AvatarImage src={user?.imageUrl} alt={user?.fullName || \"User\"} />\n                      <AvatarFallback className=\"text-lg bg-slate-700 text-white\">\n                        {user?.fullName?.slice(0, 2).toUpperCase() || \"US\"}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div>\n                      <Button\n                        onClick={() => fileInputRef.current?.click()}\n                        disabled={uploadImageMutation.isPending}\n                        className=\"bg-[#C1E8FF] text-[#052659] hover:bg-[#A8DCFF]\"\n                        data-testid=\"button-upload-image\"\n                      >\n                        <Camera className=\"w-4 h-4 mr-2\" />\n                        {uploadImageMutation.isPending ? \"Uploading...\" : \"Change Photo\"}\n                      </Button>\n                      <input\n                        ref={fileInputRef}\n                        type=\"file\"\n                        accept=\"image/*\"\n                        onChange={handleImageUpload}\n                        className=\"hidden\"\n                        data-testid=\"input-file-upload\"\n                      />\n                      <p className=\"text-xs text-slate-400 mt-1\">\n                        JPG, PNG up to 5MB\n                      </p>\n                    </div>\n                  </div>\n\n                  {/* Profile Form */}\n                  <Form {...profileForm}>\n                    <form \n                      onSubmit={profileForm.handleSubmit((data) => updateProfileMutation.mutate(data))}\n                      className=\"space-y-4\"\n                    >\n                      <FormField\n                        control={profileForm.control}\n                        name=\"fullName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-white\">Full Name</FormLabel>\n                            <FormControl>\n                              <Input\n                                {...field}\n                                className=\"bg-slate-800 border-slate-600 text-white\"\n                                placeholder=\"Enter your full name\"\n                                data-testid=\"input-full-name\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={profileForm.control}\n                        name=\"email\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-white\">Email Address</FormLabel>\n                            <FormControl>\n                              <Input\n                                {...field}\n                                type=\"email\"\n                                className=\"bg-slate-800 border-slate-600 text-white\"\n                                placeholder=\"Enter your email\"\n                                data-testid=\"input-email\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <Button\n                        type=\"submit\"\n                        disabled={updateProfileMutation.isPending}\n                        className=\"bg-[#C1E8FF] text-[#052659] hover:bg-[#A8DCFF]\"\n                        data-testid=\"button-save-profile\"\n                      >\n                        {updateProfileMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n                      </Button>\n                    </form>\n                  </Form>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Password Tab */}\n            <TabsContent value=\"password\">\n              <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700\">\n                <CardHeader>\n                  <CardTitle className=\"text-white flex items-center space-x-2\">\n                    <Lock className=\"w-5 h-5\" />\n                    <span>Change Password</span>\n                  </CardTitle>\n                  <CardDescription className=\"text-slate-300\">\n                    Update your password to keep your account secure\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <Form {...passwordForm}>\n                    <form \n                      onSubmit={passwordForm.handleSubmit((data) => changePasswordMutation.mutate(data))}\n                      className=\"space-y-4\"\n                    >\n                      <FormField\n                        control={passwordForm.control}\n                        name=\"currentPassword\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-white\">Current Password</FormLabel>\n                            <FormControl>\n                              <div className=\"relative\">\n                                <Input\n                                  {...field}\n                                  type={showCurrentPassword ? \"text\" : \"password\"}\n                                  className=\"bg-slate-800 border-slate-600 text-white pr-10\"\n                                  placeholder=\"Enter current password\"\n                                  data-testid=\"input-current-password\"\n                                />\n                                <Button\n                                  type=\"button\"\n                                  variant=\"ghost\"\n                                  size=\"icon\"\n                                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                                  onClick={() => setShowCurrentPassword(!showCurrentPassword)}\n                                >\n                                  {showCurrentPassword ? (\n                                    <EyeOff className=\"h-4 w-4 text-slate-400\" />\n                                  ) : (\n                                    <Eye className=\"h-4 w-4 text-slate-400\" />\n                                  )}\n                                </Button>\n                              </div>\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={passwordForm.control}\n                        name=\"newPassword\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-white\">New Password</FormLabel>\n                            <FormControl>\n                              <div className=\"relative\">\n                                <Input\n                                  {...field}\n                                  type={showNewPassword ? \"text\" : \"password\"}\n                                  className=\"bg-slate-800 border-slate-600 text-white pr-10\"\n                                  placeholder=\"Enter new password\"\n                                  data-testid=\"input-new-password\"\n                                />\n                                <Button\n                                  type=\"button\"\n                                  variant=\"ghost\"\n                                  size=\"icon\"\n                                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                                  onClick={() => setShowNewPassword(!showNewPassword)}\n                                >\n                                  {showNewPassword ? (\n                                    <EyeOff className=\"h-4 w-4 text-slate-400\" />\n                                  ) : (\n                                    <Eye className=\"h-4 w-4 text-slate-400\" />\n                                  )}\n                                </Button>\n                              </div>\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={passwordForm.control}\n                        name=\"confirmPassword\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-white\">Confirm New Password</FormLabel>\n                            <FormControl>\n                              <div className=\"relative\">\n                                <Input\n                                  {...field}\n                                  type={showConfirmPassword ? \"text\" : \"password\"}\n                                  className=\"bg-slate-800 border-slate-600 text-white pr-10\"\n                                  placeholder=\"Confirm new password\"\n                                  data-testid=\"input-confirm-password\"\n                                />\n                                <Button\n                                  type=\"button\"\n                                  variant=\"ghost\"\n                                  size=\"icon\"\n                                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                                >\n                                  {showConfirmPassword ? (\n                                    <EyeOff className=\"h-4 w-4 text-slate-400\" />\n                                  ) : (\n                                    <Eye className=\"h-4 w-4 text-slate-400\" />\n                                  )}\n                                </Button>\n                              </div>\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <Button\n                        type=\"submit\"\n                        disabled={changePasswordMutation.isPending}\n                        className=\"bg-[#C1E8FF] text-[#052659] hover:bg-[#A8DCFF]\"\n                        data-testid=\"button-change-password\"\n                      >\n                        {changePasswordMutation.isPending ? \"Changing...\" : \"Change Password\"}\n                      </Button>\n                    </form>\n                  </Form>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Stores Tab */}\n            <TabsContent value=\"stores\">\n              <div className=\"space-y-6\">\n                {/* Connected Stores */}\n                <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700\">\n                  <CardHeader>\n                    <CardTitle className=\"text-white flex items-center space-x-2\">\n                      <Store className=\"w-5 h-5\" />\n                      <span>Connected Stores</span>\n                    </CardTitle>\n                    <CardDescription className=\"text-slate-300\">\n                      Manage your connected e-commerce platforms\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    {storeConnections.length > 0 ? (\n                      <div className=\"space-y-4\">\n                        {storeConnections.map((store: any) => (\n                          <div\n                            key={store.id}\n                            className=\"flex items-center justify-between p-4 bg-slate-800 rounded-lg border border-slate-600\"\n                            data-testid={`store-connection-${store.id}`}\n                          >\n                            <div className=\"flex items-center space-x-3\">\n                              <div className=\"w-10 h-10 bg-slate-700 rounded-lg flex items-center justify-center\">\n                                <Store className=\"w-5 h-5 text-[#C1E8FF]\" />\n                              </div>\n                              <div>\n                                <h3 className=\"text-white font-medium\">{store.storeName}</h3>\n                                <p className=\"text-slate-400 text-sm capitalize\">{store.platform}</p>\n                              </div>\n                            </div>\n                            <div className=\"flex items-center space-x-2\">\n                              <Badge \n                                variant={store.status === \"active\" ? \"default\" : \"destructive\"}\n                                className={store.status === \"active\" ? \"bg-green-500/20 text-green-400\" : \"\"}\n                              >\n                                {store.status === \"active\" ? (\n                                  <CheckCircle className=\"w-3 h-3 mr-1\" />\n                                ) : (\n                                  <AlertCircle className=\"w-3 h-3 mr-1\" />\n                                )}\n                                {store.status}\n                              </Badge>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"icon\"\n                                onClick={() => disconnectStoreMutation.mutate(store.id)}\n                                disabled={disconnectStoreMutation.isPending}\n                                className=\"text-red-400 hover:text-red-300 hover:bg-red-500/20\"\n                                data-testid={`button-disconnect-${store.id}`}\n                              >\n                                <Trash2 className=\"w-4 h-4\" />\n                              </Button>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <p className=\"text-slate-400 text-center py-8\">\n                        No stores connected yet. Add your first store below.\n                      </p>\n                    )}\n                  </CardContent>\n                </Card>\n\n                {/* Connect New Store */}\n                <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700\">\n                  <CardHeader>\n                    <CardTitle className=\"text-white\">Connect New Store</CardTitle>\n                    <CardDescription className=\"text-slate-300\">\n                      Add a new Shopify or WooCommerce store to sync with Zyra\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <Form {...storeForm}>\n                      <form \n                        onSubmit={storeForm.handleSubmit((data) => connectStoreMutation.mutate(data))}\n                        className=\"space-y-4\"\n                      >\n                        <FormField\n                          control={storeForm.control}\n                          name=\"platform\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className=\"text-white\">Platform</FormLabel>\n                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                <FormControl>\n                                  <SelectTrigger className=\"bg-slate-800 border-slate-600 text-white\" data-testid=\"select-platform\">\n                                    <SelectValue placeholder=\"Select platform\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent className=\"bg-slate-800 border-slate-600\">\n                                  <SelectItem value=\"shopify\">Shopify</SelectItem>\n                                  <SelectItem value=\"woocommerce\">WooCommerce</SelectItem>\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={storeForm.control}\n                          name=\"storeName\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className=\"text-white\">Store Name</FormLabel>\n                              <FormControl>\n                                <Input\n                                  {...field}\n                                  className=\"bg-slate-800 border-slate-600 text-white\"\n                                  placeholder=\"My Store\"\n                                  data-testid=\"input-store-name\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={storeForm.control}\n                          name=\"storeUrl\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className=\"text-white\">Store URL</FormLabel>\n                              <FormControl>\n                                <Input\n                                  {...field}\n                                  type=\"url\"\n                                  className=\"bg-slate-800 border-slate-600 text-white\"\n                                  placeholder=\"https://mystore.shopify.com\"\n                                  data-testid=\"input-store-url\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={storeForm.control}\n                          name=\"accessToken\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className=\"text-white\">Access Token</FormLabel>\n                              <FormControl>\n                                <Input\n                                  {...field}\n                                  type=\"password\"\n                                  className=\"bg-slate-800 border-slate-600 text-white\"\n                                  placeholder=\"Enter your access token\"\n                                  data-testid=\"input-access-token\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <Button\n                          type=\"submit\"\n                          disabled={connectStoreMutation.isPending}\n                          className=\"bg-[#C1E8FF] text-[#052659] hover:bg-[#A8DCFF]\"\n                          data-testid=\"button-connect-store\"\n                        >\n                          {connectStoreMutation.isPending ? \"Connecting...\" : \"Connect Store\"}\n                        </Button>\n                      </form>\n                    </Form>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            {/* Language Tab */}\n            <TabsContent value=\"language\">\n              <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700\">\n                <CardHeader>\n                  <CardTitle className=\"text-white flex items-center space-x-2\">\n                    <Globe className=\"w-5 h-5\" />\n                    <span>Language Preferences</span>\n                  </CardTitle>\n                  <CardDescription className=\"text-slate-300\">\n                    Choose your preferred language for the interface\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <Label className=\"text-white\">Preferred Language</Label>\n                    <Select\n                      value={user?.preferredLanguage || \"en\"}\n                      onValueChange={(value) => updateLanguageMutation.mutate(value)}\n                    >\n                      <SelectTrigger className=\"bg-slate-800 border-slate-600 text-white\" data-testid=\"select-language\">\n                        <SelectValue placeholder=\"Select language\" />\n                      </SelectTrigger>\n                      <SelectContent className=\"bg-slate-800 border-slate-600\">\n                        {languages.map((lang) => (\n                          <SelectItem key={lang.code} value={lang.code}>\n                            {lang.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    {updateLanguageMutation.isPending && (\n                      <p className=\"text-slate-400 text-sm\">Updating language preference...</p>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":31823},"client/src/components/dashboard/ai-tools.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Zap, \n  Copy, \n  TrendingUp, \n  Search, \n  Heart, \n  Upload, \n  Wand2,\n  Package,\n  Target,\n  ImageIcon,\n  Palette,\n  Brain,\n  Camera,\n  FlaskConical,\n  RefreshCw,\n  Sparkles,\n  FileText,\n  BarChart3\n} from \"lucide-react\";\n\ninterface GenerateForm {\n  productName: string;\n  category: string;\n  features: string;\n  audience: string;\n}\n\ninterface GeneratedResult {\n  sales?: string;\n  seo?: string;\n  casual?: string;\n}\n\nexport default function AITools() {\n  const { toast } = useToast();\n  const [activeToolId, setActiveToolId] = useState<string | null>(null);\n  const [brandVoice, setBrandVoice] = useState(\"sales\");\n  const [generatedResults, setGeneratedResults] = useState<GeneratedResult>({});\n\n  const form = useForm<GenerateForm>({\n    defaultValues: {\n      productName: \"\",\n      category: \"Electronics\",\n      features: \"\",\n      audience: \"General consumers\",\n    },\n  });\n\n  // Mock mutation for AI generation (placeholder for MVP)\n  const generateMutation = useMutation({\n    mutationFn: async (data: any) => {\n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      // Mock response based on tool type\n      const mockResponses = {\n        'product-descriptions': {\n          description: `Experience premium quality with our ${data.productName}. ${data.features ? `Featuring ${data.features}, ` : ''}this product delivers exceptional value for ${data.audience}.`\n        },\n        'bulk-optimization': {\n          message: `Successfully optimized ${Math.floor(Math.random() * 50) + 20} products with improved SEO scores and conversion rates.`\n        },\n        'seo-titles': {\n          title: `${data.productName} - Premium Quality & Fast Shipping | YourStore`,\n          meta: `Shop ${data.productName} with confidence. ${data.features} Perfect for ${data.audience}. Free shipping on orders over $50.`\n        },\n        'image-alt-text': {\n          altText: `High-quality ${data.productName} showing ${data.features} in professional studio lighting`\n        }\n      };\n      \n      return mockResponses[data.toolId as keyof typeof mockResponses] || { message: 'AI processing completed successfully!' };\n    },\n    onSuccess: (result, variables) => {\n      if (variables.toolId === 'product-descriptions' && 'description' in result) {\n        setGeneratedResults(prev => ({\n          ...prev,\n          [variables.brandVoice || 'sales']: result.description,\n        }));\n      }\n      \n      toast({\n        title: \"AI Processing Complete!\",\n        description: `${getToolById(variables.toolId)?.title} completed successfully.`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Processing failed\",\n        description: error.message || \"Failed to process with AI\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const aiTools = [\n    {\n      id: 'product-descriptions',\n      title: 'Smart Product Descriptions',\n      description: 'AI generates compelling descriptions in 3 styles: Sales, SEO, and Casual',\n      icon: <FileText className=\"w-6 h-6 sm:w-7 sm:h-7 lg:w-8 lg:h-8\" />,\n      category: 'existing',\n      gradient: 'from-blue-500 to-cyan-400',\n      actionText: 'Generate Descriptions',\n      comingSoon: false\n    },\n    {\n      id: 'bulk-optimization',\n      title: 'Bulk Optimization',\n      description: 'Optimize 20-100+ products in one go with AI-powered enhancements',\n      icon: <Package className=\"w-6 h-6 sm:w-7 sm:h-7 lg:w-8 lg:h-8\" />,\n      category: 'existing', \n      gradient: 'from-green-500 to-emerald-400',\n      actionText: 'Start Bulk Process',\n      comingSoon: false\n    },\n    {\n      id: 'seo-titles',\n      title: 'SEO Titles & Meta Tags',\n      description: 'Keyword-rich, AI-crafted titles and meta descriptions for better search rankings',\n      icon: <Search className=\"w-6 h-6 sm:w-7 sm:h-7 lg:w-8 lg:h-8\" />,\n      category: 'existing',\n      gradient: 'from-purple-500 to-violet-400', \n      actionText: 'Generate SEO',\n      comingSoon: false\n    },\n    {\n      id: 'image-alt-text',\n      title: 'AI Image Alt-Text',\n      description: 'Auto-generate alt-text for accessibility and SEO optimization',\n      icon: <ImageIcon className=\"w-6 h-6 sm:w-7 sm:h-7 lg:w-8 lg:h-8\" />,\n      category: 'existing',\n      gradient: 'from-orange-500 to-yellow-400',\n      actionText: 'Process Images',\n      comingSoon: false\n    },\n    {\n      id: 'dynamic-templates',\n      title: 'Dynamic Templates',\n      description: 'Pre-built tones: Luxury, Gen Z, Eco, Minimalist, and more',\n      icon: <Palette className=\"w-6 h-6 sm:w-7 sm:h-7 lg:w-8 lg:h-8\" />,\n      category: 'new',\n      gradient: 'from-pink-500 to-rose-400',\n      actionText: 'Choose Template',\n      comingSoon: true\n    },\n    {\n      id: 'brand-voice',\n      title: 'Brand Voice Memory',\n      description: 'Set your brand tone once, Zyra applies it everywhere automatically',\n      icon: <Brain className=\"w-6 h-6 sm:w-7 sm:h-7 lg:w-8 lg:h-8\" />,\n      category: 'new',\n      gradient: 'from-indigo-500 to-blue-400',\n      actionText: 'Setup Voice',\n      comingSoon: true\n    },\n    {\n      id: 'multimodal-ai',\n      title: 'Multimodal AI',\n      description: 'Upload product images + tags for richer, more accurate copy generation',\n      icon: <Camera className=\"w-6 h-6 sm:w-7 sm:h-7 lg:w-8 lg:h-8\" />,\n      category: 'new',\n      gradient: 'from-teal-500 to-cyan-400',\n      actionText: 'Upload & Generate',\n      comingSoon: true\n    },\n    {\n      id: 'ab-testing',\n      title: 'A/B Testing Copy',\n      description: 'Auto-generate multiple versions, track CTR/conversions, keep the winner',\n      icon: <FlaskConical className=\"w-8 h-8\" />,\n      category: 'new',\n      gradient: 'from-red-500 to-pink-400',\n      actionText: 'Start A/B Test',\n      comingSoon: true\n    },\n    {\n      id: 'scheduled-refresh',\n      title: 'Scheduled Refresh',\n      description: 'Auto-update SEO/descriptions every 3-6 months for content freshness',\n      icon: <RefreshCw className=\"w-8 h-8\" />,\n      category: 'new',\n      gradient: 'from-violet-500 to-purple-400',\n      actionText: 'Schedule Updates',\n      comingSoon: true\n    }\n  ];\n\n  const getToolById = (id: string) => aiTools.find(tool => tool.id === id);\n\n  const handleToolAction = (toolId: string) => {\n    const tool = getToolById(toolId);\n    \n    if (tool?.comingSoon) {\n      toast({\n        title: \"Coming Soon!\",\n        description: `${tool.title} will be available in a future update.`,\n      });\n      return;\n    }\n\n    if (toolId === 'product-descriptions') {\n      setActiveToolId(toolId);\n    } else {\n      // For other tools, simulate processing\n      generateMutation.mutate({ \n        toolId,\n        productName: form.getValues(\"productName\") || \"Sample Product\",\n        features: form.getValues(\"features\") || \"premium features\",\n        audience: form.getValues(\"audience\") || \"general consumers\"\n      });\n    }\n  };\n\n  const onSubmit = (data: GenerateForm) => {\n    generateMutation.mutate({ ...data, brandVoice, toolId: 'product-descriptions' });\n  };\n\n  const copyToClipboard = async (text: string, type: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      toast({\n        title: \"Copied!\",\n        description: `${type} description copied to clipboard.`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Copy failed\",\n        description: \"Failed to copy to clipboard\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const voiceButtons = [\n    { id: \"sales\", label: \"Sales\", icon: <TrendingUp className=\"w-4 h-4\" /> },\n    { id: \"seo\", label: \"SEO\", icon: <Search className=\"w-4 h-4\" /> },\n    { id: \"casual\", label: \"Casual\", icon: <Heart className=\"w-4 h-4\" /> },\n  ];\n\n  return (\n    <div className=\"max-w-7xl mx-auto space-y-8\">\n      {/* AI Tools Hub Header */}\n      <div className=\"text-center space-y-4\">\n        <div className=\"flex items-center justify-center space-x-2\">\n          <Sparkles className=\"w-8 h-8 text-primary\" />\n          <h1 className=\"text-4xl font-bold bg-gradient-to-r from-primary to-blue-400 bg-clip-text text-transparent\">\n            AI Tools Hub\n          </h1>\n        </div>\n        <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n          Supercharge your e-commerce with AI-powered content generation, optimization, and automation\n        </p>\n      </div>\n\n      {/* Tools Grid */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 sm:gap-6\">\n        {aiTools.map((tool) => (\n          <Card \n            key={tool.id} \n            className=\"group relative overflow-hidden border-0 bg-gradient-to-br from-[#021024] via-[#052659] to-[#021024] rounded-xl shadow-md hover:shadow-lg transition-all duration-300 hover:scale-105\"\n            data-testid={`card-${tool.id}`}\n          >\n            <div className=\"h-full p-6 space-y-4\">\n              <CardHeader className=\"p-0\">\n                <div className=\"flex items-start justify-between mb-4\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"text-[#C1E8FF]\">\n                      {tool.icon}\n                    </div>\n                    <CardTitle className=\"text-xl font-semibold text-white\">\n                      {tool.title}\n                    </CardTitle>\n                  </div>\n                  {tool.comingSoon && (\n                    <Badge className=\"bg-slate-700 text-slate-200 text-xs px-2 py-1 rounded-full hover:bg-slate-700\">\n                      Coming Soon\n                    </Badge>\n                  )}\n                </div>\n                <CardDescription className=\"text-slate-300 text-sm leading-relaxed\">\n                  {tool.description}\n                </CardDescription>\n              </CardHeader>\n              \n              <Button\n                onClick={() => handleToolAction(tool.id)}\n                disabled={generateMutation.isPending || tool.comingSoon}\n                className={`w-full transition-all duration-200 border-0 font-medium ${\n                  tool.comingSoon \n                    ? 'bg-black text-white opacity-50 cursor-not-allowed' \n                    : 'bg-[#C1E8FF] text-[#052659] hover:shadow-lg hover:scale-105 active:scale-95'\n                }`}\n                data-testid={`button-${tool.id}`}\n              >\n                <Wand2 className=\"w-4 h-4 mr-2\" />\n                {generateMutation.isPending && activeToolId === tool.id \n                  ? 'Processing...' \n                  : tool.actionText\n                }\n              </Button>\n            </div>\n          </Card>\n        ))}\n      </div>\n\n      {/* Product Description Generator Form (when active) */}\n      {activeToolId === 'product-descriptions' && (\n        <Card className=\"border-2 border-primary/20 shadow-2xl\">\n          <CardHeader>\n            <CardTitle className=\"text-2xl flex items-center\">\n              <FileText className=\"w-6 h-6 mr-2 text-primary\" />\n              Smart Product Description Generator\n            </CardTitle>\n            <CardDescription>\n              Generate compelling product descriptions in multiple AI-powered styles\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"grid md:grid-cols-2 gap-8\">\n              <div className=\"space-y-6\">\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                  <div>\n                    <Label htmlFor=\"productName\">Product Name *</Label>\n                    <Input\n                      id=\"productName\"\n                      className=\"mt-2\"\n                      placeholder=\"e.g., Wireless Bluetooth Headphones\"\n                      {...form.register(\"productName\", { required: true })}\n                      data-testid=\"input-product-name\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"category\">Product Category</Label>\n                    <Select \n                      value={form.watch(\"category\")} \n                      onValueChange={(value) => form.setValue(\"category\", value)}\n                    >\n                      <SelectTrigger className=\"mt-2\" data-testid=\"select-category\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"Electronics\">Electronics</SelectItem>\n                        <SelectItem value=\"Clothing & Accessories\">Clothing & Accessories</SelectItem>\n                        <SelectItem value=\"Home & Garden\">Home & Garden</SelectItem>\n                        <SelectItem value=\"Sports & Outdoors\">Sports & Outdoors</SelectItem>\n                        <SelectItem value=\"Beauty & Health\">Beauty & Health</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"features\">Key Features (comma-separated)</Label>\n                    <Textarea\n                      id=\"features\"\n                      className=\"mt-2 h-24 resize-none\"\n                      placeholder=\"e.g., Noise cancelling, 30-hour battery, wireless charging\"\n                      {...form.register(\"features\")}\n                      data-testid=\"textarea-features\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"audience\">Target Audience</Label>\n                    <Select \n                      value={form.watch(\"audience\")} \n                      onValueChange={(value) => form.setValue(\"audience\", value)}\n                    >\n                      <SelectTrigger className=\"mt-2\" data-testid=\"select-audience\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"General consumers\">General consumers</SelectItem>\n                        <SelectItem value=\"Tech enthusiasts\">Tech enthusiasts</SelectItem>\n                        <SelectItem value=\"Business professionals\">Business professionals</SelectItem>\n                        <SelectItem value=\"Athletes & fitness enthusiasts\">Athletes & fitness enthusiasts</SelectItem>\n                        <SelectItem value=\"Students\">Students</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label>Brand Voice</Label>\n                    <div className=\"grid grid-cols-3 gap-2 mt-2\">\n                      {voiceButtons.map((voice) => (\n                        <Button\n                          key={voice.id}\n                          type=\"button\"\n                          onClick={() => setBrandVoice(voice.id)}\n                          className={brandVoice === voice.id ? \"bg-primary text-primary-foreground\" : \"\"}\n                          variant={brandVoice === voice.id ? \"default\" : \"outline\"}\n                          data-testid={`button-voice-${voice.id}`}\n                        >\n                          {voice.icon}\n                          <span className=\"ml-2\">{voice.label}</span>\n                        </Button>\n                      ))}\n                    </div>\n                  </div>\n\n                  <Button\n                    type=\"submit\"\n                    className=\"w-full bg-gradient-to-r from-primary to-blue-400 hover:shadow-lg\"\n                    disabled={generateMutation.isPending}\n                    data-testid=\"button-generate\"\n                  >\n                    {generateMutation.isPending ? (\n                      <>Generating...</>\n                    ) : (\n                      <>\n                        <Zap className=\"w-4 h-4 mr-2\" />\n                        Generate Descriptions\n                      </>\n                    )}\n                  </Button>\n                </form>\n              </div>\n\n              {/* Product Image Upload */}\n              <div>\n                <Label>Product Image (Optional)</Label>\n                <div \n                  className=\"border-2 border-dashed border-border rounded-lg p-8 text-center hover:border-primary/50 transition-colors cursor-pointer mt-2\"\n                  data-testid=\"upload-area\"\n                >\n                  <Upload className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                  <p className=\"text-muted-foreground mb-2\">Drag & drop your image here</p>\n                  <p className=\"text-sm text-muted-foreground\">or click to browse</p>\n                  <input type=\"file\" accept=\"image/*\" className=\"hidden\" />\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Generated Results */}\n      {Object.keys(generatedResults).length > 0 && (\n        <div className=\"space-y-6\">\n          {generatedResults.sales && (\n            <Card className=\"border-2 border-green-200\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"text-xl font-semibold flex items-center\">\n                    <TrendingUp className=\"w-5 h-5 text-green-600 mr-2\" />\n                    Sales Style\n                  </h3>\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => copyToClipboard(generatedResults.sales!, \"Sales\")}\n                      data-testid=\"button-copy-sales\"\n                    >\n                      <Copy className=\"w-4 h-4\" />\n                    </Button>\n                    <Button className=\"bg-gradient-to-r from-green-500 to-emerald-400 text-white\" data-testid=\"button-use-sales\">\n                      Use This\n                    </Button>\n                  </div>\n                </div>\n                <div className=\"bg-muted/30 p-4 rounded-lg\">\n                  <p className=\"text-foreground leading-relaxed\" data-testid=\"text-sales-result\">\n                    {generatedResults.sales}\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {generatedResults.seo && (\n            <Card className=\"border-2 border-blue-200\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"text-xl font-semibold flex items-center\">\n                    <Search className=\"w-5 h-5 text-blue-600 mr-2\" />\n                    SEO Style\n                  </h3>\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => copyToClipboard(generatedResults.seo!, \"SEO\")}\n                      data-testid=\"button-copy-seo\"\n                    >\n                      <Copy className=\"w-4 h-4\" />\n                    </Button>\n                    <Button className=\"bg-gradient-to-r from-blue-500 to-cyan-400 text-white\" data-testid=\"button-use-seo\">\n                      Use This\n                    </Button>\n                  </div>\n                </div>\n                <div className=\"bg-muted/30 p-4 rounded-lg\">\n                  <p className=\"text-foreground leading-relaxed\" data-testid=\"text-seo-result\">\n                    {generatedResults.seo}\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {generatedResults.casual && (\n            <Card className=\"border-2 border-pink-200\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"text-xl font-semibold flex items-center\">\n                    <Heart className=\"w-5 h-5 text-pink-600 mr-2\" />\n                    Casual Style\n                  </h3>\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => copyToClipboard(generatedResults.casual!, \"Casual\")}\n                      data-testid=\"button-copy-casual\"\n                    >\n                      <Copy className=\"w-4 h-4\" />\n                    </Button>\n                    <Button className=\"bg-gradient-to-r from-pink-500 to-rose-400 text-white\" data-testid=\"button-use-casual\">\n                      Use This\n                    </Button>\n                  </div>\n                </div>\n                <div className=\"bg-muted/30 p-4 rounded-lg\">\n                  <p className=\"text-foreground leading-relaxed\" data-testid=\"text-casual-result\">\n                    {generatedResults.casual}\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      )}\n\n      {/* Close Tool */}\n      {activeToolId && (\n        <div className=\"flex justify-center\">\n          <Button\n            variant=\"outline\"\n            onClick={() => setActiveToolId(null)}\n            data-testid=\"button-close-tool\"\n          >\n            Close Tool\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":22089},"client/src/components/dashboard/analytics.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState } from \"react\";\nimport { \n  Eye, \n  MousePointer, \n  Search, \n  Mail,\n  Download,\n  TrendingUp,\n  BarChart3,\n  ChevronDown,\n  FileText,\n  FileSpreadsheet\n} from \"lucide-react\";\nimport { generateCSV, generatePDF, downloadFile, getExportFilename, type ExportData } from \"@/lib/exportUtils\";\n\nexport default function Analytics() {\n  const { toast } = useToast();\n  const [isExporting, setIsExporting] = useState(false);\n  \n  // Fetch analytics data from the API\n  const { data: analytics, isLoading, error } = useQuery({\n    queryKey: [\"/api/analytics\"],\n  });\n\n  const { data: products } = useQuery({\n    queryKey: [\"/api/products\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center py-16\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"text-center py-16\">\n        <BarChart3 className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n        <h3 className=\"text-2xl font-bold mb-2\">Analytics Unavailable</h3>\n        <p className=\"text-muted-foreground mb-6\">Unable to load analytics data. Please try again later.</p>\n        <Button className=\"gradient-button\" onClick={() => window.location.reload()}>\n          Retry\n        </Button>\n      </div>\n    );\n  }\n\n  // Sample metrics for display - in production these would come from the API\n  const keyMetrics = [\n    {\n      icon: <Eye className=\"w-6 h-6\" />,\n      title: \"Page Views\",\n      value: \"147,325\",\n      change: \"+25.3%\",\n      positive: true,\n    },\n    {\n      icon: <MousePointer className=\"w-6 h-6\" />,\n      title: \"Click Rate\", \n      value: \"4.2%\",\n      change: \"+18.7%\",\n      positive: true,\n    },\n    {\n      icon: <Search className=\"w-6 h-6\" />,\n      title: \"Avg. Search Rank\",\n      value: \"12\",\n      change: \"+42.1%\",\n      positive: true,\n    },\n    {\n      icon: <Mail className=\"w-6 h-6\" />,\n      title: \"Email Open Rate\",\n      value: \"68.5%\", \n      change: \"+12.8%\",\n      positive: true,\n    },\n  ];\n\n  const topProducts = (products as any)?.slice(0, 3) || [];\n\n  // Prepare export data\n  const prepareExportData = (): ExportData => {\n    return {\n      keyMetrics: keyMetrics.map(metric => ({\n        title: metric.title,\n        value: metric.value,\n        change: metric.change,\n        positive: metric.positive\n      })),\n      products: (products as any) || [],\n      emailPerformance: {\n        delivered: \"12,450\",\n        opened: \"8,523 (68.5%)\",\n        clicked: \"1,247 (14.6%)\",\n        converted: \"324 (26%)\"\n      },\n      smsPerformance: {\n        sent: \"3,240\",\n        delivered: \"3,186 (98.3%)\",\n        clicked: \"892 (28%)\",\n        recovered: \"267 (30%)\"\n      },\n      seoPerformance: {\n        optimizedProducts: (products as any)?.filter((p: any) => p.isOptimized).length || 0,\n        rankingImprovement: \"+8 positions\",\n        organicTraffic: \"+42%\",\n        keywordRankings: \"234 in top 10\"\n      }\n    };\n  };\n\n  // Handle export functionality\n  const handleExport = async (format: 'csv' | 'pdf') => {\n    if (isExporting) return;\n    \n    setIsExporting(true);\n    \n    try {\n      const exportData = prepareExportData();\n      const filename = getExportFilename(format);\n      \n      if (format === 'csv') {\n        const csvContent = generateCSV(exportData);\n        downloadFile(csvContent, filename, 'csv');\n        toast({\n          title: \"✅ CSV Export Successful\",\n          description: `Your analytics report has been downloaded as ${filename}`,\n        });\n      } else if (format === 'pdf') {\n        const pdfDoc = generatePDF(exportData);\n        downloadFile(pdfDoc, filename, 'pdf');\n        toast({\n          title: \"✅ PDF Export Successful\", \n          description: `Your analytics report has been downloaded as ${filename}`,\n        });\n      }\n    } catch (error) {\n      console.error('Export error:', error);\n      toast({\n        title: \"❌ Export Failed\",\n        description: \"There was an error generating your report. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      // Add slight delay to show loading state\n      setTimeout(() => setIsExporting(false), 500);\n    }\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-3xl font-bold mb-2\" data-testid=\"text-analytics-title\">Analytics Dashboard</h2>\n          <p className=\"text-muted-foreground\">Track your optimization performance and ROI</p>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <Select defaultValue=\"7days\">\n            <SelectTrigger className=\"form-input w-40\" data-testid=\"select-date-range\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"7days\">Last 7 days</SelectItem>\n              <SelectItem value=\"30days\">Last 30 days</SelectItem>\n              <SelectItem value=\"90days\">Last 90 days</SelectItem>\n            </SelectContent>\n          </Select>\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button \n                className=\"gradient-button transition-all duration-200 hover:scale-105 active:scale-95 hover:shadow-lg\" \n                disabled={isExporting}\n                data-testid=\"button-export-report\"\n              >\n                <Download className={`w-4 h-4 mr-2 ${isExporting ? 'animate-pulse' : ''}`} />\n                {isExporting ? 'Generating...' : 'Export Report'}\n                <ChevronDown className=\"w-4 h-4 ml-2\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"w-48\">\n              <DropdownMenuItem \n                onClick={() => handleExport('csv')}\n                disabled={isExporting}\n                className=\"cursor-pointer hover:bg-accent transition-colors\"\n                data-testid=\"menu-export-csv\"\n              >\n                <FileSpreadsheet className=\"w-4 h-4 mr-2 text-green-600\" />\n                Export as CSV\n                <span className=\"ml-auto text-xs text-muted-foreground\">Excel/Sheets</span>\n              </DropdownMenuItem>\n              <DropdownMenuItem \n                onClick={() => handleExport('pdf')}\n                disabled={isExporting}\n                className=\"cursor-pointer hover:bg-accent transition-colors\"\n                data-testid=\"menu-export-pdf\"\n              >\n                <FileText className=\"w-4 h-4 mr-2 text-red-600\" />\n                Export as PDF\n                <span className=\"ml-auto text-xs text-muted-foreground\">Document</span>\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      </div>\n\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {keyMetrics.map((metric, index) => (\n          <Card key={index} className=\"stat-card border-0\" data-testid={`card-metric-${index}`}>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"w-12 h-12 bg-primary/20 rounded-lg flex items-center justify-center text-primary\">\n                  {metric.icon}\n                </div>\n                <Badge \n                  variant={metric.positive ? \"default\" : \"destructive\"}\n                  className={metric.positive ? \"bg-green-400/10 text-green-400\" : \"bg-orange-400/10 text-orange-400\"}\n                >\n                  {metric.change}\n                </Badge>\n              </div>\n              <div className=\"text-2xl font-bold mb-1\" data-testid={`text-metric-value-${index}`}>{metric.value}</div>\n              <div className=\"text-sm text-muted-foreground\" data-testid={`text-metric-title-${index}`}>{metric.title}</div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Charts Grid */}\n      <div className=\"grid lg:grid-cols-2 gap-8\">\n        {/* Performance Chart */}\n        <Card className=\"gradient-card border-0\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-xl font-semibold mb-6\" data-testid=\"text-performance-chart-title\">Optimization Performance</h3>\n            <div className=\"h-64 bg-muted/30 rounded-lg flex items-center justify-center\">\n              <div className=\"text-center\">\n                <TrendingUp className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                <p className=\"text-muted-foreground\" data-testid=\"text-chart-placeholder\">Performance Chart</p>\n                <p className=\"text-sm text-muted-foreground\">Revenue, conversions, and optimization metrics over time</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Top Products */}\n        <Card className=\"gradient-card border-0\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-xl font-semibold mb-6\" data-testid=\"text-top-products-title\">Top Performing Products</h3>\n            <div className=\"space-y-4\">\n              {topProducts.length > 0 ? (\n                topProducts.map((product: any, index: number) => (\n                  <div key={product.id} className=\"flex items-center justify-between p-4 bg-muted/30 rounded-lg\" data-testid={`card-top-product-${index}`}>\n                    <div className=\"flex items-center\">\n                      <div className=\"w-12 h-12 bg-primary/20 rounded-lg flex items-center justify-center mr-4\">\n                        <TrendingUp className=\"w-6 h-6 text-primary\" />\n                      </div>\n                      <div>\n                        <div className=\"font-medium\" data-testid={`text-product-name-${index}`}>{product.name}</div>\n                        <div className=\"text-sm text-muted-foreground\" data-testid={`text-product-optimized-${index}`}>\n                          {product.isOptimized ? \"Optimized\" : \"Not optimized\"}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"font-medium text-green-400\" data-testid={`text-product-improvement-${index}`}>\n                        {product.isOptimized ? \"+32%\" : \"--\"}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">Conversion</div>\n                    </div>\n                  </div>\n                ))\n              ) : (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-muted-foreground\" data-testid=\"text-no-products\">No products available</p>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Detailed Analytics */}\n      <div className=\"grid lg:grid-cols-3 gap-8\">\n        {/* Email Performance */}\n        <Card className=\"gradient-card border-0\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold mb-4\" data-testid=\"text-email-performance-title\">Email Campaign Performance</h3>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm\">Delivered</span>\n                <span className=\"font-medium\" data-testid=\"text-email-delivered\">12,450</span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm\">Opened</span>\n                <span className=\"font-medium\" data-testid=\"text-email-opened\">8,523 (68.5%)</span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm\">Clicked</span>\n                <span className=\"font-medium\" data-testid=\"text-email-clicked\">1,247 (14.6%)</span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm\">Converted</span>\n                <span className=\"font-medium\" data-testid=\"text-email-converted\">324 (26%)</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* SMS Performance */}\n        <Card className=\"gradient-card border-0\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold mb-4\" data-testid=\"text-sms-performance-title\">SMS Campaign Performance</h3>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm\">Sent</span>\n                <span className=\"font-medium\" data-testid=\"text-sms-sent\">3,240</span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm\">Delivered</span>\n                <span className=\"font-medium\" data-testid=\"text-sms-delivered\">3,186 (98.3%)</span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm\">Clicked</span>\n                <span className=\"font-medium\" data-testid=\"text-sms-clicked\">892 (28%)</span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm\">Recovered</span>\n                <span className=\"font-medium\" data-testid=\"text-sms-recovered\">267 (30%)</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* SEO Performance */}\n        <Card className=\"gradient-card border-0\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold mb-4\" data-testid=\"text-seo-performance-title\">SEO Performance</h3>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm\">Optimized Products</span>\n                <span className=\"font-medium\" data-testid=\"text-seo-optimized-products\">\n                  {(products as any)?.filter((p: any) => p.isOptimized).length || 0}\n                </span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm\">Avg. Ranking Improvement</span>\n                <span className=\"font-medium text-green-400\" data-testid=\"text-seo-ranking-improvement\">+8 positions</span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm\">Organic Traffic</span>\n                <span className=\"font-medium text-green-400\" data-testid=\"text-seo-organic-traffic\">+42%</span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm\">Keyword Rankings</span>\n                <span className=\"font-medium\" data-testid=\"text-seo-keyword-rankings\">234 in top 10</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15553},"client/src/components/dashboard/automation-tools.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Upload, \n  Download, \n  Share, \n  Brain, \n  RotateCcw,\n  FileSpreadsheet,\n  Package,\n  TrendingUp\n} from \"lucide-react\";\n\ninterface AutomationTool {\n  id: string;\n  title: string;\n  description: string;\n  icon: JSX.Element;\n  category: 'existing' | 'new';\n  actionText: string;\n  comingSoon: boolean;\n  tooltip: string;\n}\n\nexport default function AutomationTools() {\n  const { toast } = useToast();\n\n  const automationTools: AutomationTool[] = [\n    {\n      id: 'csv-import-export',\n      title: 'CSV Import/Export',\n      description: 'Upload or download CSV files for bulk product management and data synchronization',\n      icon: <FileSpreadsheet className=\"w-6 h-6 sm:w-7 sm:h-7 lg:w-8 lg:h-8\" style={{ color: '#C1E8FF' }} />,\n      category: 'existing',\n      actionText: 'Upload CSV / Export CSV',\n      comingSoon: false,\n      tooltip: 'Bulk upload products from CSV or export your existing products for external management'\n    },\n    {\n      id: 'shopify-publish',\n      title: 'One-Click Shopify Publish',\n      description: 'Push optimized product copy directly to your Shopify store listings instantly',\n      icon: <Share className=\"w-6 h-6 sm:w-7 sm:h-7 lg:w-8 lg:h-8\" style={{ color: '#C1E8FF' }} />,\n      category: 'existing', \n      actionText: 'Publish to Shopify',\n      comingSoon: false,\n      tooltip: 'Automatically sync your optimized product descriptions to Shopify with a single click'\n    },\n    {\n      id: 'bulk-suggestions',\n      title: 'Smart Bulk Suggestions',\n      description: 'AI scans products with low CTR/SEO performance and auto-suggests improvements',\n      icon: <Brain className=\"w-6 h-6 sm:w-7 sm:h-7 lg:w-8 lg:h-8\" style={{ color: '#C1E8FF' }} />,\n      category: 'new',\n      actionText: 'Run Suggestions',\n      comingSoon: true,\n      tooltip: 'Let AI analyze your product performance and automatically suggest title, description, and tag improvements'\n    },\n    {\n      id: 'rollback-changes',\n      title: 'Rollback Button',\n      description: 'Instantly undo recent changes to restore previous versions and ensure data safety',\n      icon: <RotateCcw className=\"w-6 h-6 sm:w-7 sm:h-7 lg:w-8 lg:h-8\" style={{ color: '#C1E8FF' }} />,\n      category: 'new',\n      actionText: 'Rollback Changes',\n      comingSoon: true,\n      tooltip: 'One-click rollback to previous versions of your product data for peace of mind'\n    }\n  ];\n\n  // Mock mutation for automation actions\n  const automationMutation = useMutation({\n    mutationFn: async (data: { toolId: string; action: string }) => {\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      const mockResponses = {\n        'csv-import-export': {\n          message: `Successfully processed CSV file. ${Math.floor(Math.random() * 100) + 50} products updated.`\n        },\n        'shopify-publish': {\n          message: `Published ${Math.floor(Math.random() * 25) + 10} optimized products to your Shopify store.`\n        },\n        'bulk-suggestions': {\n          message: `Generated smart suggestions for ${Math.floor(Math.random() * 30) + 15} products needing optimization.`\n        },\n        'rollback-changes': {\n          message: `Successfully rolled back to previous version. All changes from the last 24 hours have been restored.`\n        }\n      };\n\n      return mockResponses[data.toolId as keyof typeof mockResponses] || { message: 'Action completed successfully.' };\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Success!\",\n        description: data.message,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to complete automation action. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleToolAction = (toolId: string) => {\n    const tool = automationTools.find(t => t.id === toolId);\n    \n    if (tool?.comingSoon) {\n      toast({\n        title: \"Coming Soon!\",\n        description: `${tool.title} will be available in a future update.`,\n      });\n      return;\n    }\n\n    // Handle CSV Import/Export with file operations\n    if (toolId === 'csv-import-export') {\n      const input = document.createElement('input');\n      input.type = 'file';\n      input.accept = '.csv';\n      input.onchange = (e) => {\n        const file = (e.target as HTMLInputElement).files?.[0];\n        if (file) {\n          automationMutation.mutate({ \n            toolId, \n            action: `import-${file.name}` \n          });\n        }\n      };\n      input.click();\n      return;\n    }\n\n    // For other tools, simulate the action\n    automationMutation.mutate({ \n      toolId,\n      action: tool?.actionText || 'execute'\n    });\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"space-y-2\">\n        <h1 className=\"text-2xl sm:text-3xl lg:text-4xl font-bold tracking-tight text-foreground\">Automation Tools</h1>\n        <p className=\"text-sm sm:text-base text-muted-foreground\">\n          Streamline your workflow with powerful automation features for bulk operations and intelligent optimizations.\n        </p>\n      </div>\n\n      {/* Automation Tools Grid */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 sm:gap-6\">\n        {automationTools.map((tool) => (\n          <Card \n            key={tool.id} \n            className=\"relative bg-gradient-to-br from-[#021024] via-[#052659] to-[#021024] rounded-xl shadow-md hover:shadow-lg transition-all duration-300 hover:scale-105 border-slate-700/50\"\n            data-testid={`card-automation-${tool.id}`}\n          >\n            <CardHeader className=\"pb-4\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  {tool.icon}\n                  <CardTitle className=\"text-white font-semibold text-sm sm:text-base lg:text-lg\" data-testid={`text-title-${tool.id}`}>\n                    {tool.title}\n                  </CardTitle>\n                </div>\n                {tool.comingSoon && (\n                  <Badge \n                    variant=\"secondary\" \n                    className=\"bg-slate-700 text-slate-200 text-xs px-2 py-1 rounded-full\"\n                    data-testid={`badge-coming-soon-${tool.id}`}\n                  >\n                    Coming Soon\n                  </Badge>\n                )}\n              </div>\n              <CardDescription className=\"text-slate-300 mt-2\" data-testid={`text-description-${tool.id}`}>\n                {tool.description}\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"pt-0\">\n              <Button\n                onClick={() => handleToolAction(tool.id)}\n                disabled={tool.comingSoon || automationMutation.isPending}\n                className={`w-full ${\n                  tool.comingSoon\n                    ? \"bg-black hover:bg-black text-white\"\n                    : \"bg-[#C1E8FF] hover:bg-[#A8DCFF] text-[#052659] hover:shadow-lg\"\n                } transition-all duration-300`}\n                data-testid={`button-action-${tool.id}`}\n                title={tool.tooltip}\n              >\n                {automationMutation.isPending ? \"Processing...\" : tool.actionText}\n              </Button>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Additional Info */}\n      <div className=\"mt-8 p-6 bg-gradient-to-br from-[#021024] via-[#052659] to-[#021024] rounded-xl border border-slate-700/50\">\n        <div className=\"flex items-start space-x-4\">\n          <TrendingUp className=\"w-6 h-6 text-[#C1E8FF] mt-1 flex-shrink-0\" />\n          <div>\n            <h3 className=\"text-white font-semibold mb-2\">Automation Benefits</h3>\n            <p className=\"text-slate-300 text-sm\">\n              Save hours of manual work with intelligent bulk operations. Process hundreds of products, \n              sync with Shopify, and get AI-powered optimization suggestions to maximize your store's performance.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8466},"client/src/components/dashboard/campaigns.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Mail, \n  MessageSquare, \n  FileText, \n  Brain, \n  Target, \n  Users, \n  RotateCcw,\n  Zap,\n  TrendingUp,\n  Sparkles\n} from \"lucide-react\";\n\ninterface CampaignTool {\n  id: string;\n  title: string;\n  description: string;\n  icon: JSX.Element;\n  category: 'existing' | 'new';\n  actionText: string;\n  comingSoon: boolean;\n  tooltip: string;\n}\n\nexport default function Campaigns() {\n  const { toast } = useToast();\n\n  const campaignTools: CampaignTool[] = [\n    {\n      id: 'upsell-receipts',\n      title: 'Upsell Email Receipts',\n      description: 'Auto-generate branded email receipts that include personalized upsell offers and recommendations',\n      icon: <Mail className=\"w-6 h-6 stroke-2\" style={{ color: '#C1E8FF' }} />,\n      category: 'existing',\n      actionText: 'Configure Receipts',\n      comingSoon: false,\n      tooltip: 'Automatically add upsell recommendations to every purchase confirmation email'\n    },\n    {\n      id: 'abandoned-cart-sms',\n      title: 'Abandoned Cart SMS',\n      description: 'AI-crafted SMS messages to recover abandoned carts with personalized incentives',\n      icon: <MessageSquare className=\"w-6 h-6 stroke-2\" style={{ color: '#C1E8FF' }} />,\n      category: 'existing',\n      actionText: 'Setup SMS Recovery',\n      comingSoon: false,\n      tooltip: 'Send targeted SMS campaigns to recover lost sales from abandoned shopping carts'\n    },\n    {\n      id: 'custom-templates',\n      title: 'Custom Templates',\n      description: 'Create and edit email & SMS workflow templates with drag-and-drop builder',\n      icon: <FileText className=\"w-6 h-6 stroke-2\" style={{ color: '#C1E8FF' }} />,\n      category: 'existing',\n      actionText: 'Edit Templates',\n      comingSoon: false,\n      tooltip: 'Design custom email and SMS templates for all your marketing workflows'\n    },\n    {\n      id: 'behavioral-triggers',\n      title: 'Behavioral Triggers',\n      description: 'AI decides optimal timing & channel - email for active users, SMS for inactive ones',\n      icon: <Brain className=\"w-6 h-6 stroke-2\" style={{ color: '#C1E8FF' }} />,\n      category: 'new',\n      actionText: 'Setup Triggers',\n      comingSoon: true,\n      tooltip: 'Let AI automatically choose the best communication channel and timing for each customer'\n    },\n    {\n      id: 'ai-upsell-suggestions',\n      title: 'AI Upsell Suggestions',\n      description: 'Auto-pick the most relevant products to recommend from your entire catalog',\n      icon: <Sparkles className=\"w-6 h-6 stroke-2\" style={{ color: '#C1E8FF' }} />,\n      category: 'new',\n      actionText: 'Enable AI Upsells',\n      comingSoon: true,\n      tooltip: 'AI analyzes purchase history and product relationships to suggest perfect upsells'\n    },\n    {\n      id: 'dynamic-segmentation',\n      title: 'Dynamic Segmentation',\n      description: 'Auto-segment customers into groups: first-timers, loyal buyers, discount seekers',\n      icon: <Users className=\"w-6 h-6 stroke-2\" style={{ color: '#C1E8FF' }} />,\n      category: 'new',\n      actionText: 'View Segments',\n      comingSoon: true,\n      tooltip: 'Automatically group customers based on behavior patterns for targeted messaging'\n    },\n    {\n      id: 'multi-channel-repurposing',\n      title: 'Multi-Channel Repurposing',\n      description: 'Convert one product copy into multiple formats: ad copy → social → email → SMS',\n      icon: <RotateCcw className=\"w-6 h-6 stroke-2\" style={{ color: '#C1E8FF' }} />,\n      category: 'new',\n      actionText: 'Generate Variants',\n      comingSoon: true,\n      tooltip: 'Transform one piece of content into optimized versions for all marketing channels'\n    }\n  ];\n\n  // Mock mutation for campaign actions\n  const campaignMutation = useMutation({\n    mutationFn: async (data: { toolId: string; action: string }) => {\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      const mockResponses = {\n        'upsell-receipts': {\n          message: `Configured upsell receipts for ${Math.floor(Math.random() * 500) + 200} products. Expected 15-25% revenue increase.`\n        },\n        'abandoned-cart-sms': {\n          message: `SMS recovery campaigns activated. Targeting ${Math.floor(Math.random() * 150) + 50} abandoned carts in the last 24 hours.`\n        },\n        'custom-templates': {\n          message: `Template editor opened. ${Math.floor(Math.random() * 20) + 10} existing templates available for customization.`\n        }\n      };\n\n      return mockResponses[data.toolId as keyof typeof mockResponses] || { message: 'Campaign action completed successfully.' };\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Campaign Updated!\",\n        description: data.message,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update campaign. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleToolAction = (toolId: string) => {\n    const tool = campaignTools.find(t => t.id === toolId);\n    \n    if (tool?.comingSoon) {\n      toast({\n        title: \"Coming Soon!\",\n        description: `${tool.title} will be available in a future update. Join our newsletter for launch notifications.`,\n      });\n      return;\n    }\n\n    campaignMutation.mutate({ \n      toolId,\n      action: tool?.actionText || 'execute'\n    });\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"space-y-3 mb-8\">\n        <div className=\"flex items-center space-x-3\">\n          <div>\n            <h1 className=\"text-4xl font-bold text-white tracking-tight\">\n              AI Email & SMS Growth Engine\n            </h1>\n            <p className=\"text-slate-300 text-lg\">\n              Automate your customer communications with intelligent campaigns and behavioral triggers\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Campaign Tools Grid */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-2 gap-6\">\n        {campaignTools.map((tool) => (\n          <Card \n            key={tool.id} \n            className=\"relative bg-gradient-to-br from-[#021024] to-[#052659] rounded-2xl transition-all duration-300 hover:scale-105 border-slate-700/50\"\n            data-testid={`card-campaign-${tool.id}`}\n          >\n            <CardHeader className=\"pb-4\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"transition-all duration-300\">\n                    {tool.icon}\n                  </div>\n                  <CardTitle className=\"text-white font-bold text-lg\" data-testid={`text-title-${tool.id}`}>\n                    {tool.title}\n                  </CardTitle>\n                </div>\n                {tool.comingSoon && (\n                  <Badge \n                    variant=\"secondary\" \n                    className=\"bg-slate-700 text-slate-200 text-xs px-2 py-1 rounded-full\"\n                    data-testid={`badge-coming-soon-${tool.id}`}\n                  >\n                    Coming Soon\n                  </Badge>\n                )}\n              </div>\n              <CardDescription className=\"text-slate-300 mt-2\" data-testid={`text-description-${tool.id}`}>\n                {tool.description}\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"pt-0\">\n              <Button\n                onClick={() => handleToolAction(tool.id)}\n                disabled={tool.comingSoon || campaignMutation.isPending}\n                className={`w-full font-medium transition-all duration-300 ${\n                  tool.comingSoon\n                    ? \"bg-black hover:bg-black text-white hover:scale-105\"\n                    : \"bg-[#C1E8FF] hover:bg-[#C1E8FF] text-indigo-900 hover:scale-105\"\n                }`}\n                data-testid={`button-action-${tool.id}`}\n                title={tool.tooltip}\n              >\n                {campaignMutation.isPending ? \"Processing...\" : tool.actionText}\n              </Button>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Stats Overview */}\n      <div className=\"mt-12 grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] rounded-2xl p-6\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"p-3 rounded-full bg-slate-800/50 transition-all duration-300\">\n              <TrendingUp className=\"w-6 h-6 stroke-2\" style={{ color: '#C1E8FF' }} />\n            </div>\n            <div>\n              <h3 className=\"text-white font-bold text-xl\">245%</h3>\n              <p className=\"text-slate-300 text-sm\">Avg. Revenue Increase</p>\n            </div>\n          </div>\n        </Card>\n        \n        <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] rounded-2xl p-6\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"p-3 rounded-full bg-slate-800/50 transition-all duration-300\">\n              <Target className=\"w-6 h-6 stroke-2\" style={{ color: '#C1E8FF' }} />\n            </div>\n            <div>\n              <h3 className=\"text-white font-bold text-xl\">89%</h3>\n              <p className=\"text-slate-300 text-sm\">Cart Recovery Rate</p>\n            </div>\n          </div>\n        </Card>\n        \n        <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] rounded-2xl p-6\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"p-3 rounded-full bg-slate-800/50 transition-all duration-300\">\n              <Zap className=\"w-6 h-6 stroke-2\" style={{ color: '#C1E8FF' }} />\n            </div>\n            <div>\n              <h3 className=\"text-white font-bold text-xl\">12.3x</h3>\n              <p className=\"text-slate-300 text-sm\">Email Engagement</p>\n            </div>\n          </div>\n        </Card>\n      </div>\n\n      {/* Pro Features Notice */}\n      <div className=\"mt-8 p-6 bg-gradient-to-br from-[#021024] to-[#052659] rounded-2xl\">\n        <div className=\"flex items-start space-x-4\">\n          <div className=\"transition-all duration-300\">\n            <Sparkles className=\"w-6 h-6 stroke-2\" style={{ color: '#C1E8FF' }} />\n          </div>\n          <div>\n            <h3 className=\"text-white font-bold text-lg mb-2\">AI-Powered Campaign Intelligence</h3>\n            <p className=\"text-slate-300 text-sm leading-relaxed\">\n              Our advanced AI analyzes customer behavior, purchase patterns, and engagement history to automatically \n              optimize your email and SMS campaigns. From behavioral triggers to dynamic segmentation, \n              every message is personalized for maximum conversion.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":11178},"client/src/components/dashboard/growth-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  ShoppingBag,\n  Mail,\n  MessageSquare,\n  Search,\n  TrendingUp,\n  DollarSign,\n  BarChart3,\n  Zap\n} from \"lucide-react\";\n\ninterface AnalyticsCard {\n  id: string;\n  title: string;\n  description: string;\n  icon: JSX.Element;\n  value: string;\n  change: string;\n  trend: 'up' | 'down' | 'neutral';\n  actionText: string;\n  category: 'metric' | 'performance' | 'growth';\n}\n\nexport default function GrowthDashboard() {\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n\n  const analyticsCards: AnalyticsCard[] = [\n    {\n      id: 'optimized-products',\n      title: 'Optimized Products',\n      description: 'Products enhanced by Zyra AI with improved descriptions and SEO',\n      icon: <ShoppingBag className=\"w-4 h-4 sm:w-5 sm:h-5 stroke-2\" style={{ color: '#C1E8FF' }} />,\n      value: '247',\n      change: '+23 this week',\n      trend: 'up',\n      actionText: 'View Products',\n      category: 'metric'\n    },\n    {\n      id: 'email-performance',\n      title: 'Email Performance',\n      description: 'Email open rates and click-through performance analytics',\n      icon: <Mail className=\"w-4 h-4 sm:w-5 sm:h-5 stroke-2\" style={{ color: '#C1E8FF' }} />,\n      value: '34.2%',\n      change: '+5.7% CTR',\n      trend: 'up',\n      actionText: 'View Analytics',\n      category: 'performance'\n    },\n    {\n      id: 'sms-conversion',\n      title: 'SMS Conversion',\n      description: 'SMS recovery campaigns and sales conversion tracking',\n      icon: <MessageSquare className=\"w-4 h-4 sm:w-5 sm:h-5 stroke-2\" style={{ color: '#C1E8FF' }} />,\n      value: '28.9%',\n      change: '+12.3% conversion',\n      trend: 'up',\n      actionText: 'View Campaigns',\n      category: 'performance'\n    },\n    {\n      id: 'seo-keyword-density',\n      title: 'SEO Keyword Density',\n      description: 'Keyword optimization and search ranking improvements',\n      icon: <Search className=\"w-4 h-4 sm:w-5 sm:h-5 stroke-2\" style={{ color: '#C1E8FF' }} />,\n      value: '92%',\n      change: '+15% this month',\n      trend: 'up',\n      actionText: 'View Keywords',\n      category: 'growth'\n    },\n    {\n      id: 'content-roi',\n      title: 'Content ROI Tracking',\n      description: 'AI-generated content performance and sales impact measurement',\n      icon: <TrendingUp className=\"w-4 h-4 sm:w-5 sm:h-5 stroke-2\" style={{ color: '#C1E8FF' }} />,\n      value: '145%',\n      change: '+34% ROI increase',\n      trend: 'up',\n      actionText: 'View Reports',\n      category: 'growth'\n    },\n    {\n      id: 'revenue-impact',\n      title: 'Revenue Impact',\n      description: 'Total revenue boost from Zyra AI optimizations this month',\n      icon: <DollarSign className=\"w-4 h-4 sm:w-5 sm:h-5 stroke-2\" style={{ color: '#C1E8FF' }} />,\n      value: '$12,847',\n      change: '+$3,200 this month',\n      trend: 'up',\n      actionText: 'View Breakdown',\n      category: 'growth'\n    },\n    {\n      id: 'seo-ranking-tracker',\n      title: 'SEO Ranking Tracker',\n      description: 'Track keyword positions and search visibility over time',\n      icon: <BarChart3 className=\"w-4 h-4 sm:w-5 sm:h-5 stroke-2\" style={{ color: '#C1E8FF' }} />,\n      value: 'Rank #3',\n      change: '+7 positions',\n      trend: 'up',\n      actionText: 'Track Rankings',\n      category: 'growth'\n    },\n    {\n      id: 'ab-test-results',\n      title: 'A/B Test Results',\n      description: 'Performance comparison of different content versions and optimization tests',\n      icon: <Zap className=\"w-4 h-4 sm:w-5 sm:h-5 stroke-2\" style={{ color: '#C1E8FF' }} />,\n      value: '67%',\n      change: '+23% win rate',\n      trend: 'up',\n      actionText: 'View Tests',\n      category: 'performance'\n    }\n  ];\n\n\n  const handleAnalyticsAction = (cardId: string) => {\n    // Navigation mapping for each analytics card\n    const routeMapping = {\n      'optimized-products': '/analytics/optimized-products',\n      'email-performance': '/analytics/email-performance',\n      'sms-conversion': '/analytics/sms-conversion',\n      'seo-keyword-density': '/analytics/seo-keyword-density',\n      'content-roi': '/analytics/content-roi',\n      'revenue-impact': '/analytics/revenue-impact',\n      'seo-ranking-tracker': '/analytics/seo-ranking-tracker',\n      'ab-test-results': '/analytics/ab-test-results'\n    };\n\n    const route = routeMapping[cardId as keyof typeof routeMapping];\n    if (route) {\n      setLocation(route);\n    } else {\n      toast({\n        title: \"Coming Soon\",\n        description: \"This analytics page is being developed.\",\n        duration: 3000,\n      });\n    }\n  };\n\n  return (\n    <div className=\"p-4 sm:p-6 space-y-4 sm:space-y-6\">\n      {/* Header */}\n      <div className=\"space-y-2 sm:space-y-3 mb-6 sm:mb-8\">\n        <div className=\"flex items-center space-x-3\">\n          <div>\n            <h1 className=\"text-2xl sm:text-3xl lg:text-4xl font-bold text-white tracking-tight\">\n              Growth Analytics Dashboard\n            </h1>\n            <p className=\"text-slate-300 text-sm sm:text-base lg:text-lg\">\n              Track your store's performance, optimization impact, and revenue growth powered by Zyra AI\n            </p>\n          </div>\n        </div>\n      </div>\n      {/* Analytics Cards Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 items-stretch auto-rows-fr\">\n        {analyticsCards.map((card) => (\n          <Card \n            key={card.id} \n            className=\"relative bg-gradient-to-br from-[#021024] to-[#052659] rounded-2xl transition-all duration-300 hover:scale-105 border-slate-700/50 hover:shadow-cyan-500/30 flex flex-col h-full\"\n            data-testid={`card-analytics-${card.id}`}\n          >\n            <CardHeader className=\"pb-4 min-h-[120px]\">\n              {/* Card Header with Consistent Flex Layout */}\n              <div className=\"flex items-center justify-between mb-3 min-h-[48px]\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"flex items-center justify-center w-8 h-8 transition-all duration-300\">\n                    {card.icon}\n                  </div>\n                  <CardTitle className=\"text-white font-bold text-sm sm:text-base lg:text-lg flex items-center whitespace-nowrap truncate\" data-testid={`text-title-${card.id}`}>\n                    {card.title}\n                  </CardTitle>\n                </div>\n              </div>\n              <CardDescription className=\"text-slate-300 text-xs sm:text-sm leading-relaxed ml-7 sm:ml-11 min-h-[40px]\" data-testid={`text-description-${card.id}`}>\n                {card.description}\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"pt-0 pb-6 px-6 mt-auto\">\n              <Button\n                onClick={() => handleAnalyticsAction(card.id)}\n                className=\"h-10 w-full font-medium transition-all duration-300 bg-[#C1E8FF] hover:bg-[#C1E8FF] text-indigo-900 hover:scale-105\"\n                data-testid={`button-action-${card.id}`}\n              >\n                {card.actionText}\n              </Button>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n      {/* Growth Summary */}\n      <div className=\"mt-12 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] rounded-2xl p-6\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"p-3 rounded-full bg-slate-800/50 transition-all duration-300\">\n              <TrendingUp className=\"w-6 h-6 stroke-2\" style={{ color: '#C1E8FF' }} />\n            </div>\n            <div>\n              <h3 className=\"text-white font-bold text-xl\">+89%</h3>\n              <p className=\"text-slate-300 text-sm\">Overall Growth</p>\n            </div>\n          </div>\n        </Card>\n        \n        <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] rounded-2xl p-6\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"p-3 rounded-full bg-slate-800/50 transition-all duration-300\">\n              <DollarSign className=\"w-6 h-6 stroke-2\" style={{ color: '#C1E8FF' }} />\n            </div>\n            <div>\n              <h3 className=\"text-white font-bold text-xl\">$45,623</h3>\n              <p className=\"text-slate-300 text-sm\">Total AI Impact</p>\n            </div>\n          </div>\n        </Card>\n        \n        <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] rounded-2xl p-6\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"p-3 rounded-full bg-slate-800/50 transition-all duration-300\">\n              <Zap className=\"w-6 h-6 stroke-2\" style={{ color: '#C1E8FF' }} />\n            </div>\n            <div>\n              <h3 className=\"text-white font-bold text-xl\">247</h3>\n              <p className=\"text-slate-300 text-sm\">Products Optimized</p>\n            </div>\n          </div>\n        </Card>\n      </div>\n      {/* AI Performance Notice */}\n      <div className=\"mt-8 p-6 bg-gradient-to-br from-[#021024] to-[#052659] rounded-2xl\">\n        <div className=\"flex items-start space-x-4\">\n          <div className=\"transition-all duration-300\">\n            <Zap className=\"w-6 h-6 stroke-2\" style={{ color: '#C1E8FF' }} />\n          </div>\n          <div>\n            <h3 className=\"text-white font-bold text-lg mb-2\">AI-Powered Growth Intelligence</h3>\n            <p className=\"text-slate-300 text-sm leading-relaxed\">\n              Your Zyra AI is continuously analyzing customer behavior, optimizing product descriptions, and improving \n              conversion rates. The dashboard shows real-time performance metrics across all optimization channels \n              including email campaigns, SMS recovery, SEO improvements, and content ROI tracking.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":10153},"client/src/components/dashboard/notification-center.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Bell, X, Check, CheckCheck } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { cn } from \"@/lib/utils\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Notification } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface NotificationCenterProps {\n  className?: string;\n}\n\nexport default function NotificationCenter({ className }: NotificationCenterProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  // Fetch notifications from API\n  const { data: notifications = [], isLoading: notificationsLoading } = useQuery<Notification[]>({\n    queryKey: [\"/api/notifications\"],\n    staleTime: 30000, // Cache for 30 seconds\n  });\n\n  const { data: unreadData, isLoading: unreadLoading } = useQuery<{ count: number }>({\n    queryKey: [\"/api/notifications/unread-count\"],\n    staleTime: 30000,\n  });\n\n  const unreadCount = unreadData?.count || 0;\n\n  // Close dropdown when clicking outside\n  useEffect(() => {\n    function handleClickOutside(event: MouseEvent) {\n      if (\n        dropdownRef.current &&\n        buttonRef.current &&\n        !dropdownRef.current.contains(event.target as Node) &&\n        !buttonRef.current.contains(event.target as Node)\n      ) {\n        setIsOpen(false);\n      }\n    }\n\n    if (isOpen) {\n      document.addEventListener(\"mousedown\", handleClickOutside);\n      return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n    }\n  }, [isOpen]);\n\n  // Mutations for notification actions\n  const markAsReadMutation = useMutation({\n    mutationFn: async (notificationId: string) => {\n      const response = await fetch(`/api/notifications/${notificationId}/read`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n      if (!response.ok) throw new Error(\"Failed to mark notification as read\");\n      return response.json();\n    },\n    onSuccess: () => {\n      // Invalidate and refetch notification queries\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications/unread-count\"] });\n    },\n  });\n\n  const clearAllMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(\"/api/notifications/clear-all\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n      if (!response.ok) throw new Error(\"Failed to clear all notifications\");\n      return response.json();\n    },\n    onSuccess: () => {\n      // Invalidate and refetch notification queries\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications/unread-count\"] });\n    },\n  });\n\n  const handleMarkAsRead = (notificationId: string) => {\n    markAsReadMutation.mutate(notificationId);\n  };\n\n  const handleClearAll = () => {\n    clearAllMutation.mutate();\n  };\n\n  const formatTimeAgo = (date: Date) => {\n    const now = new Date();\n    const diffMs = now.getTime() - date.getTime();\n    const diffMins = Math.floor(diffMs / (1000 * 60));\n    \n    if (diffMins < 1) return \"Just now\";\n    if (diffMins < 60) return `${diffMins}m ago`;\n    const diffHours = Math.floor(diffMins / 60);\n    if (diffHours < 24) return `${diffHours}h ago`;\n    const diffDays = Math.floor(diffHours / 24);\n    return `${diffDays}d ago`;\n  };\n\n  const getNotificationIcon = (type: string) => {\n    const icons = {\n      success: \"✅\",\n      warning: \"⚠️\", \n      error: \"❌\",\n      info: \"💡\",\n    };\n    return icons[type as keyof typeof icons] || icons.info;\n  };\n\n  return (\n    <div className={cn(\"relative\", className)}>\n      {/* Dropdown Panel */}\n      {isOpen && (\n        <div\n          ref={dropdownRef}\n          className={cn(\n            \"absolute right-0 top-full mt-2 z-[9999]\",\n            \"w-full sm:w-80 md:w-96\", // Responsive width - full width on mobile\n            \"bg-gradient-to-br from-[#021024] to-[#052659]\",\n            \"rounded-lg border border-border/50 shadow-2xl\",\n            \"backdrop-blur-sm\",\n            \"max-h-[80vh] overflow-hidden\",\n            \"animate-in slide-in-from-top-2 duration-200\"\n          )}\n          data-testid=\"dropdown-notifications\"\n        >\n          {/* Header */}\n          <div className=\"flex items-center justify-between p-4 border-b border-border/30\">\n            <h3 className=\"text-lg font-bold text-white flex items-center gap-2\">\n              <Bell className=\"w-5 h-5\" />\n              Notifications\n            </h3>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setIsOpen(false)}\n              className=\"text-slate-300 hover:text-white h-8 w-8 p-0 flex items-center justify-center\"\n              data-testid=\"button-close-notifications\"\n            >\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </div>\n\n          {/* Notifications List */}\n          <div className=\"max-h-96 overflow-y-auto\">\n            {notifications.length === 0 ? (\n              <div className=\"p-8 text-center\">\n                <Bell className=\"w-12 h-12 text-slate-400 mx-auto mb-4\" />\n                <p className=\"text-slate-300 text-sm\">No notifications yet</p>\n                <p className=\"text-slate-400 text-xs mt-1\">We'll notify you when something happens</p>\n              </div>\n            ) : (\n              <div className=\"space-y-0\">\n                {notifications.map((notification, index) => (\n                  <div\n                    key={notification.id}\n                    className={cn(\n                      \"p-4 border-b border-border/20 hover:bg-white/5 transition-colors\",\n                      !notification.isRead && \"bg-primary/10\",\n                      index === notifications.length - 1 && \"border-b-0\"\n                    )}\n                    data-testid={`notification-${notification.id}`}\n                  >\n                    <div className=\"flex items-start justify-between gap-3\">\n                      <div className=\"flex-1 min-w-0\">\n                        {/* Title */}\n                        <div className=\"flex items-center gap-2 mb-1\">\n                          <span className=\"text-sm\">\n                            {getNotificationIcon(notification.type)}\n                          </span>\n                          <h4 className=\"font-bold text-white text-sm truncate\">\n                            {notification.title}\n                          </h4>\n                          {!notification.isRead && (\n                            <div className=\"w-2 h-2 bg-primary rounded-full flex-shrink-0\" />\n                          )}\n                        </div>\n\n                        {/* Message */}\n                        <p className=\"text-slate-300 text-sm mb-2 line-clamp-2\">\n                          {notification.message}\n                        </p>\n\n                        {/* Footer */}\n                        <div className=\"flex items-center justify-between gap-2\">\n                          <span className=\"text-xs text-slate-400\">\n                            {notification.createdAt ? formatTimeAgo(new Date(notification.createdAt)) : \"Unknown\"}\n                          </span>\n                          \n                          <div className=\"flex items-center gap-2\">\n                            {notification.actionUrl && notification.actionLabel && (\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                className=\"text-xs h-6 px-2 text-primary hover:text-primary-foreground hover:bg-primary\"\n                                data-testid={`button-action-${notification.id}`}\n                              >\n                                {notification.actionLabel}\n                              </Button>\n                            )}\n                            \n                            {!notification.isRead && (\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => handleMarkAsRead(notification.id)}\n                                className=\"text-xs h-6 px-2 text-slate-400 hover:text-white\"\n                                data-testid={`button-mark-read-${notification.id}`}\n                              >\n                                <Check className=\"w-3 h-3\" />\n                              </Button>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Footer Actions */}\n          {notifications.length > 0 && (\n            <div className=\"p-4 border-t border-border/30\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleClearAll}\n                className=\"w-full text-slate-300 hover:text-white hover:bg-white/10\"\n                data-testid=\"button-clear-all\"\n              >\n                <CheckCheck className=\"w-4 h-4 mr-2\" />\n                Clear All\n              </Button>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":9754},"client/src/components/dashboard/profile.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport SubscriptionPlans from \"./subscription-plans\";\nimport { User, Mail, Calendar, CreditCard, Settings } from \"lucide-react\";\nimport { useAuth } from \"@/lib/auth\";\n\nexport default function Profile() {\n  const { user } = useAuth();\n\n  // Extract initials from full name\n  const getInitials = (name: string) => {\n    return name\n      .split(' ')\n      .map(part => part.charAt(0))\n      .join('')\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  return (\n    <div className=\"space-y-6 sm:space-y-8\">\n      {/* User Profile Details */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Profile Card */}\n        <Card className=\"gradient-card border-0 lg:col-span-1\">\n          <CardHeader className=\"text-center\">\n            <div className=\"flex justify-center mb-4\">\n              <Avatar className=\"w-20 h-20 sm:w-24 sm:h-24\">\n                <AvatarFallback className=\"bg-primary text-primary-foreground text-xl sm:text-2xl font-bold\">\n                  {getInitials(user?.fullName || \"User\")}\n                </AvatarFallback>\n              </Avatar>\n            </div>\n            <CardTitle className=\"text-xl sm:text-2xl font-bold\" data-testid=\"text-profile-name\">\n              {user?.fullName || \"User\"}\n            </CardTitle>\n            <div className=\"flex justify-center\">\n              <Badge \n                variant=\"secondary\" \n                className=\"bg-primary/20 text-primary text-sm\"\n                data-testid=\"badge-user-plan\"\n              >\n                {user?.plan || \"Free\"} Plan\n              </Badge>\n            </div>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center space-x-3 text-sm text-muted-foreground\">\n              <Mail className=\"w-4 h-4\" />\n              <span data-testid=\"text-profile-email\">{user?.email || \"user@example.com\"}</span>\n            </div>\n            <div className=\"flex items-center space-x-3 text-sm text-muted-foreground\">\n              <Calendar className=\"w-4 h-4\" />\n              <span>Member since: {new Date().toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}</span>\n            </div>\n            <div className=\"flex items-center space-x-3 text-sm text-muted-foreground\">\n              <CreditCard className=\"w-4 h-4\" />\n              <span>Billing Status: Active</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Account Settings */}\n        <Card className=\"gradient-card border-0 lg:col-span-2\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center text-lg sm:text-xl font-bold\">\n              <User className=\"w-5 h-5 mr-2\" />\n              Account Settings\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4 sm:space-y-6\">\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"fullName\">Full Name</Label>\n                <Input \n                  id=\"fullName\" \n                  defaultValue={user?.fullName || \"\"} \n                  data-testid=\"input-profile-fullname\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email Address</Label>\n                <Input \n                  id=\"email\" \n                  type=\"email\" \n                  defaultValue={user?.email || \"\"} \n                  data-testid=\"input-profile-email\"\n                />\n              </div>\n            </div>\n            \n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"shopifyStore\">Shopify Store URL</Label>\n                <Input \n                  id=\"shopifyStore\" \n                  placeholder=\"your-store.myshopify.com\" \n                  data-testid=\"input-shopify-store\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"timezone\">Timezone</Label>\n                <Input \n                  id=\"timezone\" \n                  defaultValue=\"UTC-5 (Eastern Time)\" \n                  data-testid=\"input-timezone\"\n                />\n              </div>\n            </div>\n\n            <div className=\"flex flex-col sm:flex-row gap-3 pt-4\">\n              <Button className=\"gradient-button\" data-testid=\"button-save-profile\">\n                <Settings className=\"w-4 h-4 mr-2\" />\n                Save Changes\n              </Button>\n              <Button variant=\"outline\" data-testid=\"button-change-password\">\n                Change Password\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Subscription Plans Section */}\n      <div>\n        <SubscriptionPlans currentPlan={user?.plan?.toLowerCase().replace(/\\s+/g, '-')} />\n      </div>\n\n      {/* Billing History */}\n      <Card className=\"gradient-card border-0\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center text-lg sm:text-xl font-bold\">\n            <CreditCard className=\"w-5 h-5 mr-2\" />\n            Billing History\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {[\n              { date: \"Dec 15, 2024\", plan: \"Pro Plan\", amount: \"$25.00\", status: \"Paid\" },\n              { date: \"Nov 15, 2024\", plan: \"Pro Plan\", amount: \"$25.00\", status: \"Paid\" },\n              { date: \"Oct 15, 2024\", plan: \"Starter Plan\", amount: \"$15.00\", status: \"Paid\" },\n            ].map((bill, index) => (\n              <div \n                key={index} \n                className=\"flex flex-col sm:flex-row sm:items-center justify-between p-3 sm:p-4 bg-muted/30 rounded-lg\"\n                data-testid={`card-billing-${index}`}\n              >\n                <div className=\"flex-1\">\n                  <div className=\"font-medium text-sm sm:text-base\" data-testid={`text-billing-plan-${index}`}>\n                    {bill.plan}\n                  </div>\n                  <div className=\"text-xs sm:text-sm text-muted-foreground\" data-testid={`text-billing-date-${index}`}>\n                    {bill.date}\n                  </div>\n                </div>\n                <div className=\"flex items-center justify-between sm:justify-end space-x-4 mt-2 sm:mt-0\">\n                  <span className=\"font-medium text-sm sm:text-base\" data-testid={`text-billing-amount-${index}`}>\n                    {bill.amount}\n                  </span>\n                  <Badge \n                    variant=\"secondary\" \n                    className=\"bg-green-400/10 text-green-400 text-xs\"\n                    data-testid={`badge-billing-status-${index}`}\n                  >\n                    {bill.status}\n                  </Badge>\n                </div>\n              </div>\n            ))}\n          </div>\n          \n          <div className=\"mt-6 pt-4 border-t border-border\">\n            <Button variant=\"outline\" className=\"w-full sm:w-auto\" data-testid=\"button-download-invoices\">\n              Download All Invoices\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":7523},"client/src/components/dashboard/seo-tools.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Search, FileText, Tags, Copy, Lightbulb, BarChart3 } from \"lucide-react\";\n\ninterface SEOForm {\n  currentTitle: string;\n  keywords: string;\n  currentMeta: string;\n  category: string;\n}\n\ninterface SEOResult {\n  optimizedTitle: string;\n  optimizedMeta: string;\n  keywords: string[];\n  seoScore: number;\n}\n\nexport default function SEOTools() {\n  const { toast } = useToast();\n  const [seoResult, setSeoResult] = useState<SEOResult | null>(null);\n\n  const form = useForm<SEOForm>({\n    defaultValues: {\n      currentTitle: \"\",\n      keywords: \"\",\n      currentMeta: \"\",\n      category: \"Electronics\",\n    },\n  });\n\n  const optimizeMutation = useMutation({\n    mutationFn: async (data: SEOForm) => {\n      const response = await apiRequest(\"POST\", \"/api/optimize-seo\", data);\n      return response.json();\n    },\n    onSuccess: (result) => {\n      setSeoResult(result);\n      toast({\n        title: \"SEO Optimized!\",\n        description: \"Your product SEO has been optimized successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Optimization failed\",\n        description: error.message || \"Failed to optimize SEO\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: SEOForm) => {\n    optimizeMutation.mutate(data);\n  };\n\n  const copyToClipboard = async (text: string, type: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      toast({\n        title: \"Copied!\",\n        description: `${type} copied to clipboard.`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Copy failed\",\n        description: \"Failed to copy to clipboard\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const seoTips = [\n    {\n      title: \"Add alt text to images\",\n      description: \"Improve accessibility and SEO\",\n    },\n    {\n      title: \"Include long-tail keywords\",\n      description: \"Target specific search queries\",\n    },\n    {\n      title: \"Optimize product images\",\n      description: \"Compress and name files properly\",\n    },\n  ];\n\n  const competitorKeywords = [\n    { keyword: \"premium wireless headphones\", difficulty: \"High\" },\n    { keyword: \"best bluetooth headphones\", difficulty: \"Medium\" },\n    { keyword: \"active noise cancelling\", difficulty: \"High\" },\n  ];\n\n  return (\n    <div className=\"max-w-6xl mx-auto\">\n      <div className=\"mb-8\">\n        <h2 className=\"text-3xl font-bold mb-4\" data-testid=\"text-seo-tools-title\">SEO Optimization Tools</h2>\n        <p className=\"text-muted-foreground\">Optimize your product titles, meta descriptions, and keywords for better search rankings</p>\n      </div>\n\n      <div className=\"grid lg:grid-cols-3 gap-8\">\n        {/* SEO Input Form */}\n        <div className=\"lg:col-span-2\">\n          <Card className=\"gradient-card border-0 mb-6\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-xl font-semibold mb-6\">Product SEO Details</h3>\n              \n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                <div>\n                  <Label htmlFor=\"currentTitle\">Current Product Title</Label>\n                  <Input\n                    id=\"currentTitle\"\n                    className=\"form-input mt-2\"\n                    placeholder=\"Enter your current product title\"\n                    {...form.register(\"currentTitle\", { required: true })}\n                    data-testid=\"input-current-title\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"keywords\">Target Keywords</Label>\n                  <Input\n                    id=\"keywords\"\n                    className=\"form-input mt-2\"\n                    placeholder=\"wireless headphones, bluetooth, noise cancelling\"\n                    {...form.register(\"keywords\", { required: true })}\n                    data-testid=\"input-keywords\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"currentMeta\">Current Meta Description</Label>\n                  <Textarea\n                    id=\"currentMeta\"\n                    className=\"form-input mt-2 h-24 resize-none\"\n                    placeholder=\"Enter your current meta description\"\n                    {...form.register(\"currentMeta\")}\n                    data-testid=\"textarea-current-meta\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"category\">Product Category</Label>\n                  <Select \n                    value={form.watch(\"category\")} \n                    onValueChange={(value) => form.setValue(\"category\", value)}\n                  >\n                    <SelectTrigger className=\"form-input mt-2\" data-testid=\"select-category\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"Electronics\">Electronics</SelectItem>\n                      <SelectItem value=\"Clothing & Accessories\">Clothing & Accessories</SelectItem>\n                      <SelectItem value=\"Home & Garden\">Home & Garden</SelectItem>\n                      <SelectItem value=\"Sports & Outdoors\">Sports & Outdoors</SelectItem>\n                      <SelectItem value=\"Beauty & Health\">Beauty & Health</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <Button\n                  type=\"submit\"\n                  className=\"gradient-button w-full\"\n                  disabled={optimizeMutation.isPending}\n                  data-testid=\"button-optimize-seo\"\n                >\n                  {optimizeMutation.isPending ? (\n                    <>Optimizing...</>\n                  ) : (\n                    <>\n                      <Search className=\"w-4 h-4 mr-2\" />\n                      Optimize SEO\n                    </>\n                  )}\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n\n          {/* SEO Results */}\n          {seoResult && (\n            <div className=\"space-y-6\">\n              {/* Optimized Title */}\n              <Card className=\"gradient-card border-0\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <h3 className=\"text-lg font-semibold flex items-center\">\n                      <FileText className=\"w-5 h-5 text-primary mr-2\" />\n                      Optimized Title\n                    </h3>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => copyToClipboard(seoResult.optimizedTitle, \"Title\")}\n                      data-testid=\"button-copy-title\"\n                    >\n                      <Copy className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                  <div className=\"bg-muted/30 p-4 rounded-lg\">\n                    <p className=\"text-foreground font-medium\" data-testid=\"text-optimized-title\">\n                      {seoResult.optimizedTitle}\n                    </p>\n                    <div className=\"text-sm text-muted-foreground mt-2\">\n                      <Badge variant=\"default\" className=\"bg-green-400/10 text-green-400 mr-2\">\n                        ✓ {seoResult.optimizedTitle.length} characters\n                      </Badge>\n                      <Badge variant=\"default\" className=\"bg-green-400/10 text-green-400 mr-2\">\n                        ✓ Includes keywords\n                      </Badge>\n                      <Badge variant=\"default\" className=\"bg-green-400/10 text-green-400\">\n                        ✓ SEO optimized\n                      </Badge>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Optimized Meta Description */}\n              <Card className=\"gradient-card border-0\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <h3 className=\"text-lg font-semibold flex items-center\">\n                      <FileText className=\"w-5 h-5 text-chart-2 mr-2\" />\n                      Optimized Meta Description\n                    </h3>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => copyToClipboard(seoResult.optimizedMeta, \"Meta description\")}\n                      data-testid=\"button-copy-meta\"\n                    >\n                      <Copy className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                  <div className=\"bg-muted/30 p-4 rounded-lg\">\n                    <p className=\"text-foreground\" data-testid=\"text-optimized-meta\">\n                      {seoResult.optimizedMeta}\n                    </p>\n                    <div className=\"text-sm text-muted-foreground mt-2\">\n                      <Badge variant=\"default\" className=\"bg-green-400/10 text-green-400 mr-2\">\n                        ✓ {seoResult.optimizedMeta.length} characters\n                      </Badge>\n                      <Badge variant=\"default\" className=\"bg-green-400/10 text-green-400 mr-2\">\n                        ✓ Compelling CTA\n                      </Badge>\n                      <Badge variant=\"default\" className=\"bg-green-400/10 text-green-400\">\n                        ✓ Keyword rich\n                      </Badge>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Suggested Keywords */}\n              <Card className=\"gradient-card border-0\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <h3 className=\"text-lg font-semibold flex items-center\">\n                      <Tags className=\"w-5 h-5 text-chart-3 mr-2\" />\n                      Suggested Keywords\n                    </h3>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => copyToClipboard(seoResult.keywords.join(\", \"), \"Keywords\")}\n                      data-testid=\"button-copy-keywords\"\n                    >\n                      <Copy className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {seoResult.keywords.map((keyword, index) => (\n                      <Badge \n                        key={index} \n                        variant=\"secondary\" \n                        className=\"bg-primary/20 text-primary\"\n                        data-testid={`badge-keyword-${index}`}\n                      >\n                        {keyword}\n                      </Badge>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          )}\n        </div>\n\n        {/* Sidebar */}\n        <div className=\"space-y-6\">\n          {/* SEO Score */}\n          <Card className=\"gradient-card border-0\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-lg font-semibold mb-4\">SEO Score</h3>\n              <div className=\"text-center mb-4\">\n                <div className=\"text-4xl font-bold text-primary\" data-testid=\"text-seo-score\">\n                  {seoResult?.seoScore || \"--\"}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">out of 100</div>\n              </div>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm\">Title optimization</span>\n                  <span className=\"text-green-400 text-sm\">✓</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm\">Meta description</span>\n                  <span className=\"text-green-400 text-sm\">✓</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm\">Keyword density</span>\n                  <span className=\"text-orange-400 text-sm\">!</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm\">Alt text</span>\n                  <span className=\"text-orange-400 text-sm\">!</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* SEO Tips */}\n          <Card className=\"gradient-card border-0\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-lg font-semibold mb-4\">SEO Tips</h3>\n              <div className=\"space-y-3\">\n                {seoTips.map((tip, index) => (\n                  <div key={index} className=\"flex items-start\" data-testid={`tip-${index}`}>\n                    <Lightbulb className=\"w-4 h-4 text-primary mr-2 mt-1\" />\n                    <div>\n                      <p className=\"text-sm font-medium\">{tip.title}</p>\n                      <p className=\"text-xs text-muted-foreground\">{tip.description}</p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Competitor Analysis */}\n          <Card className=\"gradient-card border-0\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-lg font-semibold mb-4\">Competitor Keywords</h3>\n              <div className=\"space-y-2\">\n                {competitorKeywords.map((item, index) => (\n                  <div key={index} className=\"flex items-center justify-between\" data-testid={`competitor-keyword-${index}`}>\n                    <span className=\"text-sm\">{item.keyword}</span>\n                    <span className=\"text-xs text-muted-foreground\">{item.difficulty}</span>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14761},"client/src/components/dashboard/settings.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useLocation } from \"wouter\";\nimport { \n  Settings as SettingsIcon,\n  User,\n  CreditCard,\n  Brain,\n  Bell,\n  Zap,\n  Shield,\n  HelpCircle,\n  Store,\n  Globe,\n  Mail,\n  MessageSquare,\n  BarChart3,\n  Key,\n  Download,\n  Trash2,\n  Eye,\n  Edit3,\n  Lock,\n  Smartphone,\n  FileText,\n  ExternalLink,\n  Users\n} from \"lucide-react\";\n\ninterface SettingsCard {\n  id: string;\n  title: string;\n  description: string;\n  icon: JSX.Element;\n  features: string[];\n  actionText: string;\n  category: 'account' | 'billing' | 'preferences' | 'integrations' | 'security' | 'support';\n}\n\nexport default function Settings() {\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [aiConfigModalOpen, setAiConfigModalOpen] = useState(false);\n  const [aiPreferences, setAiPreferences] = useState({\n    brandVoice: 'casual',\n    contentStyles: ['sales', 'seo'],\n    autoSaveOutputs: true,\n    scheduledUpdates: 'every-6-months'\n  });\n\n  const settingsCards: SettingsCard[] = [\n    {\n      id: 'profile-account',\n      title: 'Profile & Account',\n      description: 'Manage your personal information, connected stores, and language preferences',\n      icon: <User className=\"w-5 h-5 stroke-2\" style={{ color: '#C1E8FF' }} />,\n      features: ['Edit Profile (name, email, image)', 'Change Password', 'Connected Stores (Shopify, WooCommerce)', 'Multi-language UI + Auto-translation'],\n      actionText: 'Manage Profile',\n      category: 'account'\n    },\n    {\n      id: 'subscription-billing',\n      title: 'Subscription & Billing',\n      description: 'View current plan, upgrade options, billing history, and payment methods',\n      icon: <CreditCard className=\"w-5 h-5 stroke-2\" style={{ color: '#C1E8FF' }} />,\n      features: ['Current Plan Overview', 'Upgrade/Downgrade Plans', 'Billing History & Invoices', 'Payment Method Management'],\n      actionText: 'View Billing',\n      category: 'billing'\n    },\n    {\n      id: 'ai-preferences',\n      title: 'AI Preferences',\n      description: 'Customize AI behavior, brand voice, content style, and automation settings',\n      icon: <Brain className=\"w-5 h-5 stroke-2\" style={{ color: '#C1E8FF' }} />,\n      features: ['Brand Voice Memory (Luxury, Casual, Gen Z)', 'Default Content Style (Sales, SEO)', 'Auto-save AI Outputs', 'Scheduled AI Updates (3-6 months)'],\n      actionText: 'Configure AI',\n      category: 'preferences'\n    },\n    {\n      id: 'notifications-alerts',\n      title: 'Notifications & Alerts',\n      description: 'Control email notifications, in-app alerts, and mobile push settings',\n      icon: <Bell className=\"w-5 h-5 stroke-2\" style={{ color: '#C1E8FF' }} />,\n      features: ['Email Notifications (Campaigns, Billing)', 'In-app Performance Alerts', 'Mobile Push Notifications', 'AI Recommendation Alerts'],\n      actionText: 'Set Notifications',\n      category: 'preferences'\n    },\n    {\n      id: 'integrations',\n      title: 'Integrations',\n      description: 'Connect email providers, SMS services, analytics tools, and automation platforms',\n      icon: <Zap className=\"w-5 h-5 stroke-2\" style={{ color: '#C1E8FF' }} />,\n      features: ['Email (Gmail, Outlook, SMTP)', 'SMS (Twilio, Vonage)', 'Analytics (Google Analytics, Meta Pixel)', 'Zapier / Make Automation'],\n      actionText: 'Manage Integrations',\n      category: 'integrations'\n    },\n    {\n      id: 'security',\n      title: 'Security',\n      description: 'Two-factor authentication, login activity, API keys, and data management',\n      icon: <Shield className=\"w-5 h-5 stroke-2\" style={{ color: '#C1E8FF' }} />,\n      features: ['Two-Factor Authentication (2FA)', 'Login Activity Log', 'API Key Management', 'Data Export/Delete (GDPR)'],\n      actionText: 'Security Settings',\n      category: 'security'\n    },\n    {\n      id: 'support-resources',\n      title: 'Support & Resources',\n      description: 'Access help center, contact support, submit feedback, and join community',\n      icon: <HelpCircle className=\"w-5 h-5 stroke-2\" style={{ color: '#C1E8FF' }} />,\n      features: ['Help Center (FAQs, Docs, Tutorials)', 'Contact Support (Live Chat, Email)', 'Feedback & Feature Requests', 'Community Forum / Slack'],\n      actionText: 'Get Support',\n      category: 'support'\n    }\n  ];\n\n  // Mock mutation for settings actions\n  const settingsMutation = useMutation({\n    mutationFn: async (data: { cardId: string; action: string }) => {\n      await new Promise(resolve => setTimeout(resolve, 1500));\n      \n      const mockResponses = {\n        'profile-account': {\n          message: `Profile settings loaded. Connected to 2 stores: Shopify \"Fashion Forward\" and WooCommerce \"Tech Gadgets\".`\n        },\n        'subscription-billing': {\n          message: `Billing dashboard loaded. Current: Pro Plan ($25/month). Next billing: Jan 15, 2025. 3 invoices available.`\n        },\n        'ai-preferences': {\n          message: `AI preferences loaded. Brand Voice: \"Luxury Premium\" • Content Style: \"Sales-focused\" • Auto-save: Enabled`\n        },\n        'notifications-alerts': {\n          message: `Notification settings loaded. Email alerts: ON • Performance insights: Daily • Mobile push: Enabled for critical alerts`\n        },\n        'integrations': {\n          message: `Integration hub loaded. Active: Gmail, Google Analytics, Twilio SMS. Available: 15+ new integrations to connect.`\n        },\n        'security': {\n          message: `Security dashboard loaded. 2FA: Enabled • Last login: Today 9:03 AM • 3 active API keys • GDPR tools ready`\n        },\n        'support-resources': {\n          message: `Support center loaded. Help articles: 150+ • Live chat: Available 24/7 • Community: 2,500+ members active`\n        }\n      };\n\n      return mockResponses[data.cardId as keyof typeof mockResponses] || { message: 'Settings loaded successfully.' };\n    },\n    onSuccess: (data: any) => {\n      toast({\n        title: \"Settings Loaded\",\n        description: data.message,\n        duration: 4000,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Loading Failed\",\n        description: error.message || \"Failed to load settings\",\n        variant: \"destructive\",\n        duration: 3000,\n      });\n    }\n  });\n\n  const handleSettingsAction = (cardId: string) => {\n    // Handle specific navigation pages\n    if (cardId === 'profile-account') {\n      setLocation('/profile');\n      return;\n    }\n    \n    if (cardId === 'subscription-billing') {\n      setLocation('/billing');\n      return;\n    }\n    \n    const card = settingsCards.find(c => c.id === cardId);\n    if (!card) return;\n\n    settingsMutation.mutate({\n      cardId,\n      action: card.actionText.toLowerCase().replace(/\\s+/g, '_')\n    });\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"space-y-3 mb-8\">\n        <div>\n          <h1 className=\"text-4xl font-bold text-white tracking-tight\">\n            Settings & Configuration\n          </h1>\n          <p className=\"text-slate-300 text-lg\">\n            Customize your Zyra experience, manage integrations, and configure AI preferences\n          </p>\n        </div>\n      </div>\n\n      {/* Settings Cards Grid */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-2 gap-6\">\n        {settingsCards.map((card) => (\n          <Card \n            key={card.id} \n            className=\"relative bg-gradient-to-br from-[#021024] to-[#052659] rounded-2xl transition-all duration-300 hover:scale-105 border-slate-700/50 hover:shadow-cyan-500/30\"\n            data-testid={`card-settings-${card.id}`}\n          >\n              <CardHeader className=\"pb-4\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-6 h-6 flex items-center justify-center transition-all duration-300\">\n                      <div className=\"w-5 h-5 flex items-center justify-center\">\n                        {card.icon}\n                      </div>\n                    </div>\n                    <div className=\"flex-1\">\n                      <CardTitle className=\"text-white font-bold text-lg leading-none\" data-testid={`text-title-${card.id}`}>\n                        {card.title}\n                      </CardTitle>\n                    </div>\n                  </div>\n                  <Badge \n                    variant=\"secondary\" \n                    className=\"text-xs px-2 py-1 rounded-full bg-blue-500/20 text-blue-400 capitalize\"\n                    data-testid={`badge-category-${card.id}`}\n                  >\n                    {card.category}\n                  </Badge>\n                </div>\n                <CardDescription className=\"text-slate-300 mt-2 mb-4\" data-testid={`text-description-${card.id}`}>\n                  {card.description}\n                </CardDescription>\n                \n                {/* Feature List */}\n                <div className=\"space-y-2\">\n                  {card.features.map((feature, index) => (\n                    <div key={index} className=\"flex items-center space-x-2 text-sm text-slate-300\" data-testid={`feature-${card.id}-${index}`}>\n                      <div className=\"w-1.5 h-1.5 bg-[#C1E8FF] rounded-full flex-shrink-0\"></div>\n                      <span>{feature}</span>\n                    </div>\n                  ))}\n                </div>\n              </CardHeader>\n              <CardContent className=\"pt-0\">\n                <Button\n                  onClick={() => handleSettingsAction(card.id)}\n                  disabled={settingsMutation.isPending}\n                  className=\"w-full font-medium transition-all duration-300 bg-[#C1E8FF] hover:bg-[#C1E8FF] text-indigo-900 hover:scale-105\"\n                  data-testid={`button-action-${card.id}`}\n                >\n                  {settingsMutation.isPending ? \"Loading...\" : card.actionText}\n                </Button>\n              </CardContent>\n            </Card>\n        ))}\n      </div>\n\n      {/* Quick Actions */}\n      <div className=\"mt-12 grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] rounded-2xl p-6\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"p-3 rounded-full bg-slate-800/50 transition-all duration-300\">\n              <Store className=\"w-5 h-5 stroke-2\" style={{ color: '#C1E8FF' }} />\n            </div>\n            <div>\n              <h3 className=\"text-white font-bold text-lg\">2 Stores</h3>\n              <p className=\"text-slate-300 text-sm\">Connected</p>\n            </div>\n          </div>\n        </Card>\n        \n        <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] rounded-2xl p-6\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"p-3 rounded-full bg-slate-800/50 transition-all duration-300\">\n              <Zap className=\"w-5 h-5 stroke-2\" style={{ color: '#C1E8FF' }} />\n            </div>\n            <div>\n              <h3 className=\"text-white font-bold text-lg\">8 Active</h3>\n              <p className=\"text-slate-300 text-sm\">Integrations</p>\n            </div>\n          </div>\n        </Card>\n        \n        <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] rounded-2xl p-6\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"p-3 rounded-full bg-slate-800/50 transition-all duration-300\">\n              <Shield className=\"w-5 h-5 stroke-2\" style={{ color: '#C1E8FF' }} />\n            </div>\n            <div>\n              <h3 className=\"text-white font-bold text-lg\">Secure</h3>\n              <p className=\"text-slate-300 text-sm\">2FA Enabled</p>\n            </div>\n          </div>\n        </Card>\n      </div>\n\n      {/* Account Status */}\n      <div className=\"mt-8 p-6 bg-gradient-to-br from-[#021024] to-[#052659] rounded-2xl\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-6 h-6 flex items-center justify-center transition-all duration-300\">\n            <div className=\"w-5 h-5 flex items-center justify-center\">\n              <SettingsIcon className=\"w-5 h-5 stroke-2\" style={{ color: '#C1E8FF' }} />\n            </div>\n          </div>\n          <div>\n            <h3 className=\"text-white font-bold text-lg mb-2\">Account Configuration</h3>\n            <p className=\"text-slate-300 text-sm leading-relaxed\">\n              Your Zyra account is fully configured with AI preferences optimized for your brand voice. \n              All integrations are active and security features are enabled. Your settings sync across \n              all connected stores and devices for a seamless experience.\n            </p>\n            <div className=\"flex items-center space-x-4 mt-4\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-2 h-2 bg-green-400 rounded-full\"></div>\n                <span className=\"text-sm text-green-400\">All Systems Operational</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-2 h-2 bg-blue-400 rounded-full\"></div>\n                <span className=\"text-sm text-blue-400\">Pro Plan Active</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":14032},"client/src/components/dashboard/sidebar.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport { useEffect, useRef } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { \n  Zap, \n  Home, \n  Search, \n  BarChart3, \n  Mail, \n  Package, \n  Settings, \n  LogOut,\n  User,\n  X,\n  Cog\n} from \"lucide-react\";\n\ninterface SidebarProps {\n  activeTab: string;\n  onTabChange: (tab: string) => void;\n  user: any;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function Sidebar({ activeTab, onTabChange, user, isOpen, onClose }: SidebarProps) {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const sidebarRef = useRef<HTMLDivElement>(null);\n\n  // Close sidebar when clicking outside on mobile\n  useEffect(() => {\n    function handleClickOutside(event: MouseEvent) {\n      if (\n        sidebarRef.current &&\n        !sidebarRef.current.contains(event.target as Node) &&\n        window.innerWidth < 1024\n      ) {\n        onClose();\n      }\n    }\n\n    if (isOpen) {\n      document.addEventListener(\"mousedown\", handleClickOutside);\n    }\n\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [isOpen, onClose]);\n\n  // Close sidebar on Escape key\n  useEffect(() => {\n    function handleEscape(event: KeyboardEvent) {\n      if (event.key === \"Escape\" && isOpen) {\n        onClose();\n      }\n    }\n\n    if (isOpen) {\n      document.addEventListener(\"keydown\", handleEscape);\n    }\n\n    return () => {\n      document.removeEventListener(\"keydown\", handleEscape);\n    };\n  }, [isOpen, onClose]);\n\n  // Prevent body scroll when sidebar is open on mobile\n  useEffect(() => {\n    if (isOpen && window.innerWidth < 1024) {\n      document.body.style.overflow = \"hidden\";\n    } else {\n      document.body.style.overflow = \"unset\";\n    }\n\n    return () => {\n      document.body.style.overflow = \"unset\";\n    };\n  }, [isOpen]);\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      queryClient.clear();\n      toast({ title: \"Logged out\", description: \"Successfully logged out\" });\n      setLocation(\"/\");\n    },\n    onError: () => {\n      toast({\n        title: \"Logout failed\",\n        description: \"Failed to logout\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const navItems = [\n    { id: \"overview\", label: \"Dashboard\", icon: <Home className=\"w-4 h-4 sm:w-5 sm:h-5\" /> },\n    { id: \"ai-tools\", label: \"AI Tools\", icon: <Zap className=\"w-4 h-4 sm:w-5 sm:h-5\" /> },\n    { id: \"automate\", label: \"Automate\", icon: <Cog className=\"w-4 h-4 sm:w-5 sm:h-5\" /> },\n    { id: \"campaigns\", label: \"Campaigns\", icon: <Mail className=\"w-4 h-4 sm:w-5 sm:h-5\" /> },\n    { id: \"products\", label: \"Products\", icon: <Package className=\"w-4 h-4 sm:w-5 sm:h-5\" /> },\n    { id: \"settings\", label: \"Settings\", icon: <Settings className=\"w-4 h-4 sm:w-5 sm:h-5\" /> },\n  ];\n\n  return (\n    <>\n      {/* Overlay for mobile */}\n      {isOpen && (\n        <div\n          className=\"lg:hidden fixed inset-0 bg-black/20 backdrop-blur-sm z-30\"\n          onClick={onClose}\n          aria-hidden=\"true\"\n        />\n      )}\n      {/* Sidebar */}\n      <div\n        ref={sidebarRef}\n        className={cn(\n          \"fixed left-0 top-0 w-64 h-full sidebar-gradient border-r border-border z-40 transition-transform duration-300 ease-in-out lg:top-0\",\n          isOpen ? \"translate-x-0\" : \"-translate-x-full\"\n        )}\n      >\n        {/* Close button - visible only on mobile */}\n        <div className=\"lg:hidden absolute top-4 right-4\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={onClose}\n            className=\"text-muted-foreground hover:text-foreground\"\n            data-testid=\"button-close-sidebar\"\n          >\n            <X className=\"w-5 h-5\" />\n          </Button>\n        </div>\n\n        <div className=\"p-6\">\n          {/* Logo */}\n          <div className=\"flex items-center space-x-3 mb-8\" data-testid=\"sidebar-logo\">\n            <div className=\"w-10 h-10 bg-gradient-to-br from-primary to-accent rounded-lg flex items-center justify-center\">\n              <Zap className=\"w-6 h-6 text-primary-foreground\" />\n            </div>\n            <span className=\"text-xl sm:text-2xl font-bold text-foreground\">Zyra</span>\n          </div>\n\n          {/* Navigation */}\n          <nav className=\"space-y-2 mt-[-17px] mb-[-17px]\">\n            {navItems.map((item) => (\n              <Button\n                key={item.id}\n                onClick={() => onTabChange(item.id)}\n                variant=\"ghost\"\n                className={`w-full justify-start px-4 py-3 h-auto ${\n                  activeTab === item.id\n                    ? \"bg-primary/20 text-primary hover:bg-primary/20\"\n                    : \"text-muted-foreground hover:text-foreground hover:bg-muted\"\n                }`}\n                data-testid={`nav-${item.id}`}\n              >\n                {item.icon}\n                <span className=\"ml-3\">{item.label}</span>\n              </Button>\n            ))}\n          </nav>\n        </div>\n\n        {/* User Profile */}\n        <div className=\"absolute bottom-0 left-0 right-0 p-6 border-t border-border\">\n          <div className=\"flex items-center space-x-3\" data-testid=\"user-profile\">\n            <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center\">\n              <User className=\"w-5 h-5 text-primary-foreground\" />\n            </div>\n            <div className=\"flex-1\">\n              <div className=\"text-xs sm:text-sm font-medium pl-[0px] pr-[0px] ml-[-2px] mr-[-2px] pt-[-12px] pb-[-12px] mt-[-4px] mb-[-4px]\" data-testid=\"text-user-name\">{user?.fullName || \"User\"}</div>\n              <div className=\"text-xs text-muted-foreground\" data-testid=\"text-user-plan\">{user?.plan || \"Free\"} Plan</div>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => logoutMutation.mutate()}\n              disabled={logoutMutation.isPending}\n              className=\"text-muted-foreground hover:text-foreground\"\n              data-testid=\"button-logout\"\n            >\n              <LogOut className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}","size_bytes":6509},"client/src/components/dashboard/subscription-plans.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Check, Gift, Zap, Crown, Award } from \"lucide-react\";\n\nconst plans = [\n  {\n    name: \"Free Trial\",\n    price: \"$0\",\n    period: \"7 days\",\n    icon: <Gift className=\"w-8 h-8\" />,\n    description: \"Try all premium features free for 7 days.\",\n    features: [\n      \"Try all premium features free for 7 days\",\n      \"No credit card required (optional)\",\n      \"Cancel anytime before trial ends\",\n      \"Perfect for testing Zyra on your own store before upgrading\"\n    ],\n    popular: false\n  },\n  {\n    name: \"Starter\",\n    price: \"$15\",\n    period: \"per month\",\n    icon: <Zap className=\"w-8 h-8\" />,\n    description: \"Small Shopify stores just getting started with AI.\",\n    features: [\n      \"Optimize up to 100 products with AI-generated descriptions\",\n      \"Send up to 500 AI-crafted emails per month (upsells, receipts)\",\n      \"Access to SEO title + meta tag generator\",\n      \"AI image alt-text generator for accessibility + SEO boost\",\n      \"Basic analytics dashboard (track optimized products + email open rates)\"\n    ],\n    popular: false\n  },\n  {\n    name: \"Pro\",\n    price: \"$25\", \n    period: \"per month\",\n    icon: <Crown className=\"w-8 h-8\" />,\n    description: \"Established stores with medium traffic looking to grow faster.\",\n    features: [\n      \"Unlimited product optimizations (no limits on AI copy)\",\n      \"Send up to 2,000 AI-crafted emails per month\",\n      \"Recover abandoned carts with 500 SMS reminders per month\",\n      \"Advanced analytics dashboard (email CTR, SMS conversion, keyword density)\",\n      \"Priority AI processing → faster response + reduced wait times\"\n    ],\n    popular: true\n  },\n  {\n    name: \"Growth\",\n    price: \"$49\",\n    period: \"per month\",\n    icon: <Award className=\"w-8 h-8\" />,\n    description: \"High-volume stores that want maximum automation and advanced growth tools.\",\n    features: [\n      \"Unlimited everything → products, emails, and SMS recovery\",\n      \"Full analytics suite → keyword insights, revenue from emails/SMS, product optimization impact\",\n      \"A/B testing for AI-generated content → test multiple product descriptions, email subjects, and SMS messages\",\n      \"Premium template library → advanced email & SMS layouts designed to convert\",\n      \"Early access to new AI tools (before Starter/Pro users)\",\n      \"Priority support for faster help\"\n    ],\n    popular: false\n  }\n];\n\ninterface SubscriptionPlansProps {\n  currentPlan?: string;\n}\n\nexport default function SubscriptionPlans({ currentPlan }: SubscriptionPlansProps) {\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <h2 className=\"text-2xl sm:text-3xl font-bold mb-2\" data-testid=\"text-subscription-title\">\n          Subscription Plans\n        </h2>\n        <p className=\"text-sm sm:text-base text-muted-foreground\">\n          Choose the perfect plan for your Shopify store\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-4 sm:gap-6\">\n        {plans.map((plan, index) => (\n          <Card \n            key={index} \n            className={`gradient-card border-0 relative ${\n              plan.popular ? 'ring-2 ring-primary' : ''\n            }`}\n            data-testid={`card-plan-${index}`}\n          >\n            {plan.popular && (\n              <Badge className=\"absolute -top-3 left-1/2 transform -translate-x-1/2 bg-primary text-primary-foreground\">\n                Most Popular\n              </Badge>\n            )}\n            \n            <CardHeader className=\"text-center\">\n              <div className=\"flex justify-center text-primary mb-2\">{plan.icon}</div>\n              <CardTitle className=\"text-lg sm:text-xl font-bold\" data-testid={`text-plan-name-${index}`}>\n                {plan.name}\n              </CardTitle>\n              <div className=\"space-y-1\">\n                <div className=\"text-2xl sm:text-3xl font-bold\" data-testid={`text-plan-price-${index}`}>\n                  {plan.price}\n                  <span className=\"text-sm sm:text-base font-normal text-muted-foreground\">\n                    /{plan.period}\n                  </span>\n                </div>\n                <p className=\"text-xs sm:text-sm text-muted-foreground\" data-testid={`text-plan-description-${index}`}>\n                  {plan.description}\n                </p>\n              </div>\n            </CardHeader>\n            \n            <CardContent className=\"space-y-4\">\n              <ul className=\"space-y-2 sm:space-y-3\">\n                {plan.features.map((feature, featureIndex) => (\n                  <li key={featureIndex} className=\"flex items-start space-x-2\">\n                    <Check className=\"w-4 h-4 text-primary mt-0.5 flex-shrink-0\" />\n                    <span className=\"text-xs sm:text-sm text-muted-foreground\" data-testid={`text-plan-feature-${index}-${featureIndex}`}>\n                      {feature}\n                    </span>\n                  </li>\n                ))}\n              </ul>\n              \n              <Button \n                className={`w-full text-sm sm:text-base ${\n                  currentPlan === plan.name.toLowerCase().replace(/\\s+/g, '-')\n                    ? 'bg-muted text-muted-foreground cursor-not-allowed'\n                    : plan.popular \n                      ? 'gradient-button' \n                      : 'border border-border hover:bg-muted'\n                }`}\n                variant={plan.popular ? \"default\" : \"outline\"}\n                disabled={currentPlan === plan.name.toLowerCase().replace(/\\s+/g, '-')}\n                data-testid={`button-plan-${index}`}\n              >\n                {currentPlan === plan.name.toLowerCase().replace(/\\s+/g, '-')\n                  ? 'Current Plan'\n                  : index === 0 \n                    ? \"Start Trial\" \n                    : \"Choose Plan\"\n                }\n              </Button>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n}","size_bytes":6123},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/auth-card.tsx":{"content":"import { ReactNode } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Zap } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface AuthCardProps {\n  title: string;\n  subtitle: string;\n  children: ReactNode;\n  className?: string;\n}\n\nexport function AuthCard({ title, subtitle, children, className }: AuthCardProps) {\n  return (\n    <div className=\"min-h-screen flex items-center justify-center px-6\">\n      <div className=\"max-w-md w-full\">\n        <Card className={cn(\"gradient-card border-0\", className)} data-testid=\"card-auth\">\n          <CardContent className=\"p-8\">\n            <div className=\"text-center mb-8\">\n              <div className=\"w-16 h-16 bg-gradient-to-br from-primary to-accent rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <Zap className=\"w-8 h-8 text-primary-foreground\" />\n              </div>\n              <h2 className=\"text-3xl font-bold\" data-testid=\"text-auth-title\">\n                {title}\n              </h2>\n              <p className=\"text-muted-foreground\" data-testid=\"text-auth-subtitle\">\n                {subtitle}\n              </p>\n            </div>\n            {children}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n\nexport default AuthCard;\n","size_bytes":1285},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-4 sm:p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-xl sm:text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-4 sm:p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-4 sm:p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1890},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 sm:h-9 sm:px-2.5 sm:py-1.5\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":807},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\n// Dashboard-specific skeleton components\nfunction DashboardStatSkeleton() {\n  return (\n    <div className=\"stat-card border-0 p-4 sm:p-6\">\n      <div className=\"flex items-center justify-between mb-3 sm:mb-4\">\n        <Skeleton className=\"w-10 h-10 sm:w-12 sm:h-12 rounded-lg\" />\n        <Skeleton className=\"w-16 h-6 rounded-full\" />\n      </div>\n      <Skeleton className=\"w-20 h-8 mb-1\" />\n      <Skeleton className=\"w-24 h-4\" />\n    </div>\n  );\n}\n\nfunction DashboardQuickActionSkeleton() {\n  return (\n    <div className=\"gradient-card border-0 p-4 sm:p-6\">\n      <div className=\"flex items-center mb-3 sm:mb-4\">\n        <Skeleton className=\"w-8 h-8 sm:w-10 sm:h-10 rounded-lg mr-2 sm:mr-3\" />\n        <Skeleton className=\"w-32 h-6\" />\n      </div>\n      <Skeleton className=\"w-full h-4 mb-2\" />\n      <Skeleton className=\"w-3/4 h-4 mb-3 sm:mb-4\" />\n      <Skeleton className=\"w-full h-10 rounded-md\" />\n    </div>\n  );\n}\n\nfunction DashboardActivitySkeleton() {\n  return (\n    <div className=\"flex items-center p-3 sm:p-4 bg-muted/30 rounded-lg\">\n      <Skeleton className=\"w-8 h-8 sm:w-10 sm:h-10 rounded-lg mr-3 sm:mr-4 flex-shrink-0\" />\n      <div className=\"flex-1 min-w-0\">\n        <Skeleton className=\"w-full h-4 mb-2\" />\n        <Skeleton className=\"w-20 h-3\" />\n      </div>\n      <Skeleton className=\"w-12 h-6 rounded flex-shrink-0\" />\n    </div>\n  );\n}\n\nfunction DashboardContentSkeleton() {\n  return (\n    <div className=\"space-y-8\">\n      {/* Stats Grid Skeleton */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6\">\n        {Array.from({ length: 4 }).map((_, index) => (\n          <DashboardStatSkeleton key={index} />\n        ))}\n      </div>\n\n      {/* Quick Actions Grid Skeleton */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6\">\n        {Array.from({ length: 3 }).map((_, index) => (\n          <DashboardQuickActionSkeleton key={index} />\n        ))}\n      </div>\n\n      {/* Recent Activity Skeleton */}\n      <div className=\"gradient-card border-0 p-4 sm:p-6\">\n        <Skeleton className=\"w-40 h-6 mb-4 sm:mb-6\" />\n        <div className=\"space-y-3 sm:space-y-4\">\n          {Array.from({ length: 3 }).map((_, index) => (\n            <DashboardActivitySkeleton key={index} />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport { \n  Skeleton, \n  DashboardStatSkeleton, \n  DashboardQuickActionSkeleton, \n  DashboardActivitySkeleton,\n  DashboardContentSkeleton \n}\n","size_bytes":2717},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-10 sm:h-12 px-2 sm:px-4 text-left align-middle font-medium text-muted-foreground text-sm [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-2 sm:p-4 align-middle text-sm [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2804},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/ab-test-results.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport NotificationCenter from \"@/components/dashboard/notification-center\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  ArrowLeft, \n  Zap, \n  TrendingUp, \n  Award,\n  Target,\n  Users,\n  MousePointer,\n  User, \n  LogOut, \n  Settings as SettingsIcon,\n  Eye,\n  BarChart3,\n  Trophy,\n  Activity\n} from \"lucide-react\";\n\nexport default function ABTestResults() {\n  const { user, logout } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const handleLogout = () => {\n    logout();\n    setLocation(\"/auth\");\n  };\n\n  const handleGoBack = () => {\n    setLocation(\"/dashboard\");\n  };\n\n  // Mock A/B test data\n  const abTests = [\n    {\n      id: \"1\",\n      testName: \"Product Description Length\",\n      status: \"completed\",\n      duration: 14,\n      participants: 2847,\n      variantA: {\n        name: \"Short Description\",\n        visitors: 1423,\n        conversions: 89,\n        conversionRate: 6.3,\n        revenue: 3247.50\n      },\n      variantB: {\n        name: \"Detailed Description\",\n        visitors: 1424,\n        conversions: 127,\n        conversionRate: 8.9,\n        revenue: 4632.80\n      },\n      winner: \"B\",\n      significance: 95.4,\n      improvement: 41.3,\n      startDate: \"2024-01-04\",\n      endDate: \"2024-01-18\"\n    },\n    {\n      id: \"2\",\n      testName: \"Email Subject Line A/B Test\",\n      status: \"completed\",\n      duration: 7,\n      participants: 5640,\n      variantA: {\n        name: \"Question Format\",\n        visitors: 2820,\n        conversions: 198,\n        conversionRate: 7.0,\n        revenue: 5847.20\n      },\n      variantB: {\n        name: \"Urgent Format\",\n        visitors: 2820,\n        conversions: 254,\n        conversionRate: 9.0,\n        revenue: 7294.60\n      },\n      winner: \"B\",\n      significance: 98.2,\n      improvement: 28.6,\n      startDate: \"2024-01-11\",\n      endDate: \"2024-01-18\"\n    },\n    {\n      id: \"3\",\n      testName: \"CTA Button Color\",\n      status: \"running\",\n      duration: 5,\n      participants: 1840,\n      variantA: {\n        name: \"Blue Button\",\n        visitors: 920,\n        conversions: 67,\n        conversionRate: 7.3,\n        revenue: 2156.40\n      },\n      variantB: {\n        name: \"Orange Button\", \n        visitors: 920,\n        conversions: 78,\n        conversionRate: 8.5,\n        revenue: 2547.90\n      },\n      winner: \"B\",\n      significance: 87.6,\n      improvement: 16.4,\n      startDate: \"2024-01-13\",\n      endDate: \"2024-01-20\"\n    },\n    {\n      id: \"4\",\n      testName: \"SMS Recovery Timing\",\n      status: \"completed\",\n      duration: 21,\n      participants: 3250,\n      variantA: {\n        name: \"1 Hour Delay\",\n        visitors: 1625,\n        conversions: 142,\n        conversionRate: 8.7,\n        revenue: 4521.30\n      },\n      variantB: {\n        name: \"3 Hour Delay\",\n        visitors: 1625,\n        conversions: 98,\n        conversionRate: 6.0,\n        revenue: 3124.70\n      },\n      winner: \"A\",\n      significance: 96.8,\n      improvement: 45.0,\n      startDate: \"2023-12-28\",\n      endDate: \"2024-01-18\"\n    }\n  ];\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"completed\": return \"bg-green-500/20 text-green-400\";\n      case \"running\": return \"bg-blue-500/20 text-blue-400\";\n      case \"draft\": return \"bg-slate-500/20 text-slate-400\";\n      default: return \"bg-slate-500/20 text-slate-400\";\n    }\n  };\n\n  const getSignificanceColor = (significance: number) => {\n    if (significance >= 95) return \"bg-green-500/20 text-green-400\";\n    if (significance >= 80) return \"bg-yellow-500/20 text-yellow-400\";\n    return \"bg-red-500/20 text-red-400\";\n  };\n\n  const totalTests = abTests.length;\n  const completedTests = abTests.filter(test => test.status === \"completed\").length;\n  const avgImprovement = (abTests.filter(test => test.status === \"completed\").reduce((sum, test) => sum + test.improvement, 0) / completedTests).toFixed(1);\n  const totalParticipants = abTests.reduce((sum, test) => sum + test.participants, 0);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-[#021024] to-[#052659]\">\n      {/* Header */}\n      <header className=\"bg-gradient-to-br from-[#021024] to-[#052659] backdrop-blur-sm border-b border-slate-700/50 px-4 sm:px-6 py-3 sm:py-4\">\n        <div className=\"flex items-center\">\n          <div className=\"flex items-center space-x-2 sm:space-x-4 min-w-0 flex-1\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={handleGoBack}\n              className=\"text-slate-200 hover:text-[#C1E8FF] hover:bg-white/10 transition-all duration-300 ease-in-out flex-shrink-0\"\n            >\n              <ArrowLeft className=\"w-4 h-4 sm:w-5 sm:h-5\" />\n            </Button>\n            <div className=\"min-w-0 flex-1\">\n              <h1 className=\"font-bold text-white text-base sm:text-lg lg:text-xl xl:text-2xl truncate\">\n                A/B Test Results\n              </h1>\n              <p className=\"text-slate-300 text-xs sm:text-sm lg:text-base truncate\">\n                Performance comparison of different content versions and optimization tests\n              </p>\n            </div>\n          </div>\n\n          <div className=\"flex items-center justify-end space-x-2 sm:space-x-4 flex-shrink-0\">\n            <NotificationCenter />\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button\n                  variant=\"ghost\"\n                  className=\"relative h-10 w-10 rounded-full text-slate-200 hover:text-[#C1E8FF] transition-all duration-300 ease-in-out\"\n                >\n                  <Avatar className=\"h-8 w-8\">\n                    <AvatarImage src=\"\" alt={user?.fullName || \"User\"} />\n                    <AvatarFallback className=\"bg-gradient-to-br from-[#021024] to-[#052659] text-[#C1E8FF]\">\n                      {user?.fullName?.charAt(0) || \"U\"}\n                    </AvatarFallback>\n                  </Avatar>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent className=\"w-56 bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700/50 text-white\" align=\"end\" forceMount>\n                <div className=\"flex items-center justify-start gap-2 p-2\">\n                  <div className=\"flex flex-col space-y-1 leading-none\">\n                    <p className=\"font-bold text-white text-sm\">{user?.fullName || \"User\"}</p>\n                    <p className=\"text-xs text-slate-300\">{user?.email}</p>\n                  </div>\n                </div>\n                <DropdownMenuSeparator className=\"bg-slate-700/30\" />\n                <DropdownMenuItem\n                  className=\"text-slate-200 hover:text-white hover:bg-white/10 focus:text-white focus:bg-white/10 cursor-pointer\"\n                  onClick={() => setLocation(\"/profile\")}\n                >\n                  <User className=\"mr-2 h-4 w-4\" />\n                  Profile\n                </DropdownMenuItem>\n                <DropdownMenuItem\n                  className=\"text-slate-200 hover:text-white hover:bg-white/10 focus:text-white focus:bg-white/10 cursor-pointer\"\n                  onClick={() => setLocation(\"/billing\")}\n                >\n                  <SettingsIcon className=\"mr-2 h-4 w-4\" />\n                  Settings\n                </DropdownMenuItem>\n                <DropdownMenuSeparator className=\"bg-slate-700/30\" />\n                <DropdownMenuItem\n                  className=\"text-red-300 hover:text-red-200 hover:bg-red-500/20 focus:text-red-200 focus:bg-red-500/20 cursor-pointer\"\n                  onClick={handleLogout}\n                >\n                  <LogOut className=\"mr-2 h-4 w-4\" />\n                  Logout\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <div className=\"p-4 sm:p-6 space-y-6\">\n        {/* Summary Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700/50\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"p-3 rounded-full bg-slate-800/50\">\n                  <Activity className=\"w-6 h-6\" style={{ color: '#C1E8FF' }} />\n                </div>\n                <div>\n                  <h3 className=\"text-white font-bold text-2xl\">{totalTests}</h3>\n                  <p className=\"text-slate-300 text-sm\">Total Tests</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700/50\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"p-3 rounded-full bg-slate-800/50\">\n                  <Trophy className=\"w-6 h-6\" style={{ color: '#C1E8FF' }} />\n                </div>\n                <div>\n                  <h3 className=\"text-white font-bold text-2xl\">{completedTests}</h3>\n                  <p className=\"text-slate-300 text-sm\">Completed</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700/50\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"p-3 rounded-full bg-slate-800/50\">\n                  <TrendingUp className=\"w-6 h-6\" style={{ color: '#C1E8FF' }} />\n                </div>\n                <div>\n                  <h3 className=\"text-white font-bold text-2xl\">+{avgImprovement}%</h3>\n                  <p className=\"text-slate-300 text-sm\">Avg Improvement</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700/50\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"p-3 rounded-full bg-slate-800/50\">\n                  <Users className=\"w-6 h-6\" style={{ color: '#C1E8FF' }} />\n                </div>\n                <div>\n                  <h3 className=\"text-white font-bold text-2xl\">{(totalParticipants / 1000).toFixed(1)}K</h3>\n                  <p className=\"text-slate-300 text-sm\">Participants</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* A/B Test Results */}\n        <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700/50\">\n          <CardHeader>\n            <CardTitle className=\"text-white\">A/B Test Performance</CardTitle>\n            <CardDescription className=\"text-slate-300\">\n              Compare different versions and track which optimizations perform better\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {abTests.map((test) => (\n              <div key={test.id} className=\"bg-slate-800/30 rounded-lg p-4 space-y-4\">\n                <div className=\"flex items-start justify-between\">\n                  <div>\n                    <h3 className=\"text-white font-semibold text-lg\">{test.testName}</h3>\n                    <div className=\"flex items-center space-x-3 mt-2\">\n                      <Badge variant=\"secondary\" className={getStatusColor(test.status)}>\n                        {test.status}\n                      </Badge>\n                      <Badge variant=\"secondary\" className={getSignificanceColor(test.significance)}>\n                        {test.significance}% significance\n                      </Badge>\n                      <span className=\"text-slate-400 text-sm\">\n                        {test.duration} days • {test.participants.toLocaleString()} participants\n                      </span>\n                    </div>\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <Button size=\"sm\" variant=\"outline\" className=\"border-slate-600 text-slate-300 hover:bg-white/10\">\n                      <Eye className=\"w-4 h-4 mr-2\" />\n                      Details\n                    </Button>\n                    <Button size=\"sm\" className=\"bg-[#C1E8FF] hover:bg-[#C1E8FF]/90 text-indigo-900\">\n                      <BarChart3 className=\"w-4 h-4 mr-2\" />\n                      Analyze\n                    </Button>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className={`bg-slate-900/50 p-4 rounded-lg ${test.winner === 'A' ? 'border border-yellow-500/30' : ''}`}>\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <h4 className=\"text-slate-300 font-medium\">Variant A: {test.variantA.name}</h4>\n                      {test.winner === 'A' && (\n                        <Badge variant=\"secondary\" className=\"bg-yellow-500/20 text-yellow-400\">\n                          <Award className=\"w-3 h-3 mr-1\" />\n                          Winner\n                        </Badge>\n                      )}\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-3 text-sm\">\n                      <div>\n                        <p className=\"text-slate-400\">Visitors</p>\n                        <p className=\"text-white font-semibold\">{test.variantA.visitors.toLocaleString()}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-slate-400\">Conversions</p>\n                        <p className=\"text-white font-semibold\">{test.variantA.conversions}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-slate-400\">Conv. Rate</p>\n                        <p className=\"text-white font-semibold\">{test.variantA.conversionRate}%</p>\n                      </div>\n                      <div>\n                        <p className=\"text-slate-400\">Revenue</p>\n                        <p className=\"text-white font-semibold\">${test.variantA.revenue.toFixed(0)}</p>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className={`bg-slate-900/50 p-4 rounded-lg ${test.winner === 'B' ? 'border border-yellow-500/30' : ''}`}>\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <h4 className=\"text-slate-300 font-medium\">Variant B: {test.variantB.name}</h4>\n                      {test.winner === 'B' && (\n                        <Badge variant=\"secondary\" className=\"bg-yellow-500/20 text-yellow-400\">\n                          <Award className=\"w-3 h-3 mr-1\" />\n                          Winner\n                        </Badge>\n                      )}\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-3 text-sm\">\n                      <div>\n                        <p className=\"text-slate-400\">Visitors</p>\n                        <p className=\"text-white font-semibold\">{test.variantB.visitors.toLocaleString()}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-slate-400\">Conversions</p>\n                        <p className=\"text-white font-semibold\">{test.variantB.conversions}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-slate-400\">Conv. Rate</p>\n                        <p className=\"text-white font-semibold\">{test.variantB.conversionRate}%</p>\n                      </div>\n                      <div>\n                        <p className=\"text-slate-400\">Revenue</p>\n                        <p className=\"text-white font-semibold\">${test.variantB.revenue.toFixed(0)}</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {test.status === 'completed' && (\n                  <div className=\"bg-green-500/10 border border-green-500/30 rounded-lg p-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-green-400 font-medium\">\n                        Variant {test.winner} won with {test.improvement}% improvement\n                      </span>\n                      <span className=\"text-green-400 text-sm\">\n                        {test.significance}% statistical significance\n                      </span>\n                    </div>\n                  </div>\n                )}\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":17277},"client/src/pages/content-roi.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport NotificationCenter from \"@/components/dashboard/notification-center\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  ArrowLeft, \n  TrendingUp, \n  DollarSign, \n  ShoppingCart,\n  BarChart3,\n  Calendar,\n  User, \n  LogOut, \n  Settings as SettingsIcon,\n  Eye,\n  ArrowUpRight\n} from \"lucide-react\";\n\nexport default function ContentROI() {\n  const { user, logout } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const handleLogout = () => {\n    logout();\n    setLocation(\"/auth\");\n  };\n\n  const handleGoBack = () => {\n    setLocation(\"/dashboard\");\n  };\n\n  // Mock ROI tracking data\n  const roiData = [\n    {\n      id: \"1\",\n      productName: \"Wireless Bluetooth Headphones\",\n      beforeRevenue: 2847.50,\n      afterRevenue: 5294.80,\n      uplift: 86.0,\n      optimizedDate: \"2024-01-15\",\n      ordersBefore: 23,\n      ordersAfter: 42,\n      conversionBefore: 2.1,\n      conversionAfter: 3.9\n    },\n    {\n      id: \"2\",\n      productName: \"Smart Fitness Watch\",\n      beforeRevenue: 4125.30,\n      afterRevenue: 6847.90,\n      uplift: 66.0,\n      optimizedDate: \"2024-01-12\",\n      ordersBefore: 18,\n      ordersAfter: 29,\n      conversionBefore: 1.8,\n      conversionAfter: 2.8\n    },\n    {\n      id: \"3\",\n      productName: \"Portable Power Bank\",\n      beforeRevenue: 1598.75,\n      afterRevenue: 3124.60,\n      uplift: 95.4,\n      optimizedDate: \"2024-01-10\",\n      ordersBefore: 12,\n      ordersAfter: 24,\n      conversionBefore: 1.5,\n      conversionAfter: 3.1\n    },\n    {\n      id: \"4\",\n      productName: \"Wireless Gaming Mouse\",\n      beforeRevenue: 3247.85,\n      afterRevenue: 5156.40,\n      uplift: 58.8,\n      optimizedDate: \"2024-01-08\",\n      ordersBefore: 26,\n      ordersAfter: 41,\n      conversionBefore: 2.3,\n      conversionAfter: 3.6\n    }\n  ];\n\n  const totalBeforeRevenue = roiData.reduce((sum, item) => sum + item.beforeRevenue, 0);\n  const totalAfterRevenue = roiData.reduce((sum, item) => sum + item.afterRevenue, 0);\n  const totalUplift = ((totalAfterRevenue - totalBeforeRevenue) / totalBeforeRevenue * 100).toFixed(1);\n  const totalImpact = totalAfterRevenue - totalBeforeRevenue;\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-[#021024] to-[#052659]\">\n      {/* Header */}\n      <header className=\"bg-gradient-to-br from-[#021024] to-[#052659] backdrop-blur-sm border-b border-slate-700/50 px-4 sm:px-6 py-3 sm:py-4\">\n        <div className=\"flex items-center\">\n          <div className=\"flex items-center space-x-2 sm:space-x-4 min-w-0 flex-1\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={handleGoBack}\n              className=\"text-slate-200 hover:text-[#C1E8FF] hover:bg-white/10 transition-all duration-300 ease-in-out flex-shrink-0\"\n            >\n              <ArrowLeft className=\"w-4 h-4 sm:w-5 sm:h-5\" />\n            </Button>\n            <div className=\"min-w-0 flex-1\">\n              <h1 className=\"font-bold text-white text-base sm:text-lg lg:text-xl xl:text-2xl truncate\">\n                Content ROI Tracking\n              </h1>\n              <p className=\"text-slate-300 text-xs sm:text-sm lg:text-base truncate\">\n                AI-generated content performance and sales impact measurement\n              </p>\n            </div>\n          </div>\n\n          <div className=\"flex items-center justify-end space-x-2 sm:space-x-4 flex-shrink-0\">\n            <NotificationCenter />\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button\n                  variant=\"ghost\"\n                  className=\"relative h-10 w-10 rounded-full text-slate-200 hover:text-[#C1E8FF] transition-all duration-300 ease-in-out\"\n                >\n                  <Avatar className=\"h-8 w-8\">\n                    <AvatarImage src=\"\" alt={user?.fullName || \"User\"} />\n                    <AvatarFallback className=\"bg-gradient-to-br from-[#021024] to-[#052659] text-[#C1E8FF]\">\n                      {user?.fullName?.charAt(0) || \"U\"}\n                    </AvatarFallback>\n                  </Avatar>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent className=\"w-56 bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700/50 text-white\" align=\"end\" forceMount>\n                <div className=\"flex items-center justify-start gap-2 p-2\">\n                  <div className=\"flex flex-col space-y-1 leading-none\">\n                    <p className=\"font-bold text-white text-sm\">{user?.fullName || \"User\"}</p>\n                    <p className=\"text-xs text-slate-300\">{user?.email}</p>\n                  </div>\n                </div>\n                <DropdownMenuSeparator className=\"bg-slate-700/30\" />\n                <DropdownMenuItem\n                  className=\"text-slate-200 hover:text-white hover:bg-white/10 focus:text-white focus:bg-white/10 cursor-pointer\"\n                  onClick={() => setLocation(\"/profile\")}\n                >\n                  <User className=\"mr-2 h-4 w-4\" />\n                  Profile\n                </DropdownMenuItem>\n                <DropdownMenuItem\n                  className=\"text-slate-200 hover:text-white hover:bg-white/10 focus:text-white focus:bg-white/10 cursor-pointer\"\n                  onClick={() => setLocation(\"/billing\")}\n                >\n                  <SettingsIcon className=\"mr-2 h-4 w-4\" />\n                  Settings\n                </DropdownMenuItem>\n                <DropdownMenuSeparator className=\"bg-slate-700/30\" />\n                <DropdownMenuItem\n                  className=\"text-red-300 hover:text-red-200 hover:bg-red-500/20 focus:text-red-200 focus:bg-red-500/20 cursor-pointer\"\n                  onClick={handleLogout}\n                >\n                  <LogOut className=\"mr-2 h-4 w-4\" />\n                  Logout\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <div className=\"p-4 sm:p-6 space-y-6\">\n        {/* Summary Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700/50\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"p-3 rounded-full bg-slate-800/50\">\n                  <DollarSign className=\"w-6 h-6\" style={{ color: '#C1E8FF' }} />\n                </div>\n                <div>\n                  <h3 className=\"text-white font-bold text-2xl\">${totalImpact.toFixed(0)}</h3>\n                  <p className=\"text-slate-300 text-sm\">Revenue Impact</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700/50\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"p-3 rounded-full bg-slate-800/50\">\n                  <TrendingUp className=\"w-6 h-6\" style={{ color: '#C1E8FF' }} />\n                </div>\n                <div>\n                  <h3 className=\"text-white font-bold text-2xl\">+{totalUplift}%</h3>\n                  <p className=\"text-slate-300 text-sm\">Avg ROI Uplift</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700/50\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"p-3 rounded-full bg-slate-800/50\">\n                  <ShoppingCart className=\"w-6 h-6\" style={{ color: '#C1E8FF' }} />\n                </div>\n                <div>\n                  <h3 className=\"text-white font-bold text-2xl\">{roiData.length}</h3>\n                  <p className=\"text-slate-300 text-sm\">Products Tracked</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700/50\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"p-3 rounded-full bg-slate-800/50\">\n                  <Calendar className=\"w-6 h-6\" style={{ color: '#C1E8FF' }} />\n                </div>\n                <div>\n                  <h3 className=\"text-white font-bold text-2xl\">30</h3>\n                  <p className=\"text-slate-300 text-sm\">Days Tracking</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* ROI Performance */}\n        <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700/50\">\n          <CardHeader>\n            <CardTitle className=\"text-white\">Content ROI Performance</CardTitle>\n            <CardDescription className=\"text-slate-300\">\n              Track sales uplift and revenue impact from AI-optimized content\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {roiData.map((item) => (\n              <div key={item.id} className=\"bg-slate-800/30 rounded-lg p-4 space-y-4\">\n                <div className=\"flex items-start justify-between\">\n                  <div>\n                    <h3 className=\"text-white font-semibold text-lg\">{item.productName}</h3>\n                    <div className=\"flex items-center space-x-3 mt-2\">\n                      <Badge variant=\"secondary\" className=\"bg-green-500/20 text-green-400\">\n                        <div className=\"flex items-center space-x-1\">\n                          <ArrowUpRight className=\"w-3 h-3\" />\n                          <span>+{item.uplift}% ROI</span>\n                        </div>\n                      </Badge>\n                      <span className=\"text-slate-400 text-sm\">\n                        Optimized: {new Date(item.optimizedDate).toLocaleDateString()}\n                      </span>\n                    </div>\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <Button size=\"sm\" variant=\"outline\" className=\"border-slate-600 text-slate-300 hover:bg-white/10\">\n                      <Eye className=\"w-4 h-4 mr-2\" />\n                      Details\n                    </Button>\n                    <Button size=\"sm\" className=\"bg-[#C1E8FF] hover:bg-[#C1E8FF]/90 text-indigo-900\">\n                      <BarChart3 className=\"w-4 h-4 mr-2\" />\n                      Analyze\n                    </Button>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-4\">\n                    <h4 className=\"text-slate-300 font-medium\">Revenue Comparison</h4>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"bg-slate-900/50 p-3 rounded-lg\">\n                        <p className=\"text-slate-400 text-sm\">Before</p>\n                        <p className=\"text-xl font-bold text-white\">${item.beforeRevenue.toFixed(0)}</p>\n                        <p className=\"text-slate-400 text-xs\">{item.ordersBefore} orders</p>\n                      </div>\n                      <div className=\"bg-slate-800/50 p-3 rounded-lg border border-[#C1E8FF]/20\">\n                        <p className=\"text-slate-400 text-sm\">After</p>\n                        <p className=\"text-xl font-bold text-white\">${item.afterRevenue.toFixed(0)}</p>\n                        <p className=\"text-slate-400 text-xs\">{item.ordersAfter} orders</p>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-4\">\n                    <h4 className=\"text-slate-300 font-medium\">Conversion Rates</h4>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"bg-slate-900/50 p-3 rounded-lg\">\n                        <p className=\"text-slate-400 text-sm\">Before</p>\n                        <p className=\"text-xl font-bold text-white\">{item.conversionBefore}%</p>\n                        <p className=\"text-slate-400 text-xs\">Conversion rate</p>\n                      </div>\n                      <div className=\"bg-slate-800/50 p-3 rounded-lg border border-[#C1E8FF]/20\">\n                        <p className=\"text-slate-400 text-sm\">After</p>\n                        <p className=\"text-xl font-bold text-white\">{item.conversionAfter}%</p>\n                        <p className=\"text-slate-400 text-xs\">Conversion rate</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"bg-green-500/10 border border-green-500/30 rounded-lg p-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-green-400 font-medium\">Revenue Increase</span>\n                    <span className=\"text-green-400 font-bold text-lg\">\n                      +${(item.afterRevenue - item.beforeRevenue).toFixed(0)} ({item.uplift}%)\n                    </span>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":13945},"client/src/pages/email-performance.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport NotificationCenter from \"@/components/dashboard/notification-center\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  ArrowLeft, \n  Mail, \n  TrendingUp, \n  Users,\n  MousePointer,\n  User, \n  LogOut, \n  Settings as SettingsIcon,\n  Eye,\n  BarChart\n} from \"lucide-react\";\n\nexport default function EmailPerformance() {\n  const { user, logout } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const handleLogout = () => {\n    logout();\n    setLocation(\"/auth\");\n  };\n\n  const handleGoBack = () => {\n    setLocation(\"/dashboard\");\n  };\n\n  // Mock email campaign data\n  const campaigns = [\n    {\n      id: \"1\",\n      name: \"Winter Sale Campaign\",\n      subject: \"🎉 50% Off Everything - Limited Time!\",\n      sent: 15420,\n      opens: 5285,\n      clicks: 847,\n      openRate: 34.3,\n      clickRate: 5.5,\n      sentDate: \"2024-01-18\"\n    },\n    {\n      id: \"2\",\n      name: \"New Product Launch\",\n      subject: \"Introducing Our Latest Innovation\",\n      sent: 8750,\n      opens: 2980,\n      clicks: 536,\n      openRate: 34.1,\n      clickRate: 6.1,\n      sentDate: \"2024-01-15\"\n    },\n    {\n      id: \"3\",\n      name: \"Cart Recovery\",\n      subject: \"Don't forget your items\",\n      sent: 3240,\n      opens: 1134,\n      clicks: 227,\n      openRate: 35.0,\n      clickRate: 7.0,\n      sentDate: \"2024-01-12\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-[#021024] to-[#052659]\">\n      {/* Header */}\n      <header className=\"bg-gradient-to-br from-[#021024] to-[#052659] backdrop-blur-sm border-b border-slate-700/50 px-4 sm:px-6 py-3 sm:py-4\">\n        <div className=\"flex items-center\">\n          <div className=\"flex items-center space-x-2 sm:space-x-4 min-w-0 flex-1\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={handleGoBack}\n              className=\"text-slate-200 hover:text-[#C1E8FF] hover:bg-white/10 transition-all duration-300 ease-in-out flex-shrink-0\"\n            >\n              <ArrowLeft className=\"w-4 h-4 sm:w-5 sm:h-5\" />\n            </Button>\n            <div className=\"min-w-0 flex-1\">\n              <h1 className=\"font-bold text-white text-base sm:text-lg lg:text-xl xl:text-2xl truncate\">\n                Email Performance\n              </h1>\n              <p className=\"text-slate-300 text-xs sm:text-sm lg:text-base truncate\">\n                Email open rates and click-through performance analytics\n              </p>\n            </div>\n          </div>\n\n          <div className=\"flex items-center justify-end space-x-2 sm:space-x-4 flex-shrink-0\">\n            <NotificationCenter />\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button\n                  variant=\"ghost\"\n                  className=\"relative h-10 w-10 rounded-full text-slate-200 hover:text-[#C1E8FF] transition-all duration-300 ease-in-out\"\n                >\n                  <Avatar className=\"h-8 w-8\">\n                    <AvatarImage src=\"\" alt={user?.fullName || \"User\"} />\n                    <AvatarFallback className=\"bg-gradient-to-br from-[#021024] to-[#052659] text-[#C1E8FF]\">\n                      {user?.fullName?.charAt(0) || \"U\"}\n                    </AvatarFallback>\n                  </Avatar>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent className=\"w-56 bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700/50 text-white\" align=\"end\" forceMount>\n                <div className=\"flex items-center justify-start gap-2 p-2\">\n                  <div className=\"flex flex-col space-y-1 leading-none\">\n                    <p className=\"font-bold text-white text-sm\">{user?.fullName || \"User\"}</p>\n                    <p className=\"text-xs text-slate-300\">{user?.email}</p>\n                  </div>\n                </div>\n                <DropdownMenuSeparator className=\"bg-slate-700/30\" />\n                <DropdownMenuItem\n                  className=\"text-slate-200 hover:text-white hover:bg-white/10 focus:text-white focus:bg-white/10 cursor-pointer\"\n                  onClick={() => setLocation(\"/profile\")}\n                >\n                  <User className=\"mr-2 h-4 w-4\" />\n                  Profile\n                </DropdownMenuItem>\n                <DropdownMenuItem\n                  className=\"text-slate-200 hover:text-white hover:bg-white/10 focus:text-white focus:bg-white/10 cursor-pointer\"\n                  onClick={() => setLocation(\"/billing\")}\n                >\n                  <SettingsIcon className=\"mr-2 h-4 w-4\" />\n                  Settings\n                </DropdownMenuItem>\n                <DropdownMenuSeparator className=\"bg-slate-700/30\" />\n                <DropdownMenuItem\n                  className=\"text-red-300 hover:text-red-200 hover:bg-red-500/20 focus:text-red-200 focus:bg-red-500/20 cursor-pointer\"\n                  onClick={handleLogout}\n                >\n                  <LogOut className=\"mr-2 h-4 w-4\" />\n                  Logout\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <div className=\"p-4 sm:p-6 space-y-6\">\n        {/* Summary Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700/50\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"p-3 rounded-full bg-slate-800/50\">\n                  <Mail className=\"w-6 h-6\" style={{ color: '#C1E8FF' }} />\n                </div>\n                <div>\n                  <h3 className=\"text-white font-bold text-2xl\">27,410</h3>\n                  <p className=\"text-slate-300 text-sm\">Total Sent</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700/50\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"p-3 rounded-full bg-slate-800/50\">\n                  <Users className=\"w-6 h-6\" style={{ color: '#C1E8FF' }} />\n                </div>\n                <div>\n                  <h3 className=\"text-white font-bold text-2xl\">9,399</h3>\n                  <p className=\"text-slate-300 text-sm\">Total Opens</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700/50\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"p-3 rounded-full bg-slate-800/50\">\n                  <MousePointer className=\"w-6 h-6\" style={{ color: '#C1E8FF' }} />\n                </div>\n                <div>\n                  <h3 className=\"text-white font-bold text-2xl\">1,610</h3>\n                  <p className=\"text-slate-300 text-sm\">Total Clicks</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700/50\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"p-3 rounded-full bg-slate-800/50\">\n                  <TrendingUp className=\"w-6 h-6\" style={{ color: '#C1E8FF' }} />\n                </div>\n                <div>\n                  <h3 className=\"text-white font-bold text-2xl\">34.2%</h3>\n                  <p className=\"text-slate-300 text-sm\">Avg Open Rate</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Campaign Performance */}\n        <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700/50\">\n          <CardHeader>\n            <CardTitle className=\"text-white\">Recent Email Campaigns</CardTitle>\n            <CardDescription className=\"text-slate-300\">\n              Performance metrics for your latest email marketing campaigns\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {campaigns.map((campaign) => (\n              <div key={campaign.id} className=\"bg-slate-800/30 rounded-lg p-4 space-y-3\">\n                <div className=\"flex items-start justify-between\">\n                  <div>\n                    <h3 className=\"text-white font-semibold text-lg\">{campaign.name}</h3>\n                    <p className=\"text-slate-300 text-sm\">{campaign.subject}</p>\n                    <p className=\"text-slate-400 text-xs mt-1\">\n                      Sent on {new Date(campaign.sentDate).toLocaleDateString()}\n                    </p>\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <Button size=\"sm\" variant=\"outline\" className=\"border-slate-600 text-slate-300 hover:bg-white/10\">\n                      <Eye className=\"w-4 h-4 mr-2\" />\n                      View\n                    </Button>\n                    <Button size=\"sm\" className=\"bg-[#C1E8FF] hover:bg-[#C1E8FF]/90 text-indigo-900\">\n                      <BarChart className=\"w-4 h-4 mr-2\" />\n                      Analyze\n                    </Button>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                  <div className=\"text-center\">\n                    <p className=\"text-2xl font-bold text-white\">{campaign.sent.toLocaleString()}</p>\n                    <p className=\"text-slate-400 text-sm\">Sent</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-2xl font-bold text-white\">{campaign.opens.toLocaleString()}</p>\n                    <p className=\"text-slate-400 text-sm\">Opens</p>\n                    <Badge variant=\"secondary\" className=\"bg-green-500/20 text-green-400 text-xs mt-1\">\n                      {campaign.openRate}%\n                    </Badge>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-2xl font-bold text-white\">{campaign.clicks.toLocaleString()}</p>\n                    <p className=\"text-slate-400 text-sm\">Clicks</p>\n                    <Badge variant=\"secondary\" className=\"bg-blue-500/20 text-blue-400 text-xs mt-1\">\n                      {campaign.clickRate}%\n                    </Badge>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-2xl font-bold text-white\">{Math.round(campaign.clicks / campaign.opens * 100)}%</p>\n                    <p className=\"text-slate-400 text-sm\">Click-to-Open</p>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":11570},"client/src/pages/optimized-products.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport NotificationCenter from \"@/components/dashboard/notification-center\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  ArrowLeft, \n  ShoppingBag, \n  TrendingUp, \n  Calendar,\n  Filter,\n  Search,\n  Menu, \n  User, \n  LogOut, \n  Settings as SettingsIcon,\n  Eye,\n  Edit\n} from \"lucide-react\";\n\nexport default function OptimizedProducts() {\n  const { user, logout } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n\n  // Handle logout\n  const handleLogout = () => {\n    logout();\n    setLocation(\"/auth\");\n  };\n\n  // Mock data for optimized products\n  const optimizedProducts = [\n    {\n      id: \"1\",\n      name: \"Wireless Bluetooth Headphones\",\n      originalDescription: \"Good headphones with bluetooth\",\n      optimizedDescription: \"Experience crystal-clear audio with our premium wireless Bluetooth headphones. Featuring noise-cancellation technology, 30-hour battery life, and ergonomic design for all-day comfort. Perfect for music lovers, professionals, and fitness enthusiasts.\",\n      optimizedAt: \"2024-01-15\",\n      improvement: \"+85% engagement\",\n      status: \"active\"\n    },\n    {\n      id: \"2\", \n      name: \"Smart Fitness Watch\",\n      originalDescription: \"Watch that tracks fitness\",\n      optimizedDescription: \"Transform your fitness journey with our advanced smart watch. Monitor heart rate, track 50+ workout modes, receive smartphone notifications, and enjoy 7-day battery life. Water-resistant design with GPS tracking for accurate performance metrics.\",\n      optimizedAt: \"2024-01-12\",\n      improvement: \"+67% CTR\",\n      status: \"active\"\n    },\n    {\n      id: \"3\",\n      name: \"Portable Power Bank\",\n      originalDescription: \"Power bank for phones\",\n      optimizedDescription: \"Never run out of power with our ultra-fast 20,000mAh portable charger. Features 3 USB ports, wireless charging pad, and intelligent charging technology. Compact design with LED display shows remaining battery. Essential for travel, work, and emergencies.\",\n      optimizedAt: \"2024-01-10\",\n      improvement: \"+92% conversions\",\n      status: \"active\"\n    }\n  ];\n\n  const handleGoBack = () => {\n    setLocation(\"/dashboard\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-[#021024] to-[#052659]\">\n      {/* Header */}\n      <header className=\"bg-gradient-to-br from-[#021024] to-[#052659] backdrop-blur-sm border-b border-slate-700/50 px-4 sm:px-6 py-3 sm:py-4\">\n        <div className=\"flex items-center\">\n          {/* Left Section - Back Button + Title */}\n          <div className=\"flex items-center space-x-2 sm:space-x-4 min-w-0 flex-1\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={handleGoBack}\n              className=\"text-slate-200 hover:text-[#C1E8FF] hover:bg-white/10 transition-all duration-300 ease-in-out flex-shrink-0\"\n            >\n              <ArrowLeft className=\"w-4 h-4 sm:w-5 sm:h-5\" />\n            </Button>\n            <div className=\"min-w-0 flex-1\">\n              <h1 className=\"font-bold text-white text-base sm:text-lg lg:text-xl xl:text-2xl truncate\">\n                Optimized Products\n              </h1>\n              <p className=\"text-slate-300 text-xs sm:text-sm lg:text-base truncate\">\n                Track products enhanced by Zyra AI with improved descriptions and SEO\n              </p>\n            </div>\n          </div>\n\n          {/* Right Section - Notifications + Profile */}\n          <div className=\"flex items-center justify-end space-x-2 sm:space-x-4 flex-shrink-0\">\n            <NotificationCenter />\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button\n                  variant=\"ghost\"\n                  className=\"relative h-10 w-10 rounded-full text-slate-200 hover:text-[#C1E8FF] transition-all duration-300 ease-in-out\"\n                >\n                  <Avatar className=\"h-8 w-8\">\n                    <AvatarImage src=\"\" alt={user?.fullName || \"User\"} />\n                    <AvatarFallback className=\"bg-gradient-to-br from-[#021024] to-[#052659] text-[#C1E8FF]\">\n                      {user?.fullName?.charAt(0) || \"U\"}\n                    </AvatarFallback>\n                  </Avatar>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent className=\"w-56 bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700/50 text-white\" align=\"end\" forceMount>\n                <div className=\"flex items-center justify-start gap-2 p-2\">\n                  <div className=\"flex flex-col space-y-1 leading-none\">\n                    <p className=\"font-bold text-white text-sm\">{user?.fullName || \"User\"}</p>\n                    <p className=\"text-xs text-slate-300\">{user?.email}</p>\n                  </div>\n                </div>\n                <DropdownMenuSeparator className=\"bg-slate-700/30\" />\n                <DropdownMenuItem\n                  className=\"text-slate-200 hover:text-white hover:bg-white/10 focus:text-white focus:bg-white/10 cursor-pointer\"\n                  onClick={() => setLocation(\"/profile\")}\n                >\n                  <User className=\"mr-2 h-4 w-4\" />\n                  Profile\n                </DropdownMenuItem>\n                <DropdownMenuItem\n                  className=\"text-slate-200 hover:text-white hover:bg-white/10 focus:text-white focus:bg-white/10 cursor-pointer\"\n                  onClick={() => setLocation(\"/billing\")}\n                >\n                  <SettingsIcon className=\"mr-2 h-4 w-4\" />\n                  Settings\n                </DropdownMenuItem>\n                <DropdownMenuSeparator className=\"bg-slate-700/30\" />\n                <DropdownMenuItem\n                  className=\"text-red-300 hover:text-red-200 hover:bg-red-500/20 focus:text-red-200 focus:bg-red-500/20 cursor-pointer\"\n                  onClick={handleLogout}\n                >\n                  <LogOut className=\"mr-2 h-4 w-4\" />\n                  Logout\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <div className=\"p-4 sm:p-6 space-y-6\">\n        {/* Summary Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700/50\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"p-3 rounded-full bg-slate-800/50\">\n                  <ShoppingBag className=\"w-6 h-6\" style={{ color: '#C1E8FF' }} />\n                </div>\n                <div>\n                  <h3 className=\"text-white font-bold text-2xl\">247</h3>\n                  <p className=\"text-slate-300 text-sm\">Total Products</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700/50\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"p-3 rounded-full bg-slate-800/50\">\n                  <TrendingUp className=\"w-6 h-6\" style={{ color: '#C1E8FF' }} />\n                </div>\n                <div>\n                  <h3 className=\"text-white font-bold text-2xl\">+78%</h3>\n                  <p className=\"text-slate-300 text-sm\">Avg Improvement</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700/50\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"p-3 rounded-full bg-slate-800/50\">\n                  <Calendar className=\"w-6 h-6\" style={{ color: '#C1E8FF' }} />\n                </div>\n                <div>\n                  <h3 className=\"text-white font-bold text-2xl\">23</h3>\n                  <p className=\"text-slate-300 text-sm\">This Week</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Products List */}\n        <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700/50\">\n          <CardHeader>\n            <CardTitle className=\"text-white\">Recently Optimized Products</CardTitle>\n            <CardDescription className=\"text-slate-300\">\n              Products enhanced with AI-generated descriptions and SEO optimization\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {optimizedProducts.map((product) => (\n              <div key={product.id} className=\"bg-slate-800/30 rounded-lg p-4 space-y-4\">\n                <div className=\"flex items-start justify-between\">\n                  <div>\n                    <h3 className=\"text-white font-semibold text-lg\">{product.name}</h3>\n                    <div className=\"flex items-center space-x-2 mt-1\">\n                      <Badge variant=\"secondary\" className=\"bg-green-500/20 text-green-400\">\n                        {product.improvement}\n                      </Badge>\n                      <span className=\"text-slate-400 text-sm\">\n                        Optimized on {new Date(product.optimizedAt).toLocaleDateString()}\n                      </span>\n                    </div>\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <Button size=\"sm\" variant=\"outline\" className=\"border-slate-600 text-slate-300 hover:bg-white/10\">\n                      <Eye className=\"w-4 h-4 mr-2\" />\n                      View\n                    </Button>\n                    <Button size=\"sm\" className=\"bg-[#C1E8FF] hover:bg-[#C1E8FF]/90 text-indigo-900\">\n                      <Edit className=\"w-4 h-4 mr-2\" />\n                      Edit\n                    </Button>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <h4 className=\"text-slate-300 font-medium mb-2\">Original Description</h4>\n                    <p className=\"text-slate-400 text-sm bg-slate-900/50 p-3 rounded\">\n                      {product.originalDescription}\n                    </p>\n                  </div>\n                  <div>\n                    <h4 className=\"text-slate-300 font-medium mb-2\">AI-Optimized Description</h4>\n                    <p className=\"text-slate-300 text-sm bg-slate-800/50 p-3 rounded border border-[#C1E8FF]/20\">\n                      {product.optimizedDescription}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":11567},"client/src/pages/revenue-impact.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport NotificationCenter from \"@/components/dashboard/notification-center\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  ArrowLeft, \n  DollarSign, \n  TrendingUp, \n  ShoppingBag,\n  Mail,\n  MessageSquare,\n  Target,\n  User, \n  LogOut, \n  Settings as SettingsIcon,\n  Eye,\n  BarChart3\n} from \"lucide-react\";\n\nexport default function RevenueImpact() {\n  const { user, logout } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const handleLogout = () => {\n    logout();\n    setLocation(\"/auth\");\n  };\n\n  const handleGoBack = () => {\n    setLocation(\"/dashboard\");\n  };\n\n  // Mock revenue impact data by source\n  const revenueBreakdown = [\n    {\n      id: \"1\",\n      source: \"Optimized Products\",\n      icon: <ShoppingBag className=\"w-6 h-6\" style={{ color: '#C1E8FF' }} />,\n      revenue: 45623.80,\n      percentage: 42.5,\n      growth: \"+156%\",\n      description: \"Revenue from AI-enhanced product descriptions\"\n    },\n    {\n      id: \"2\",\n      source: \"Email Campaigns\",\n      icon: <Mail className=\"w-6 h-6\" style={{ color: '#C1E8FF' }} />,\n      revenue: 28847.50,\n      percentage: 26.8,\n      growth: \"+89%\",\n      description: \"Revenue from AI-optimized email marketing\"\n    },\n    {\n      id: \"3\", \n      source: \"SMS Conversions\",\n      icon: <MessageSquare className=\"w-6 h-6\" style={{ color: '#C1E8FF' }} />,\n      revenue: 18924.30,\n      percentage: 17.6,\n      growth: \"+234%\",\n      description: \"Revenue from SMS cart recovery campaigns\"\n    },\n    {\n      id: \"4\",\n      source: \"SEO Improvements\",\n      icon: <Target className=\"w-6 h-6\" style={{ color: '#C1E8FF' }} />,\n      revenue: 14156.40,\n      percentage: 13.1,\n      growth: \"+78%\",\n      description: \"Revenue from improved search rankings\"\n    }\n  ];\n\n  const totalRevenue = revenueBreakdown.reduce((sum, item) => sum + item.revenue, 0);\n\n  // Mock monthly data\n  const monthlyData = [\n    { month: \"Oct 2023\", revenue: 15840.50 },\n    { month: \"Nov 2023\", revenue: 23150.75 },\n    { month: \"Dec 2023\", revenue: 34620.90 },\n    { month: \"Jan 2024\", revenue: 52847.30 }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-[#021024] to-[#052659]\">\n      {/* Header */}\n      <header className=\"bg-gradient-to-br from-[#021024] to-[#052659] backdrop-blur-sm border-b border-slate-700/50 px-4 sm:px-6 py-3 sm:py-4\">\n        <div className=\"flex items-center\">\n          <div className=\"flex items-center space-x-2 sm:space-x-4 min-w-0 flex-1\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={handleGoBack}\n              className=\"text-slate-200 hover:text-[#C1E8FF] hover:bg-white/10 transition-all duration-300 ease-in-out flex-shrink-0\"\n            >\n              <ArrowLeft className=\"w-4 h-4 sm:w-5 sm:h-5\" />\n            </Button>\n            <div className=\"min-w-0 flex-1\">\n              <h1 className=\"font-bold text-white text-base sm:text-lg lg:text-xl xl:text-2xl truncate\">\n                Revenue Impact\n              </h1>\n              <p className=\"text-slate-300 text-xs sm:text-sm lg:text-base truncate\">\n                Total revenue boost from Zyra AI optimizations this month\n              </p>\n            </div>\n          </div>\n\n          <div className=\"flex items-center justify-end space-x-2 sm:space-x-4 flex-shrink-0\">\n            <NotificationCenter />\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button\n                  variant=\"ghost\"\n                  className=\"relative h-10 w-10 rounded-full text-slate-200 hover:text-[#C1E8FF] transition-all duration-300 ease-in-out\"\n                >\n                  <Avatar className=\"h-8 w-8\">\n                    <AvatarImage src=\"\" alt={user?.fullName || \"User\"} />\n                    <AvatarFallback className=\"bg-gradient-to-br from-[#021024] to-[#052659] text-[#C1E8FF]\">\n                      {user?.fullName?.charAt(0) || \"U\"}\n                    </AvatarFallback>\n                  </Avatar>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent className=\"w-56 bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700/50 text-white\" align=\"end\" forceMount>\n                <div className=\"flex items-center justify-start gap-2 p-2\">\n                  <div className=\"flex flex-col space-y-1 leading-none\">\n                    <p className=\"font-bold text-white text-sm\">{user?.fullName || \"User\"}</p>\n                    <p className=\"text-xs text-slate-300\">{user?.email}</p>\n                  </div>\n                </div>\n                <DropdownMenuSeparator className=\"bg-slate-700/30\" />\n                <DropdownMenuItem\n                  className=\"text-slate-200 hover:text-white hover:bg-white/10 focus:text-white focus:bg-white/10 cursor-pointer\"\n                  onClick={() => setLocation(\"/profile\")}\n                >\n                  <User className=\"mr-2 h-4 w-4\" />\n                  Profile\n                </DropdownMenuItem>\n                <DropdownMenuItem\n                  className=\"text-slate-200 hover:text-white hover:bg-white/10 focus:text-white focus:bg-white/10 cursor-pointer\"\n                  onClick={() => setLocation(\"/billing\")}\n                >\n                  <SettingsIcon className=\"mr-2 h-4 w-4\" />\n                  Settings\n                </DropdownMenuItem>\n                <DropdownMenuSeparator className=\"bg-slate-700/30\" />\n                <DropdownMenuItem\n                  className=\"text-red-300 hover:text-red-200 hover:bg-red-500/20 focus:text-red-200 focus:bg-red-500/20 cursor-pointer\"\n                  onClick={handleLogout}\n                >\n                  <LogOut className=\"mr-2 h-4 w-4\" />\n                  Logout\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <div className=\"p-4 sm:p-6 space-y-6\">\n        {/* Total Impact Card */}\n        <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700/50\">\n          <CardContent className=\"p-8\">\n            <div className=\"text-center space-y-4\">\n              <div className=\"p-4 rounded-full bg-slate-800/50 inline-flex\">\n                <DollarSign className=\"w-12 h-12\" style={{ color: '#C1E8FF' }} />\n              </div>\n              <div>\n                <h2 className=\"text-4xl md:text-5xl font-bold text-white\">${totalRevenue.toLocaleString()}</h2>\n                <p className=\"text-xl text-slate-300 mt-2\">Total Revenue Added This Month</p>\n                <Badge variant=\"secondary\" className=\"bg-green-500/20 text-green-400 text-lg px-4 py-2 mt-4\">\n                  <TrendingUp className=\"w-5 h-5 mr-2\" />\n                  +134% vs Last Month\n                </Badge>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Revenue Breakdown */}\n        <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700/50\">\n          <CardHeader>\n            <CardTitle className=\"text-white\">Revenue Breakdown by Source</CardTitle>\n            <CardDescription className=\"text-slate-300\">\n              See how different Zyra AI features contribute to your revenue growth\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {revenueBreakdown.map((item) => (\n              <div key={item.id} className=\"bg-slate-800/30 rounded-lg p-4\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"p-3 rounded-full bg-slate-800/50\">\n                      {item.icon}\n                    </div>\n                    <div>\n                      <h3 className=\"text-white font-semibold text-lg\">{item.source}</h3>\n                      <p className=\"text-slate-400 text-sm\">{item.description}</p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <Badge variant=\"secondary\" className=\"bg-green-500/20 text-green-400 mb-2\">\n                      {item.growth}\n                    </Badge>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"w-full bg-slate-700 rounded-full h-3\">\n                      <div \n                        className=\"bg-gradient-to-r from-[#C1E8FF] to-blue-400 h-3 rounded-full transition-all duration-500\"\n                        style={{ width: `${item.percentage}%` }}\n                      />\n                    </div>\n                    <p className=\"text-slate-400 text-sm mt-1\">{item.percentage}% of total</p>\n                  </div>\n                  <div className=\"ml-6 text-right\">\n                    <p className=\"text-2xl font-bold text-white\">${item.revenue.toLocaleString()}</p>\n                    <Button size=\"sm\" variant=\"outline\" className=\"border-slate-600 text-slate-300 hover:bg-white/10 mt-2\">\n                      <Eye className=\"w-4 h-4 mr-2\" />\n                      Details\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n\n        {/* Monthly Trend */}\n        <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700/50\">\n          <CardHeader>\n            <CardTitle className=\"text-white\">Monthly Revenue Trend</CardTitle>\n            <CardDescription className=\"text-slate-300\">\n              Track your revenue growth powered by Zyra AI over time\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              {monthlyData.map((month, index) => (\n                <div key={index} className=\"bg-slate-800/30 rounded-lg p-4 text-center\">\n                  <h4 className=\"text-slate-300 font-medium\">{month.month}</h4>\n                  <p className=\"text-2xl font-bold text-white mt-2\">${month.revenue.toLocaleString()}</p>\n                  {index > 0 && (\n                    <Badge variant=\"secondary\" className=\"bg-green-500/20 text-green-400 text-xs mt-2\">\n                      +{(((month.revenue - monthlyData[index-1].revenue) / monthlyData[index-1].revenue) * 100).toFixed(0)}%\n                    </Badge>\n                  )}\n                </div>\n              ))}\n            </div>\n            <div className=\"mt-6 text-center\">\n              <Button className=\"bg-[#C1E8FF] hover:bg-[#C1E8FF]/90 text-indigo-900\">\n                <BarChart3 className=\"w-4 h-4 mr-2\" />\n                View Detailed Analytics\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":11484},"client/src/pages/seo-keyword-density.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport NotificationCenter from \"@/components/dashboard/notification-center\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  ArrowLeft, \n  Search, \n  TrendingUp, \n  BarChart3,\n  Target,\n  Award,\n  User, \n  LogOut, \n  Settings as SettingsIcon,\n  Eye,\n  RefreshCw\n} from \"lucide-react\";\n\nexport default function SeoKeywordDensity() {\n  const { user, logout } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const handleLogout = () => {\n    logout();\n    setLocation(\"/auth\");\n  };\n\n  const handleGoBack = () => {\n    setLocation(\"/dashboard\");\n  };\n\n  // Mock keyword analysis data\n  const keywordAnalysis = [\n    {\n      id: \"1\",\n      productName: \"Wireless Bluetooth Headphones\",\n      primaryKeywords: [\n        { keyword: \"wireless headphones\", density: 4.2, target: 3.5, status: \"optimal\" },\n        { keyword: \"bluetooth headphones\", density: 3.1, target: 2.5, status: \"good\" },\n        { keyword: \"noise cancelling\", density: 2.8, target: 2.0, status: \"good\" },\n        { keyword: \"audio quality\", density: 1.9, target: 2.0, status: \"low\" }\n      ],\n      seoScore: 78,\n      lastAnalyzed: \"2024-01-18\"\n    },\n    {\n      id: \"2\",\n      productName: \"Smart Fitness Watch\",\n      primaryKeywords: [\n        { keyword: \"fitness tracker\", density: 3.8, target: 3.0, status: \"good\" },\n        { keyword: \"smart watch\", density: 4.5, target: 3.5, status: \"high\" },\n        { keyword: \"heart rate monitor\", density: 2.1, target: 2.5, status: \"low\" },\n        { keyword: \"waterproof watch\", density: 1.7, target: 2.0, status: \"low\" }\n      ],\n      seoScore: 72,\n      lastAnalyzed: \"2024-01-16\"\n    },\n    {\n      id: \"3\",\n      productName: \"Portable Power Bank\",\n      primaryKeywords: [\n        { keyword: \"portable charger\", density: 3.9, target: 3.5, status: \"optimal\" },\n        { keyword: \"power bank\", density: 4.1, target: 4.0, status: \"optimal\" },\n        { keyword: \"fast charging\", density: 2.7, target: 2.5, status: \"good\" },\n        { keyword: \"mobile battery\", density: 2.2, target: 2.0, status: \"good\" }\n      ],\n      seoScore: 85,\n      lastAnalyzed: \"2024-01-14\"\n    }\n  ];\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"optimal\": return \"bg-green-500/20 text-green-400\";\n      case \"good\": return \"bg-blue-500/20 text-blue-400\";\n      case \"low\": return \"bg-yellow-500/20 text-yellow-400\";\n      case \"high\": return \"bg-orange-500/20 text-orange-400\";\n      default: return \"bg-slate-500/20 text-slate-400\";\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"optimal\": return <Award className=\"w-4 h-4\" />;\n      case \"good\": return <TrendingUp className=\"w-4 h-4\" />;\n      case \"low\": return <Target className=\"w-4 h-4\" />;\n      case \"high\": return <BarChart3 className=\"w-4 h-4\" />;\n      default: return <Search className=\"w-4 h-4\" />;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-[#021024] to-[#052659]\">\n      {/* Header */}\n      <header className=\"bg-gradient-to-br from-[#021024] to-[#052659] backdrop-blur-sm border-b border-slate-700/50 px-4 sm:px-6 py-3 sm:py-4\">\n        <div className=\"flex items-center\">\n          <div className=\"flex items-center space-x-2 sm:space-x-4 min-w-0 flex-1\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={handleGoBack}\n              className=\"text-slate-200 hover:text-[#C1E8FF] hover:bg-white/10 transition-all duration-300 ease-in-out flex-shrink-0\"\n            >\n              <ArrowLeft className=\"w-4 h-4 sm:w-5 sm:h-5\" />\n            </Button>\n            <div className=\"min-w-0 flex-1\">\n              <h1 className=\"font-bold text-white text-base sm:text-lg lg:text-xl xl:text-2xl truncate\">\n                SEO Keyword Density\n              </h1>\n              <p className=\"text-slate-300 text-xs sm:text-sm lg:text-base truncate\">\n                Keyword optimization and search ranking improvements\n              </p>\n            </div>\n          </div>\n\n          <div className=\"flex items-center justify-end space-x-2 sm:space-x-4 flex-shrink-0\">\n            <NotificationCenter />\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button\n                  variant=\"ghost\"\n                  className=\"relative h-10 w-10 rounded-full text-slate-200 hover:text-[#C1E8FF] transition-all duration-300 ease-in-out\"\n                >\n                  <Avatar className=\"h-8 w-8\">\n                    <AvatarImage src=\"\" alt={user?.fullName || \"User\"} />\n                    <AvatarFallback className=\"bg-gradient-to-br from-[#021024] to-[#052659] text-[#C1E8FF]\">\n                      {user?.fullName?.charAt(0) || \"U\"}\n                    </AvatarFallback>\n                  </Avatar>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent className=\"w-56 bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700/50 text-white\" align=\"end\" forceMount>\n                <div className=\"flex items-center justify-start gap-2 p-2\">\n                  <div className=\"flex flex-col space-y-1 leading-none\">\n                    <p className=\"font-bold text-white text-sm\">{user?.fullName || \"User\"}</p>\n                    <p className=\"text-xs text-slate-300\">{user?.email}</p>\n                  </div>\n                </div>\n                <DropdownMenuSeparator className=\"bg-slate-700/30\" />\n                <DropdownMenuItem\n                  className=\"text-slate-200 hover:text-white hover:bg-white/10 focus:text-white focus:bg-white/10 cursor-pointer\"\n                  onClick={() => setLocation(\"/profile\")}\n                >\n                  <User className=\"mr-2 h-4 w-4\" />\n                  Profile\n                </DropdownMenuItem>\n                <DropdownMenuItem\n                  className=\"text-slate-200 hover:text-white hover:bg-white/10 focus:text-white focus:bg-white/10 cursor-pointer\"\n                  onClick={() => setLocation(\"/billing\")}\n                >\n                  <SettingsIcon className=\"mr-2 h-4 w-4\" />\n                  Settings\n                </DropdownMenuItem>\n                <DropdownMenuSeparator className=\"bg-slate-700/30\" />\n                <DropdownMenuItem\n                  className=\"text-red-300 hover:text-red-200 hover:bg-red-500/20 focus:text-red-200 focus:bg-red-500/20 cursor-pointer\"\n                  onClick={handleLogout}\n                >\n                  <LogOut className=\"mr-2 h-4 w-4\" />\n                  Logout\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <div className=\"p-4 sm:p-6 space-y-6\">\n        {/* Summary Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700/50\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"p-3 rounded-full bg-slate-800/50\">\n                  <Search className=\"w-6 h-6\" style={{ color: '#C1E8FF' }} />\n                </div>\n                <div>\n                  <h3 className=\"text-white font-bold text-2xl\">247</h3>\n                  <p className=\"text-slate-300 text-sm\">Products Analyzed</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700/50\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"p-3 rounded-full bg-slate-800/50\">\n                  <TrendingUp className=\"w-6 h-6\" style={{ color: '#C1E8FF' }} />\n                </div>\n                <div>\n                  <h3 className=\"text-white font-bold text-2xl\">78.5</h3>\n                  <p className=\"text-slate-300 text-sm\">Avg SEO Score</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700/50\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"p-3 rounded-full bg-slate-800/50\">\n                  <Award className=\"w-6 h-6\" style={{ color: '#C1E8FF' }} />\n                </div>\n                <div>\n                  <h3 className=\"text-white font-bold text-2xl\">156</h3>\n                  <p className=\"text-slate-300 text-sm\">Optimal Keywords</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700/50\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"p-3 rounded-full bg-slate-800/50\">\n                  <Target className=\"w-6 h-6\" style={{ color: '#C1E8FF' }} />\n                </div>\n                <div>\n                  <h3 className=\"text-white font-bold text-2xl\">3.2%</h3>\n                  <p className=\"text-slate-300 text-sm\">Avg Density</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Keyword Analysis */}\n        <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700/50\">\n          <CardHeader>\n            <CardTitle className=\"text-white\">Product Keyword Analysis</CardTitle>\n            <CardDescription className=\"text-slate-300\">\n              AI-powered keyword density analysis and SEO optimization recommendations\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {keywordAnalysis.map((product) => (\n              <div key={product.id} className=\"bg-slate-800/30 rounded-lg p-4 space-y-4\">\n                <div className=\"flex items-start justify-between\">\n                  <div>\n                    <h3 className=\"text-white font-semibold text-lg\">{product.productName}</h3>\n                    <div className=\"flex items-center space-x-3 mt-2\">\n                      <Badge variant=\"secondary\" className={`${product.seoScore >= 80 ? 'bg-green-500/20 text-green-400' : product.seoScore >= 70 ? 'bg-blue-500/20 text-blue-400' : 'bg-yellow-500/20 text-yellow-400'}`}>\n                        SEO Score: {product.seoScore}\n                      </Badge>\n                      <span className=\"text-slate-400 text-sm\">\n                        Last analyzed: {new Date(product.lastAnalyzed).toLocaleDateString()}\n                      </span>\n                    </div>\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <Button size=\"sm\" variant=\"outline\" className=\"border-slate-600 text-slate-300 hover:bg-white/10\">\n                      <Eye className=\"w-4 h-4 mr-2\" />\n                      View\n                    </Button>\n                    <Button size=\"sm\" className=\"bg-[#C1E8FF] hover:bg-[#C1E8FF]/90 text-indigo-900\">\n                      <RefreshCw className=\"w-4 h-4 mr-2\" />\n                      Re-analyze\n                    </Button>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                  {product.primaryKeywords.map((kw, index) => (\n                    <div key={index} className=\"bg-slate-900/50 p-3 rounded-lg\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"text-white font-medium text-sm\">{kw.keyword}</span>\n                        <Badge variant=\"secondary\" className={`text-xs ${getStatusColor(kw.status)}`}>\n                          <div className=\"flex items-center space-x-1\">\n                            {getStatusIcon(kw.status)}\n                            <span>{kw.status}</span>\n                          </div>\n                        </Badge>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-slate-400\">Current:</span>\n                          <span className=\"text-white font-semibold\">{kw.density}%</span>\n                        </div>\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-slate-400\">Target:</span>\n                          <span className=\"text-slate-300\">{kw.target}%</span>\n                        </div>\n                        <div className=\"w-full bg-slate-700 rounded-full h-2\">\n                          <div \n                            className={`h-2 rounded-full transition-all duration-300 ${\n                              kw.status === 'optimal' ? 'bg-green-500' :\n                              kw.status === 'good' ? 'bg-blue-500' :\n                              kw.status === 'high' ? 'bg-orange-500' : 'bg-yellow-500'\n                            }`}\n                            style={{ width: `${Math.min((kw.density / kw.target) * 100, 100)}%` }}\n                          />\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":14086},"client/src/pages/seo-ranking-tracker.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport NotificationCenter from \"@/components/dashboard/notification-center\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  ArrowLeft, \n  BarChart3, \n  TrendingUp, \n  TrendingDown,\n  Search,\n  Award,\n  Target,\n  User, \n  LogOut, \n  Settings as SettingsIcon,\n  Eye,\n  RefreshCw,\n  ArrowUp,\n  ArrowDown,\n  Minus\n} from \"lucide-react\";\n\nexport default function SeoRankingTracker() {\n  const { user, logout } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const handleLogout = () => {\n    logout();\n    setLocation(\"/auth\");\n  };\n\n  const handleGoBack = () => {\n    setLocation(\"/dashboard\");\n  };\n\n  // Mock ranking data\n  const rankingData = [\n    {\n      id: \"1\",\n      keyword: \"wireless headphones\",\n      currentRank: 3,\n      previousRank: 7,\n      change: 4,\n      trend: \"up\",\n      searchVolume: 12500,\n      difficulty: \"Medium\",\n      productName: \"Wireless Bluetooth Headphones\",\n      url: \"/products/wireless-headphones\",\n      lastUpdate: \"2024-01-18\"\n    },\n    {\n      id: \"2\",\n      keyword: \"fitness tracker watch\",\n      currentRank: 5,\n      previousRank: 5,\n      change: 0,\n      trend: \"stable\",\n      searchVolume: 8900,\n      difficulty: \"High\",\n      productName: \"Smart Fitness Watch\",\n      url: \"/products/fitness-watch\",\n      lastUpdate: \"2024-01-18\"\n    },\n    {\n      id: \"3\",\n      keyword: \"portable power bank\",\n      currentRank: 2,\n      previousRank: 9,\n      change: 7,\n      trend: \"up\",\n      searchVolume: 6750,\n      difficulty: \"Low\",\n      productName: \"Portable Power Bank\",\n      url: \"/products/power-bank\",\n      lastUpdate: \"2024-01-18\"\n    },\n    {\n      id: \"4\",\n      keyword: \"gaming mouse wireless\",\n      currentRank: 8,\n      previousRank: 4,\n      change: -4,\n      trend: \"down\",\n      searchVolume: 4200,\n      difficulty: \"Medium\",\n      productName: \"Wireless Gaming Mouse\", \n      url: \"/products/gaming-mouse\",\n      lastUpdate: \"2024-01-18\"\n    },\n    {\n      id: \"5\",\n      keyword: \"bluetooth earbuds\",\n      currentRank: 6,\n      previousRank: 12,\n      change: 6,\n      trend: \"up\",\n      searchVolume: 15200,\n      difficulty: \"High\",\n      productName: \"True Wireless Earbuds\",\n      url: \"/products/earbuds\",\n      lastUpdate: \"2024-01-18\"\n    }\n  ];\n\n  const getTrendIcon = (trend: string, change: number) => {\n    if (trend === \"up\") return <ArrowUp className=\"w-4 h-4 text-green-400\" />;\n    if (trend === \"down\") return <ArrowDown className=\"w-4 h-4 text-red-400\" />;\n    return <Minus className=\"w-4 h-4 text-slate-400\" />;\n  };\n\n  const getTrendColor = (trend: string) => {\n    if (trend === \"up\") return \"bg-green-500/20 text-green-400\";\n    if (trend === \"down\") return \"bg-red-500/20 text-red-400\"; \n    return \"bg-slate-500/20 text-slate-400\";\n  };\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case \"Low\": return \"bg-green-500/20 text-green-400\";\n      case \"Medium\": return \"bg-yellow-500/20 text-yellow-400\";\n      case \"High\": return \"bg-red-500/20 text-red-400\";\n      default: return \"bg-slate-500/20 text-slate-400\";\n    }\n  };\n\n  const averageRank = (rankingData.reduce((sum, item) => sum + item.currentRank, 0) / rankingData.length).toFixed(1);\n  const improvingKeywords = rankingData.filter(item => item.change > 0).length;\n  const totalVolume = rankingData.reduce((sum, item) => sum + item.searchVolume, 0);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-[#021024] to-[#052659]\">\n      {/* Header */}\n      <header className=\"bg-gradient-to-br from-[#021024] to-[#052659] backdrop-blur-sm border-b border-slate-700/50 px-4 sm:px-6 py-3 sm:py-4\">\n        <div className=\"flex items-center\">\n          <div className=\"flex items-center space-x-2 sm:space-x-4 min-w-0 flex-1\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={handleGoBack}\n              className=\"text-slate-200 hover:text-[#C1E8FF] hover:bg-white/10 transition-all duration-300 ease-in-out flex-shrink-0\"\n            >\n              <ArrowLeft className=\"w-4 h-4 sm:w-5 sm:h-5\" />\n            </Button>\n            <div className=\"min-w-0 flex-1\">\n              <h1 className=\"font-bold text-white text-base sm:text-lg lg:text-xl xl:text-2xl truncate\">\n                SEO Ranking Tracker\n              </h1>\n              <p className=\"text-slate-300 text-xs sm:text-sm lg:text-base truncate\">\n                Track keyword positions and search visibility over time\n              </p>\n            </div>\n          </div>\n\n          <div className=\"flex items-center justify-end space-x-2 sm:space-x-4 flex-shrink-0\">\n            <NotificationCenter />\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button\n                  variant=\"ghost\"\n                  className=\"relative h-10 w-10 rounded-full text-slate-200 hover:text-[#C1E8FF] transition-all duration-300 ease-in-out\"\n                >\n                  <Avatar className=\"h-8 w-8\">\n                    <AvatarImage src=\"\" alt={user?.fullName || \"User\"} />\n                    <AvatarFallback className=\"bg-gradient-to-br from-[#021024] to-[#052659] text-[#C1E8FF]\">\n                      {user?.fullName?.charAt(0) || \"U\"}\n                    </AvatarFallback>\n                  </Avatar>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent className=\"w-56 bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700/50 text-white\" align=\"end\" forceMount>\n                <div className=\"flex items-center justify-start gap-2 p-2\">\n                  <div className=\"flex flex-col space-y-1 leading-none\">\n                    <p className=\"font-bold text-white text-sm\">{user?.fullName || \"User\"}</p>\n                    <p className=\"text-xs text-slate-300\">{user?.email}</p>\n                  </div>\n                </div>\n                <DropdownMenuSeparator className=\"bg-slate-700/30\" />\n                <DropdownMenuItem\n                  className=\"text-slate-200 hover:text-white hover:bg-white/10 focus:text-white focus:bg-white/10 cursor-pointer\"\n                  onClick={() => setLocation(\"/profile\")}\n                >\n                  <User className=\"mr-2 h-4 w-4\" />\n                  Profile\n                </DropdownMenuItem>\n                <DropdownMenuItem\n                  className=\"text-slate-200 hover:text-white hover:bg-white/10 focus:text-white focus:bg-white/10 cursor-pointer\"\n                  onClick={() => setLocation(\"/billing\")}\n                >\n                  <SettingsIcon className=\"mr-2 h-4 w-4\" />\n                  Settings\n                </DropdownMenuItem>\n                <DropdownMenuSeparator className=\"bg-slate-700/30\" />\n                <DropdownMenuItem\n                  className=\"text-red-300 hover:text-red-200 hover:bg-red-500/20 focus:text-red-200 focus:bg-red-500/20 cursor-pointer\"\n                  onClick={handleLogout}\n                >\n                  <LogOut className=\"mr-2 h-4 w-4\" />\n                  Logout\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <div className=\"p-4 sm:p-6 space-y-6\">\n        {/* Summary Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700/50\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"p-3 rounded-full bg-slate-800/50\">\n                  <Award className=\"w-6 h-6\" style={{ color: '#C1E8FF' }} />\n                </div>\n                <div>\n                  <h3 className=\"text-white font-bold text-2xl\">#{averageRank}</h3>\n                  <p className=\"text-slate-300 text-sm\">Avg Rank</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700/50\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"p-3 rounded-full bg-slate-800/50\">\n                  <TrendingUp className=\"w-6 h-6\" style={{ color: '#C1E8FF' }} />\n                </div>\n                <div>\n                  <h3 className=\"text-white font-bold text-2xl\">{improvingKeywords}</h3>\n                  <p className=\"text-slate-300 text-sm\">Improving</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700/50\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"p-3 rounded-full bg-slate-800/50\">\n                  <Search className=\"w-6 h-6\" style={{ color: '#C1E8FF' }} />\n                </div>\n                <div>\n                  <h3 className=\"text-white font-bold text-2xl\">{rankingData.length}</h3>\n                  <p className=\"text-slate-300 text-sm\">Keywords Tracked</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700/50\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"p-3 rounded-full bg-slate-800/50\">\n                  <Target className=\"w-6 h-6\" style={{ color: '#C1E8FF' }} />\n                </div>\n                <div>\n                  <h3 className=\"text-white font-bold text-2xl\">{(totalVolume / 1000).toFixed(0)}K</h3>\n                  <p className=\"text-slate-300 text-sm\">Search Volume</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Keyword Rankings */}\n        <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700/50\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle className=\"text-white\">Keyword Rankings</CardTitle>\n                <CardDescription className=\"text-slate-300\">\n                  Monitor your search engine rankings for targeted keywords\n                </CardDescription>\n              </div>\n              <Button variant=\"outline\" className=\"border-slate-600 text-slate-300 hover:bg-white/10\">\n                <RefreshCw className=\"w-4 h-4 mr-2\" />\n                Update Rankings\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {rankingData.map((item) => (\n              <div key={item.id} className=\"bg-slate-800/30 rounded-lg p-4\">\n                <div className=\"grid grid-cols-1 lg:grid-cols-6 gap-4 items-center\">\n                  <div className=\"lg:col-span-2\">\n                    <h3 className=\"text-white font-semibold\">{item.keyword}</h3>\n                    <p className=\"text-slate-400 text-sm\">{item.productName}</p>\n                  </div>\n                  \n                  <div className=\"text-center\">\n                    <div className=\"flex items-center justify-center space-x-2\">\n                      <span className=\"text-2xl font-bold text-white\">#{item.currentRank}</span>\n                      {item.change !== 0 && (\n                        <Badge variant=\"secondary\" className={getTrendColor(item.trend)}>\n                          <div className=\"flex items-center space-x-1\">\n                            {getTrendIcon(item.trend, item.change)}\n                            <span>{Math.abs(item.change)}</span>\n                          </div>\n                        </Badge>\n                      )}\n                    </div>\n                    <p className=\"text-slate-400 text-xs mt-1\">Current Rank</p>\n                  </div>\n                  \n                  <div className=\"text-center\">\n                    <p className=\"text-lg font-semibold text-slate-300\">{item.searchVolume.toLocaleString()}</p>\n                    <p className=\"text-slate-400 text-xs\">Search Volume</p>\n                  </div>\n                  \n                  <div className=\"text-center\">\n                    <Badge variant=\"secondary\" className={getDifficultyColor(item.difficulty)}>\n                      {item.difficulty}\n                    </Badge>\n                    <p className=\"text-slate-400 text-xs mt-1\">Difficulty</p>\n                  </div>\n                  \n                  <div className=\"flex space-x-2 justify-end\">\n                    <Button size=\"sm\" variant=\"outline\" className=\"border-slate-600 text-slate-300 hover:bg-white/10\">\n                      <Eye className=\"w-4 h-4 mr-2\" />\n                      View\n                    </Button>\n                    <Button size=\"sm\" className=\"bg-[#C1E8FF] hover:bg-[#C1E8FF]/90 text-indigo-900\">\n                      <BarChart3 className=\"w-4 h-4 mr-2\" />\n                      History\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":13856},"client/src/pages/sms-conversion.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport NotificationCenter from \"@/components/dashboard/notification-center\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  ArrowLeft, \n  MessageSquare, \n  TrendingUp, \n  DollarSign,\n  Users,\n  ShoppingCart,\n  User, \n  LogOut, \n  Settings as SettingsIcon,\n  Eye,\n  BarChart\n} from \"lucide-react\";\n\nexport default function SmsConversion() {\n  const { user, logout } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const handleLogout = () => {\n    logout();\n    setLocation(\"/auth\");\n  };\n\n  const handleGoBack = () => {\n    setLocation(\"/dashboard\");\n  };\n\n  // Mock SMS campaign data\n  const smsCampaigns = [\n    {\n      id: \"1\",\n      name: \"Cart Recovery SMS\",\n      message: \"Hi! You left items in your cart. Complete your order now and save 10%! [Link]\",\n      sent: 2440,\n      delivered: 2398,\n      clicked: 287,\n      converted: 82,\n      revenue: 2847.50,\n      conversionRate: 28.6,\n      sentDate: \"2024-01-18\"\n    },\n    {\n      id: \"2\",\n      name: \"Flash Sale Alert\",\n      message: \"⚡ FLASH SALE: 50% off everything! Limited time only. Shop now: [Link]\",\n      sent: 8750,\n      delivered: 8690,\n      clicked: 1042,\n      converted: 312,\n      revenue: 8924.75,\n      conversionRate: 29.9,\n      sentDate: \"2024-01-15\"\n    },\n    {\n      id: \"3\",\n      name: \"Restock Notification\",\n      message: \"Good news! The item you wanted is back in stock. Get yours before it's gone: [Link]\",\n      sent: 1250,\n      delivered: 1238,\n      clicked: 198,\n      converted: 67,\n      revenue: 2156.80,\n      conversionRate: 33.8,\n      sentDate: \"2024-01-12\"\n    }\n  ];\n\n  const totalRevenue = smsCampaigns.reduce((sum, campaign) => sum + campaign.revenue, 0);\n  const totalSent = smsCampaigns.reduce((sum, campaign) => sum + campaign.sent, 0);\n  const totalConverted = smsCampaigns.reduce((sum, campaign) => sum + campaign.converted, 0);\n  const avgConversionRate = (totalConverted / totalSent * 100).toFixed(1);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-[#021024] to-[#052659]\">\n      {/* Header */}\n      <header className=\"bg-gradient-to-br from-[#021024] to-[#052659] backdrop-blur-sm border-b border-slate-700/50 px-4 sm:px-6 py-3 sm:py-4\">\n        <div className=\"flex items-center\">\n          <div className=\"flex items-center space-x-2 sm:space-x-4 min-w-0 flex-1\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={handleGoBack}\n              className=\"text-slate-200 hover:text-[#C1E8FF] hover:bg-white/10 transition-all duration-300 ease-in-out flex-shrink-0\"\n            >\n              <ArrowLeft className=\"w-4 h-4 sm:w-5 sm:h-5\" />\n            </Button>\n            <div className=\"min-w-0 flex-1\">\n              <h1 className=\"font-bold text-white text-base sm:text-lg lg:text-xl xl:text-2xl truncate\">\n                SMS Conversion\n              </h1>\n              <p className=\"text-slate-300 text-xs sm:text-sm lg:text-base truncate\">\n                SMS recovery campaigns and sales conversion tracking\n              </p>\n            </div>\n          </div>\n\n          <div className=\"flex items-center justify-end space-x-2 sm:space-x-4 flex-shrink-0\">\n            <NotificationCenter />\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button\n                  variant=\"ghost\"\n                  className=\"relative h-10 w-10 rounded-full text-slate-200 hover:text-[#C1E8FF] transition-all duration-300 ease-in-out\"\n                >\n                  <Avatar className=\"h-8 w-8\">\n                    <AvatarImage src=\"\" alt={user?.fullName || \"User\"} />\n                    <AvatarFallback className=\"bg-gradient-to-br from-[#021024] to-[#052659] text-[#C1E8FF]\">\n                      {user?.fullName?.charAt(0) || \"U\"}\n                    </AvatarFallback>\n                  </Avatar>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent className=\"w-56 bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700/50 text-white\" align=\"end\" forceMount>\n                <div className=\"flex items-center justify-start gap-2 p-2\">\n                  <div className=\"flex flex-col space-y-1 leading-none\">\n                    <p className=\"font-bold text-white text-sm\">{user?.fullName || \"User\"}</p>\n                    <p className=\"text-xs text-slate-300\">{user?.email}</p>\n                  </div>\n                </div>\n                <DropdownMenuSeparator className=\"bg-slate-700/30\" />\n                <DropdownMenuItem\n                  className=\"text-slate-200 hover:text-white hover:bg-white/10 focus:text-white focus:bg-white/10 cursor-pointer\"\n                  onClick={() => setLocation(\"/profile\")}\n                >\n                  <User className=\"mr-2 h-4 w-4\" />\n                  Profile\n                </DropdownMenuItem>\n                <DropdownMenuItem\n                  className=\"text-slate-200 hover:text-white hover:bg-white/10 focus:text-white focus:bg-white/10 cursor-pointer\"\n                  onClick={() => setLocation(\"/billing\")}\n                >\n                  <SettingsIcon className=\"mr-2 h-4 w-4\" />\n                  Settings\n                </DropdownMenuItem>\n                <DropdownMenuSeparator className=\"bg-slate-700/30\" />\n                <DropdownMenuItem\n                  className=\"text-red-300 hover:text-red-200 hover:bg-red-500/20 focus:text-red-200 focus:bg-red-500/20 cursor-pointer\"\n                  onClick={handleLogout}\n                >\n                  <LogOut className=\"mr-2 h-4 w-4\" />\n                  Logout\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <div className=\"p-4 sm:p-6 space-y-6\">\n        {/* Summary Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700/50\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"p-3 rounded-full bg-slate-800/50\">\n                  <MessageSquare className=\"w-6 h-6\" style={{ color: '#C1E8FF' }} />\n                </div>\n                <div>\n                  <h3 className=\"text-white font-bold text-2xl\">{totalSent.toLocaleString()}</h3>\n                  <p className=\"text-slate-300 text-sm\">Total SMS Sent</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700/50\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"p-3 rounded-full bg-slate-800/50\">\n                  <ShoppingCart className=\"w-6 h-6\" style={{ color: '#C1E8FF' }} />\n                </div>\n                <div>\n                  <h3 className=\"text-white font-bold text-2xl\">{totalConverted}</h3>\n                  <p className=\"text-slate-300 text-sm\">Conversions</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700/50\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"p-3 rounded-full bg-slate-800/50\">\n                  <TrendingUp className=\"w-6 h-6\" style={{ color: '#C1E8FF' }} />\n                </div>\n                <div>\n                  <h3 className=\"text-white font-bold text-2xl\">{avgConversionRate}%</h3>\n                  <p className=\"text-slate-300 text-sm\">Conversion Rate</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700/50\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"p-3 rounded-full bg-slate-800/50\">\n                  <DollarSign className=\"w-6 h-6\" style={{ color: '#C1E8FF' }} />\n                </div>\n                <div>\n                  <h3 className=\"text-white font-bold text-2xl\">${totalRevenue.toFixed(0)}</h3>\n                  <p className=\"text-slate-300 text-sm\">Revenue Generated</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Campaign Performance */}\n        <Card className=\"bg-gradient-to-br from-[#021024] to-[#052659] border-slate-700/50\">\n          <CardHeader>\n            <CardTitle className=\"text-white\">SMS Campaign Performance</CardTitle>\n            <CardDescription className=\"text-slate-300\">\n              Track abandoned cart recovery and SMS marketing campaign results\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {smsCampaigns.map((campaign) => (\n              <div key={campaign.id} className=\"bg-slate-800/30 rounded-lg p-4 space-y-3\">\n                <div className=\"flex items-start justify-between\">\n                  <div>\n                    <h3 className=\"text-white font-semibold text-lg\">{campaign.name}</h3>\n                    <p className=\"text-slate-300 text-sm max-w-2xl\">{campaign.message}</p>\n                    <p className=\"text-slate-400 text-xs mt-1\">\n                      Sent on {new Date(campaign.sentDate).toLocaleDateString()}\n                    </p>\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <Button size=\"sm\" variant=\"outline\" className=\"border-slate-600 text-slate-300 hover:bg-white/10\">\n                      <Eye className=\"w-4 h-4 mr-2\" />\n                      View\n                    </Button>\n                    <Button size=\"sm\" className=\"bg-[#C1E8FF] hover:bg-[#C1E8FF]/90 text-indigo-900\">\n                      <BarChart className=\"w-4 h-4 mr-2\" />\n                      Details\n                    </Button>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\n                  <div className=\"text-center\">\n                    <p className=\"text-lg font-bold text-white\">{campaign.sent}</p>\n                    <p className=\"text-slate-400 text-sm\">Sent</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-lg font-bold text-white\">{campaign.delivered}</p>\n                    <p className=\"text-slate-400 text-sm\">Delivered</p>\n                    <Badge variant=\"secondary\" className=\"bg-green-500/20 text-green-400 text-xs mt-1\">\n                      {((campaign.delivered / campaign.sent) * 100).toFixed(1)}%\n                    </Badge>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-lg font-bold text-white\">{campaign.clicked}</p>\n                    <p className=\"text-slate-400 text-sm\">Clicked</p>\n                    <Badge variant=\"secondary\" className=\"bg-blue-500/20 text-blue-400 text-xs mt-1\">\n                      {((campaign.clicked / campaign.delivered) * 100).toFixed(1)}%\n                    </Badge>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-lg font-bold text-white\">{campaign.converted}</p>\n                    <p className=\"text-slate-400 text-sm\">Converted</p>\n                    <Badge variant=\"secondary\" className=\"bg-purple-500/20 text-purple-400 text-xs mt-1\">\n                      {campaign.conversionRate}%\n                    </Badge>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-lg font-bold text-white\">${campaign.revenue.toFixed(0)}</p>\n                    <p className=\"text-slate-400 text-sm\">Revenue</p>\n                    <Badge variant=\"secondary\" className=\"bg-yellow-500/20 text-yellow-400 text-xs mt-1\">\n                      ${(campaign.revenue / campaign.converted).toFixed(0)} AOV\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":12918}},"version":1}